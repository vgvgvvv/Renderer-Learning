//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UniToLua
{
    using SDL2;
    using System;
    
    
    public class SDL21SDL_mixerWrap
    {
        
        public static void Register(UniLua.ILuaState L)
        {
			L.BeginStaticLib("SDL_mixer");
			L.RegVar("MIX_DEFAULT_FREQUENCY", get_MIX_DEFAULT_FREQUENCY, null);
			L.RegVar("MIX_DEFAULT_FORMAT", get_MIX_DEFAULT_FORMAT, null);
			L.RegVar("MIX_DEFAULT_CHANNELS", get_MIX_DEFAULT_CHANNELS, null);
			L.RegVar("MIX_MAX_VOLUME", get_MIX_MAX_VOLUME, null);
			L.RegVar("SDL_MIXER_MAJOR_VERSION", get_SDL_MIXER_MAJOR_VERSION, null);
			L.RegVar("SDL_MIXER_MINOR_VERSION", get_SDL_MIXER_MINOR_VERSION, null);
			L.RegVar("SDL_MIXER_PATCHLEVEL", get_SDL_MIXER_PATCHLEVEL, null);
			L.RegVar("MIX_CHANNELS", get_MIX_CHANNELS, null);
			L.RegFunction("Mix_GetSoundFonts", Mix_GetSoundFonts);
			L.RegFunction("Mix_EachSoundFont", Mix_EachSoundFont);
			L.RegFunction("Mix_SetTimidityCfg", Mix_SetTimidityCfg);
			L.RegFunction("INTERNAL_Mix_GetTimidityCfg", INTERNAL_Mix_GetTimidityCfg);
			L.RegFunction("Mix_GetTimidityCfg", Mix_GetTimidityCfg);
			L.RegFunction("Mix_GetChunk", Mix_GetChunk);
			L.RegFunction("Mix_CloseAudio", Mix_CloseAudio);
			L.RegFunction("Mix_HaltGroup", Mix_HaltGroup);
			L.RegFunction("Mix_HaltMusic", Mix_HaltMusic);
			L.RegFunction("Mix_ExpireChannel", Mix_ExpireChannel);
			L.RegFunction("Mix_FadeOutChannel", Mix_FadeOutChannel);
			L.RegFunction("Mix_FadeOutGroup", Mix_FadeOutGroup);
			L.RegFunction("Mix_FadeOutMusic", Mix_FadeOutMusic);
			L.RegFunction("Mix_FadingMusic", Mix_FadingMusic);
			L.RegFunction("Mix_FadingChannel", Mix_FadingChannel);
			L.RegFunction("Mix_Pause", Mix_Pause);
			L.RegFunction("Mix_Resume", Mix_Resume);
			L.RegFunction("Mix_Paused", Mix_Paused);
			L.RegFunction("Mix_PauseMusic", Mix_PauseMusic);
			L.RegFunction("Mix_ResumeMusic", Mix_ResumeMusic);
			L.RegFunction("Mix_RewindMusic", Mix_RewindMusic);
			L.RegFunction("Mix_PausedMusic", Mix_PausedMusic);
			L.RegFunction("Mix_SetMusicPosition", Mix_SetMusicPosition);
			L.RegFunction("Mix_GetMusicPosition", Mix_GetMusicPosition);
			L.RegFunction("Mix_MusicDuration", Mix_MusicDuration);
			L.RegFunction("Mix_GetMusicLoopStartTime", Mix_GetMusicLoopStartTime);
			L.RegFunction("Mix_GetMusicLoopEndTime", Mix_GetMusicLoopEndTime);
			L.RegFunction("Mix_GetMusicLoopLengthTime", Mix_GetMusicLoopLengthTime);
			L.RegFunction("Mix_Playing", Mix_Playing);
			L.RegFunction("Mix_PlayingMusic", Mix_PlayingMusic);
			L.RegFunction("Mix_SetMusicCMD", Mix_SetMusicCMD);
			L.RegFunction("Mix_SetSynchroValue", Mix_SetSynchroValue);
			L.RegFunction("Mix_GetSynchroValue", Mix_GetSynchroValue);
			L.RegFunction("Mix_SetSoundFonts", Mix_SetSoundFonts);
			L.RegFunction("Mix_HookMusicFinished", Mix_HookMusicFinished);
			L.RegFunction("Mix_GetMusicHookData", Mix_GetMusicHookData);
			L.RegFunction("Mix_ChannelFinished", Mix_ChannelFinished);
			L.RegFunction("Mix_RegisterEffect", Mix_RegisterEffect);
			L.RegFunction("Mix_UnregisterEffect", Mix_UnregisterEffect);
			L.RegFunction("Mix_UnregisterAllEffects", Mix_UnregisterAllEffects);
			L.RegFunction("Mix_SetPanning", Mix_SetPanning);
			L.RegFunction("Mix_SetPosition", Mix_SetPosition);
			L.RegFunction("Mix_SetDistance", Mix_SetDistance);
			L.RegFunction("Mix_SetReverseStereo", Mix_SetReverseStereo);
			L.RegFunction("Mix_ReserveChannels", Mix_ReserveChannels);
			L.RegFunction("Mix_GroupChannel", Mix_GroupChannel);
			L.RegFunction("Mix_GroupChannels", Mix_GroupChannels);
			L.RegFunction("Mix_GroupAvailable", Mix_GroupAvailable);
			L.RegFunction("Mix_GroupCount", Mix_GroupCount);
			L.RegFunction("Mix_GroupOldest", Mix_GroupOldest);
			L.RegFunction("Mix_GroupNewer", Mix_GroupNewer);
			L.RegFunction("Mix_PlayChannel", Mix_PlayChannel);
			L.RegFunction("Mix_PlayChannelTimed", Mix_PlayChannelTimed);
			L.RegFunction("Mix_PlayMusic", Mix_PlayMusic);
			L.RegFunction("Mix_FadeInMusic", Mix_FadeInMusic);
			L.RegFunction("Mix_FadeInMusicPos", Mix_FadeInMusicPos);
			L.RegFunction("Mix_FadeInChannel", Mix_FadeInChannel);
			L.RegFunction("Mix_FadeInChannelTimed", Mix_FadeInChannelTimed);
			L.RegFunction("Mix_Volume", Mix_Volume);
			L.RegFunction("Mix_VolumeChunk", Mix_VolumeChunk);
			L.RegFunction("Mix_VolumeMusic", Mix_VolumeMusic);
			L.RegFunction("Mix_GetVolumeMusicStream", Mix_GetVolumeMusicStream);
			L.RegFunction("Mix_HaltChannel", Mix_HaltChannel);
			L.RegFunction("MIX_Linked_Version", MIX_Linked_Version);
			L.RegFunction("Mix_Init", Mix_Init);
			L.RegFunction("Mix_Quit", Mix_Quit);
			L.RegFunction("Mix_OpenAudio", Mix_OpenAudio);
			L.RegFunction("Mix_AllocateChannels", Mix_AllocateChannels);
			L.RegFunction("Mix_LoadWAV_RW", Mix_LoadWAV_RW);
			L.RegFunction("Mix_LoadWAV", Mix_LoadWAV);
			L.RegFunction("Mix_LoadMUS", Mix_LoadMUS);
			L.RegFunction("Mix_QuickLoad_WAV", Mix_QuickLoad_WAV);
			L.RegFunction("Mix_QuickLoad_RAW", Mix_QuickLoad_RAW);
			L.RegFunction("Mix_FreeChunk", Mix_FreeChunk);
			L.RegFunction("Mix_FreeMusic", Mix_FreeMusic);
			L.RegFunction("Mix_GetNumChunkDecoders", Mix_GetNumChunkDecoders);
			L.RegFunction("Mix_GetChunkDecoder", Mix_GetChunkDecoder);
			L.RegFunction("Mix_GetNumMusicDecoders", Mix_GetNumMusicDecoders);
			L.RegFunction("Mix_GetMusicDecoder", Mix_GetMusicDecoder);
			L.RegFunction("Mix_GetMusicType", Mix_GetMusicType);
			L.RegFunction("INTERNAL_Mix_GetMusicTitle", INTERNAL_Mix_GetMusicTitle);
			L.RegFunction("Mix_GetMusicTitle", Mix_GetMusicTitle);
			L.RegFunction("INTERNAL_Mix_GetMusicTitleTag", INTERNAL_Mix_GetMusicTitleTag);
			L.RegFunction("Mix_GetMusicTitleTag", Mix_GetMusicTitleTag);
			L.RegFunction("INTERNAL_Mix_GetMusicArtistTag", INTERNAL_Mix_GetMusicArtistTag);
			L.RegFunction("Mix_GetMusicArtistTag", Mix_GetMusicArtistTag);
			L.RegFunction("INTERNAL_Mix_GetMusicAlbumTag", INTERNAL_Mix_GetMusicAlbumTag);
			L.RegFunction("Mix_GetMusicAlbumTag", Mix_GetMusicAlbumTag);
			L.RegFunction("INTERNAL_Mix_GetMusicCopyrightTag", INTERNAL_Mix_GetMusicCopyrightTag);
			L.RegFunction("Mix_GetMusicCopyrightTag", Mix_GetMusicCopyrightTag);
			L.RegFunction("Mix_SetPostMix", Mix_SetPostMix);
			L.RegFunction("Mix_HookMusic", Mix_HookMusic);
			L.EndStaticLib();
        }
        
        private static int get_MIX_DEFAULT_FREQUENCY(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_mixer.MIX_DEFAULT_FREQUENCY);
			return 1;
        }
        
        private static int get_MIX_DEFAULT_FORMAT(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL_mixer.MIX_DEFAULT_FORMAT);
			return 1;
        }
        
        private static int get_MIX_DEFAULT_CHANNELS(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_mixer.MIX_DEFAULT_CHANNELS);
			return 1;
        }
        
        private static int get_MIX_MAX_VOLUME(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL_mixer.MIX_MAX_VOLUME);
			return 1;
        }
        
        private static int get_SDL_MIXER_MAJOR_VERSION(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_mixer.SDL_MIXER_MAJOR_VERSION);
			return 1;
        }
        
        private static int get_SDL_MIXER_MINOR_VERSION(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_mixer.SDL_MIXER_MINOR_VERSION);
			return 1;
        }
        
        private static int get_SDL_MIXER_PATCHLEVEL(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_mixer.SDL_MIXER_PATCHLEVEL);
			return 1;
        }
        
        private static int get_MIX_CHANNELS(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_mixer.MIX_CHANNELS);
			return 1;
        }
        
        private static int Mix_GetSoundFonts(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				string result;
				result = SDL2.SDL_mixer.Mix_GetSoundFonts();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetSoundFonts args is error");
			return 1;
        }
        
        private static int Mix_EachSoundFont(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SDL2.SDL_mixer.SoundFontDelegate, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<SDL2.SDL_mixer.SoundFontDelegate>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				result = SDL2.SDL_mixer.Mix_EachSoundFont(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_EachSoundFont args is error");
			return 1;
        }
        
        private static int Mix_SetTimidityCfg(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				int result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL_mixer.Mix_SetTimidityCfg(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_SetTimidityCfg args is error");
			return 1;
        }
        
        private static int INTERNAL_Mix_GetTimidityCfg(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				System.IntPtr result;
				result = SDL2.SDL_mixer.INTERNAL_Mix_GetTimidityCfg();
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function INTERNAL_Mix_GetTimidityCfg args is error");
			return 1;
        }
        
        private static int Mix_GetTimidityCfg(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				string result;
				result = SDL2.SDL_mixer.Mix_GetTimidityCfg();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetTimidityCfg args is error");
			return 1;
        }
        
        private static int Mix_GetChunk(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_GetChunk(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetChunk args is error");
			return 1;
        }
        
        private static int Mix_CloseAudio(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL_mixer.Mix_CloseAudio();
				return 0;
			}
			L.L_Error("call function Mix_CloseAudio args is error");
			return 1;
        }
        
        private static int Mix_HaltGroup(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_HaltGroup(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_HaltGroup args is error");
			return 1;
        }
        
        private static int Mix_HaltMusic(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL_mixer.Mix_HaltMusic();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_HaltMusic args is error");
			return 1;
        }
        
        private static int Mix_ExpireChannel(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL_mixer.Mix_ExpireChannel(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_ExpireChannel args is error");
			return 1;
        }
        
        private static int Mix_FadeOutChannel(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL_mixer.Mix_FadeOutChannel(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_FadeOutChannel args is error");
			return 1;
        }
        
        private static int Mix_FadeOutGroup(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL_mixer.Mix_FadeOutGroup(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_FadeOutGroup args is error");
			return 1;
        }
        
        private static int Mix_FadeOutMusic(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_FadeOutMusic(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_FadeOutMusic args is error");
			return 1;
        }
        
        private static int Mix_FadingMusic(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL_mixer.Mix_Fading result;
				result = SDL2.SDL_mixer.Mix_FadingMusic();
				L.PushAny<SDL2.SDL_mixer.Mix_Fading>(result);
				return 1;
			}
			L.L_Error("call function Mix_FadingMusic args is error");
			return 1;
        }
        
        private static int Mix_FadingChannel(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				SDL2.SDL_mixer.Mix_Fading result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_FadingChannel(arg1);
				L.PushAny<SDL2.SDL_mixer.Mix_Fading>(result);
				return 1;
			}
			L.L_Error("call function Mix_FadingChannel args is error");
			return 1;
        }
        
        private static int Mix_Pause(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				var arg1 = L.CheckAny<int>(1);
				SDL2.SDL_mixer.Mix_Pause(arg1);
				return 0;
			}
			L.L_Error("call function Mix_Pause args is error");
			return 1;
        }
        
        private static int Mix_Resume(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				var arg1 = L.CheckAny<int>(1);
				SDL2.SDL_mixer.Mix_Resume(arg1);
				return 0;
			}
			L.L_Error("call function Mix_Resume args is error");
			return 1;
        }
        
        private static int Mix_Paused(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_Paused(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_Paused args is error");
			return 1;
        }
        
        private static int Mix_PauseMusic(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL_mixer.Mix_PauseMusic();
				return 0;
			}
			L.L_Error("call function Mix_PauseMusic args is error");
			return 1;
        }
        
        private static int Mix_ResumeMusic(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL_mixer.Mix_ResumeMusic();
				return 0;
			}
			L.L_Error("call function Mix_ResumeMusic args is error");
			return 1;
        }
        
        private static int Mix_RewindMusic(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL_mixer.Mix_RewindMusic();
				return 0;
			}
			L.L_Error("call function Mix_RewindMusic args is error");
			return 1;
        }
        
        private static int Mix_PausedMusic(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL_mixer.Mix_PausedMusic();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_PausedMusic args is error");
			return 1;
        }
        
        private static int Mix_SetMusicPosition(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<double>(1))
			{
				int result;
				var arg1 = L.CheckAny<double>(1);
				result = SDL2.SDL_mixer.Mix_SetMusicPosition(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_SetMusicPosition args is error");
			return 1;
        }
        
        private static int Mix_GetMusicPosition(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				double result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.Mix_GetMusicPosition(arg1);
				L.PushAny<double>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetMusicPosition args is error");
			return 1;
        }
        
        private static int Mix_MusicDuration(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				double result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.Mix_MusicDuration(arg1);
				L.PushAny<double>(result);
				return 1;
			}
			L.L_Error("call function Mix_MusicDuration args is error");
			return 1;
        }
        
        private static int Mix_GetMusicLoopStartTime(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				double result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.Mix_GetMusicLoopStartTime(arg1);
				L.PushAny<double>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetMusicLoopStartTime args is error");
			return 1;
        }
        
        private static int Mix_GetMusicLoopEndTime(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				double result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.Mix_GetMusicLoopEndTime(arg1);
				L.PushAny<double>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetMusicLoopEndTime args is error");
			return 1;
        }
        
        private static int Mix_GetMusicLoopLengthTime(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				double result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.Mix_GetMusicLoopLengthTime(arg1);
				L.PushAny<double>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetMusicLoopLengthTime args is error");
			return 1;
        }
        
        private static int Mix_Playing(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_Playing(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_Playing args is error");
			return 1;
        }
        
        private static int Mix_PlayingMusic(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL_mixer.Mix_PlayingMusic();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_PlayingMusic args is error");
			return 1;
        }
        
        private static int Mix_SetMusicCMD(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				int result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL_mixer.Mix_SetMusicCMD(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_SetMusicCMD args is error");
			return 1;
        }
        
        private static int Mix_SetSynchroValue(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_SetSynchroValue(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_SetSynchroValue args is error");
			return 1;
        }
        
        private static int Mix_GetSynchroValue(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL_mixer.Mix_GetSynchroValue();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetSynchroValue args is error");
			return 1;
        }
        
        private static int Mix_SetSoundFonts(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				int result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL_mixer.Mix_SetSoundFonts(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_SetSoundFonts args is error");
			return 1;
        }
        
        private static int Mix_HookMusicFinished(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL_mixer.MusicFinishedDelegate>(1))
			{
				var arg1 = L.CheckAny<SDL2.SDL_mixer.MusicFinishedDelegate>(1);
				SDL2.SDL_mixer.Mix_HookMusicFinished(arg1);
				return 0;
			}
			L.L_Error("call function Mix_HookMusicFinished args is error");
			return 1;
        }
        
        private static int Mix_GetMusicHookData(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				System.IntPtr result;
				result = SDL2.SDL_mixer.Mix_GetMusicHookData();
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetMusicHookData args is error");
			return 1;
        }
        
        private static int Mix_ChannelFinished(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL_mixer.ChannelFinishedDelegate>(1))
			{
				var arg1 = L.CheckAny<SDL2.SDL_mixer.ChannelFinishedDelegate>(1);
				SDL2.SDL_mixer.Mix_ChannelFinished(arg1);
				return 0;
			}
			L.L_Error("call function Mix_ChannelFinished args is error");
			return 1;
        }
        
        private static int Mix_RegisterEffect(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<int, SDL2.SDL_mixer.Mix_EffectFunc_t, SDL2.SDL_mixer.Mix_EffectDone_t, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<SDL2.SDL_mixer.Mix_EffectFunc_t>(2);
				var arg3 = L.CheckAny<SDL2.SDL_mixer.Mix_EffectDone_t>(3);
				var arg4 = L.CheckAny<System.IntPtr>(4);
				result = SDL2.SDL_mixer.Mix_RegisterEffect(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_RegisterEffect args is error");
			return 1;
        }
        
        private static int Mix_UnregisterEffect(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, SDL2.SDL_mixer.Mix_EffectFunc_t>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<SDL2.SDL_mixer.Mix_EffectFunc_t>(2);
				result = SDL2.SDL_mixer.Mix_UnregisterEffect(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_UnregisterEffect args is error");
			return 1;
        }
        
        private static int Mix_UnregisterAllEffects(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_UnregisterAllEffects(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_UnregisterAllEffects args is error");
			return 1;
        }
        
        private static int Mix_SetPanning(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<int, byte, byte>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<byte>(2);
				var arg3 = L.CheckAny<byte>(3);
				result = SDL2.SDL_mixer.Mix_SetPanning(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_SetPanning args is error");
			return 1;
        }
        
        private static int Mix_SetPosition(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<int, short, byte>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<short>(2);
				var arg3 = L.CheckAny<byte>(3);
				result = SDL2.SDL_mixer.Mix_SetPosition(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_SetPosition args is error");
			return 1;
        }
        
        private static int Mix_SetDistance(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, byte>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<byte>(2);
				result = SDL2.SDL_mixer.Mix_SetDistance(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_SetDistance args is error");
			return 1;
        }
        
        private static int Mix_SetReverseStereo(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL_mixer.Mix_SetReverseStereo(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_SetReverseStereo args is error");
			return 1;
        }
        
        private static int Mix_ReserveChannels(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_ReserveChannels(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_ReserveChannels args is error");
			return 1;
        }
        
        private static int Mix_GroupChannel(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL_mixer.Mix_GroupChannel(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_GroupChannel args is error");
			return 1;
        }
        
        private static int Mix_GroupChannels(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<int, int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL_mixer.Mix_GroupChannels(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_GroupChannels args is error");
			return 1;
        }
        
        private static int Mix_GroupAvailable(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_GroupAvailable(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_GroupAvailable args is error");
			return 1;
        }
        
        private static int Mix_GroupCount(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_GroupCount(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_GroupCount args is error");
			return 1;
        }
        
        private static int Mix_GroupOldest(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_GroupOldest(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_GroupOldest args is error");
			return 1;
        }
        
        private static int Mix_GroupNewer(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_GroupNewer(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_GroupNewer args is error");
			return 1;
        }
        
        private static int Mix_PlayChannel(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<int, System.IntPtr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL_mixer.Mix_PlayChannel(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_PlayChannel args is error");
			return 1;
        }
        
        private static int Mix_PlayChannelTimed(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<int, System.IntPtr, int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<int>(4);
				result = SDL2.SDL_mixer.Mix_PlayChannelTimed(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_PlayChannelTimed args is error");
			return 1;
        }
        
        private static int Mix_PlayMusic(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL_mixer.Mix_PlayMusic(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_PlayMusic args is error");
			return 1;
        }
        
        private static int Mix_FadeInMusic(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL_mixer.Mix_FadeInMusic(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_FadeInMusic args is error");
			return 1;
        }
        
        private static int Mix_FadeInMusicPos(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, int, int, double>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<double>(4);
				result = SDL2.SDL_mixer.Mix_FadeInMusicPos(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_FadeInMusicPos args is error");
			return 1;
        }
        
        private static int Mix_FadeInChannel(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<int, System.IntPtr, int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<int>(4);
				result = SDL2.SDL_mixer.Mix_FadeInChannel(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_FadeInChannel args is error");
			return 1;
        }
        
        private static int Mix_FadeInChannelTimed(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<int, System.IntPtr, int, int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<int>(4);
				var arg5 = L.CheckAny<int>(5);
				result = SDL2.SDL_mixer.Mix_FadeInChannelTimed(arg1, arg2, arg3, arg4, arg5);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_FadeInChannelTimed args is error");
			return 1;
        }
        
        private static int Mix_Volume(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL_mixer.Mix_Volume(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_Volume args is error");
			return 1;
        }
        
        private static int Mix_VolumeChunk(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL_mixer.Mix_VolumeChunk(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_VolumeChunk args is error");
			return 1;
        }
        
        private static int Mix_VolumeMusic(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_VolumeMusic(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_VolumeMusic args is error");
			return 1;
        }
        
        private static int Mix_GetVolumeMusicStream(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.Mix_GetVolumeMusicStream(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetVolumeMusicStream args is error");
			return 1;
        }
        
        private static int Mix_HaltChannel(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_HaltChannel(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_HaltChannel args is error");
			return 1;
        }
        
        private static int MIX_Linked_Version(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_version result;
				result = SDL2.SDL_mixer.MIX_Linked_Version();
				L.PushAny<SDL2.SDL.SDL_version>(result);
				return 1;
			}
			L.L_Error("call function MIX_Linked_Version args is error");
			return 1;
        }
        
        private static int Mix_Init(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL_mixer.MIX_InitFlags>(1))
			{
				int result;
				var arg1 = L.CheckAny<SDL2.SDL_mixer.MIX_InitFlags>(1);
				result = SDL2.SDL_mixer.Mix_Init(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_Init args is error");
			return 1;
        }
        
        private static int Mix_Quit(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL_mixer.Mix_Quit();
				return 0;
			}
			L.L_Error("call function Mix_Quit args is error");
			return 1;
        }
        
        private static int Mix_OpenAudio(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<int, ushort, int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<ushort>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<int>(4);
				result = SDL2.SDL_mixer.Mix_OpenAudio(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_OpenAudio args is error");
			return 1;
        }
        
        private static int Mix_AllocateChannels(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_AllocateChannels(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_AllocateChannels args is error");
			return 1;
        }
        
        private static int Mix_LoadWAV_RW(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL_mixer.Mix_LoadWAV_RW(arg1, arg2);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function Mix_LoadWAV_RW args is error");
			return 1;
        }
        
        private static int Mix_LoadWAV(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL_mixer.Mix_LoadWAV(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function Mix_LoadWAV args is error");
			return 1;
        }
        
        private static int Mix_LoadMUS(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL_mixer.Mix_LoadMUS(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function Mix_LoadMUS args is error");
			return 1;
        }
        
        private static int Mix_QuickLoad_WAV(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<byte[]>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<byte[]>(1);
				result = SDL2.SDL_mixer.Mix_QuickLoad_WAV(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function Mix_QuickLoad_WAV args is error");
			return 1;
        }
        
        private static int Mix_QuickLoad_RAW(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<byte[], uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<byte[]>(1);
				var arg2 = L.CheckAny<uint>(2);
				result = SDL2.SDL_mixer.Mix_QuickLoad_RAW(arg1, arg2);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function Mix_QuickLoad_RAW args is error");
			return 1;
        }
        
        private static int Mix_FreeChunk(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL_mixer.Mix_FreeChunk(arg1);
				return 0;
			}
			L.L_Error("call function Mix_FreeChunk args is error");
			return 1;
        }
        
        private static int Mix_FreeMusic(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL_mixer.Mix_FreeMusic(arg1);
				return 0;
			}
			L.L_Error("call function Mix_FreeMusic args is error");
			return 1;
        }
        
        private static int Mix_GetNumChunkDecoders(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL_mixer.Mix_GetNumChunkDecoders();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetNumChunkDecoders args is error");
			return 1;
        }
        
        private static int Mix_GetChunkDecoder(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				string result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_GetChunkDecoder(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetChunkDecoder args is error");
			return 1;
        }
        
        private static int Mix_GetNumMusicDecoders(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL_mixer.Mix_GetNumMusicDecoders();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetNumMusicDecoders args is error");
			return 1;
        }
        
        private static int Mix_GetMusicDecoder(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				string result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_mixer.Mix_GetMusicDecoder(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetMusicDecoder args is error");
			return 1;
        }
        
        private static int Mix_GetMusicType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				SDL2.SDL_mixer.Mix_MusicType result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.Mix_GetMusicType(arg1);
				L.PushAny<SDL2.SDL_mixer.Mix_MusicType>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetMusicType args is error");
			return 1;
        }
        
        private static int INTERNAL_Mix_GetMusicTitle(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.INTERNAL_Mix_GetMusicTitle(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function INTERNAL_Mix_GetMusicTitle args is error");
			return 1;
        }
        
        private static int Mix_GetMusicTitle(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				string result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.Mix_GetMusicTitle(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetMusicTitle args is error");
			return 1;
        }
        
        private static int INTERNAL_Mix_GetMusicTitleTag(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.INTERNAL_Mix_GetMusicTitleTag(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function INTERNAL_Mix_GetMusicTitleTag args is error");
			return 1;
        }
        
        private static int Mix_GetMusicTitleTag(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				string result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.Mix_GetMusicTitleTag(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetMusicTitleTag args is error");
			return 1;
        }
        
        private static int INTERNAL_Mix_GetMusicArtistTag(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.INTERNAL_Mix_GetMusicArtistTag(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function INTERNAL_Mix_GetMusicArtistTag args is error");
			return 1;
        }
        
        private static int Mix_GetMusicArtistTag(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				string result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.Mix_GetMusicArtistTag(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetMusicArtistTag args is error");
			return 1;
        }
        
        private static int INTERNAL_Mix_GetMusicAlbumTag(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.INTERNAL_Mix_GetMusicAlbumTag(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function INTERNAL_Mix_GetMusicAlbumTag args is error");
			return 1;
        }
        
        private static int Mix_GetMusicAlbumTag(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				string result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.Mix_GetMusicAlbumTag(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetMusicAlbumTag args is error");
			return 1;
        }
        
        private static int INTERNAL_Mix_GetMusicCopyrightTag(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.INTERNAL_Mix_GetMusicCopyrightTag(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function INTERNAL_Mix_GetMusicCopyrightTag args is error");
			return 1;
        }
        
        private static int Mix_GetMusicCopyrightTag(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				string result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_mixer.Mix_GetMusicCopyrightTag(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function Mix_GetMusicCopyrightTag args is error");
			return 1;
        }
        
        private static int Mix_SetPostMix(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SDL2.SDL_mixer.MixFuncDelegate, System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<SDL2.SDL_mixer.MixFuncDelegate>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				SDL2.SDL_mixer.Mix_SetPostMix(arg1, arg2);
				return 0;
			}
			L.L_Error("call function Mix_SetPostMix args is error");
			return 1;
        }
        
        private static int Mix_HookMusic(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SDL2.SDL_mixer.MixFuncDelegate, System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<SDL2.SDL_mixer.MixFuncDelegate>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				SDL2.SDL_mixer.Mix_HookMusic(arg1, arg2);
				return 0;
			}
			L.L_Error("call function Mix_HookMusic args is error");
			return 1;
        }
    }
}
