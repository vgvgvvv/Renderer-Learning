//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UniToLua
{
    using SoftwareRenderer.Render;
    using SoftwareRenderer.Core;
    using System;
    using System.Collections.Generic;
    using MathLib;
    
    
    public class SoftwareRenderer1Render1CameraWrap
    {
        
        public static void Register(UniLua.ILuaState L)
        {
			L.BeginClass(typeof(SoftwareRenderer.Render.Camera), typeof(SoftwareRenderer.Core.Behavior));
			L.RegFunction("New", _CreateSoftwareRenderer1Render1Camera);
			L.RegVar("FOV", get_FOV, set_FOV);
			L.RegVar("Aspect", get_Aspect, set_Aspect);
			L.RegVar("NearZ", get_NearZ, set_NearZ);
			L.RegVar("FarZ", get_FarZ, set_FarZ);
			L.RegVar("Cameras", get_Cameras, set_Cameras);
			L.RegVar("main", get_main, null);
			L.RegVar("Forward", get_Forward, null);
			L.RegVar("Owner", get_Owner, null);
			L.RegVar("Transform", get_Transform, set_Transform);
			L.RegFunction("OnUpdate_Add", add_OnUpdate);
			L.RegFunction("OnUpdate_Remove", remove_OnUpdate);
			L.RegFunction("OnBeforeRender_Add", add_OnBeforeRender);
			L.RegFunction("OnBeforeRender_Remove", remove_OnBeforeRender);
			L.RegFunction("Update", Update);
			L.RegFunction("BeforeRender", BeforeRender);
			L.RegFunction("GetViewMatrix", GetViewMatrix);
			L.RegFunction("GetPerspectiveProjectionMatrix", GetPerspectiveProjectionMatrix);
			L.RegFunction("GetOrthoProjectionMatrix", GetOrthoProjectionMatrix);
			L.RegFunction("Awake", Awake);
			L.RegFunction("GetType", GetType);
			L.RegFunction("ToString", ToString);
			L.RegFunction("Equals", Equals);
			L.RegFunction("GetHashCode", GetHashCode);
			L.EndClass();
        }
        
        private static int _CreateSoftwareRenderer1Render1Camera(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				L.PushAny<SoftwareRenderer.Render.Camera>(new SoftwareRenderer.Render.Camera());
				return 1;
			}
			L.L_Error("call Camera constructor args is error");
			return 1;
        }
        
        private static int get_FOV(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
			L.PushAny<int>(obj.FOV);
			return 1;
        }
        
        private static int set_FOV(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
			var value = L.CheckAny<int>(2);
			obj.FOV = value;
			return 0;
        }
        
        private static int get_Aspect(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
			L.PushAny<float>(obj.Aspect);
			return 1;
        }
        
        private static int set_Aspect(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.Aspect = value;
			return 0;
        }
        
        private static int get_NearZ(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
			L.PushAny<float>(obj.NearZ);
			return 1;
        }
        
        private static int set_NearZ(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.NearZ = value;
			return 0;
        }
        
        private static int get_FarZ(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
			L.PushAny<float>(obj.FarZ);
			return 1;
        }
        
        private static int set_FarZ(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.FarZ = value;
			return 0;
        }
        
        private static int get_Cameras(UniLua.ILuaState L)
        {
			L.PushAny<System.Collections.Generic.List<SoftwareRenderer.Render.Camera>>(SoftwareRenderer.Render.Camera.Cameras);
			return 1;
        }
        
        private static int set_Cameras(UniLua.ILuaState L)
        {
			var value = L.CheckAny<System.Collections.Generic.List<SoftwareRenderer.Render.Camera>>(1);
			SoftwareRenderer.Render.Camera.Cameras = value;
			return 0;
        }
        
        private static int get_main(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
			L.PushAny<SoftwareRenderer.Render.Camera>(obj.main);
			return 1;
        }
        
        private static int get_Forward(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
			L.PushAny<MathLib.Vector3>(obj.Forward);
			return 1;
        }
        
        private static int get_Owner(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
			L.PushAny<SoftwareRenderer.Core.WorldObject>(obj.Owner);
			return 1;
        }
        
        private static int get_Transform(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
			L.PushAny<SoftwareRenderer.Core.Transform>(obj.Transform);
			return 1;
        }
        
        private static int set_Transform(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
			var value = L.CheckAny<SoftwareRenderer.Core.Transform>(2);
			obj.Transform = value;
			return 0;
        }
        
        private static int add_OnUpdate(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SoftwareRenderer.Render.Camera, System.Action>(1))
			{
				var obj = L.CheckAny<SoftwareRenderer.Render.Camera>(1);
				var value = L.CheckAny<System.Action>(2);
				obj.OnUpdate += value;
				L.PushAny<SoftwareRenderer.Render.Camera>(obj);
				return 1;
			}
			L.L_Error("add method args is error");
			return 1;
        }
        
        private static int remove_OnUpdate(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SoftwareRenderer.Render.Camera, System.Action>(1))
			{
				var obj = L.CheckAny<SoftwareRenderer.Render.Camera>(1);
				var value = L.CheckAny<System.Action>(2);
				obj.OnUpdate -= value;
				L.PushAny<SoftwareRenderer.Render.Camera>(obj);
				return 1;
			}
			L.L_Error("add method args is error");
			return 1;
        }
        
        private static int add_OnBeforeRender(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SoftwareRenderer.Render.Camera, System.Action>(1))
			{
				var obj = L.CheckAny<SoftwareRenderer.Render.Camera>(1);
				var value = L.CheckAny<System.Action>(2);
				obj.OnBeforeRender += value;
				L.PushAny<SoftwareRenderer.Render.Camera>(obj);
				return 1;
			}
			L.L_Error("add method args is error");
			return 1;
        }
        
        private static int remove_OnBeforeRender(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SoftwareRenderer.Render.Camera, System.Action>(1))
			{
				var obj = L.CheckAny<SoftwareRenderer.Render.Camera>(1);
				var value = L.CheckAny<System.Action>(2);
				obj.OnBeforeRender -= value;
				L.PushAny<SoftwareRenderer.Render.Camera>(obj);
				return 1;
			}
			L.L_Error("add method args is error");
			return 1;
        }
        
        private static int Update(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
				obj.Update();
				return 0;
			}
			L.L_Error("call function Update args is error");
			return 1;
        }
        
        private static int BeforeRender(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
				obj.BeforeRender();
				return 0;
			}
			L.L_Error("call function BeforeRender args is error");
			return 1;
        }
        
        private static int GetViewMatrix(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				MathLib.Matrix4x4 result;
				var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
				result = obj.GetViewMatrix();
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			L.L_Error("call function GetViewMatrix args is error");
			return 1;
        }
        
        private static int GetPerspectiveProjectionMatrix(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				MathLib.Matrix4x4 result;
				var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
				result = obj.GetPerspectiveProjectionMatrix();
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			L.L_Error("call function GetPerspectiveProjectionMatrix args is error");
			return 1;
        }
        
        private static int GetOrthoProjectionMatrix(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				MathLib.Matrix4x4 result;
				var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
				result = obj.GetOrthoProjectionMatrix();
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			L.L_Error("call function GetOrthoProjectionMatrix args is error");
			return 1;
        }
        
        private static int Awake(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
				obj.Awake();
				return 0;
			}
			L.L_Error("call function Awake args is error");
			return 1;
        }
        
        private static int GetType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				System.Type result;
				var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
				result = obj.GetType();
				L.PushAny<System.Type>(result);
				return 1;
			}
			L.L_Error("call function GetType args is error");
			return 1;
        }
        
        private static int ToString(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				string result;
				var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
				result = obj.ToString();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function ToString args is error");
			return 1;
        }
        
        private static int Equals(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SoftwareRenderer.Render.Camera, object>(1))
			{
				bool result;
				var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
				var arg1 = L.CheckAny<object>(2);
				result = obj.Equals(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function Equals args is error");
			return 1;
        }
        
        private static int GetHashCode(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				int result;
				var obj = (SoftwareRenderer.Render.Camera) L.ToUserData(1);
				result = obj.GetHashCode();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function GetHashCode args is error");
			return 1;
        }
    }
}
