//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UniToLua
{
    using SDL2;
    using System;
    
    
    public class SDL21SDLWrap
    {
        
        public static void Register(UniLua.ILuaState L)
        {
			L.BeginStaticLib("SDL");
			L.RegVar("SDL_COMPILEDVERSION", get_SDL_COMPILEDVERSION, null);
			L.RegVar("SDL_PIXELFORMAT_UNKNOWN", get_SDL_PIXELFORMAT_UNKNOWN, null);
			L.RegVar("SDL_PIXELFORMAT_INDEX1LSB", get_SDL_PIXELFORMAT_INDEX1LSB, null);
			L.RegVar("SDL_PIXELFORMAT_INDEX1MSB", get_SDL_PIXELFORMAT_INDEX1MSB, null);
			L.RegVar("SDL_PIXELFORMAT_INDEX4LSB", get_SDL_PIXELFORMAT_INDEX4LSB, null);
			L.RegVar("SDL_PIXELFORMAT_INDEX4MSB", get_SDL_PIXELFORMAT_INDEX4MSB, null);
			L.RegVar("SDL_PIXELFORMAT_INDEX8", get_SDL_PIXELFORMAT_INDEX8, null);
			L.RegVar("SDL_PIXELFORMAT_RGB332", get_SDL_PIXELFORMAT_RGB332, null);
			L.RegVar("SDL_PIXELFORMAT_XRGB444", get_SDL_PIXELFORMAT_XRGB444, null);
			L.RegVar("SDL_PIXELFORMAT_RGB444", get_SDL_PIXELFORMAT_RGB444, null);
			L.RegVar("SDL_PIXELFORMAT_XBGR444", get_SDL_PIXELFORMAT_XBGR444, null);
			L.RegVar("SDL_PIXELFORMAT_BGR444", get_SDL_PIXELFORMAT_BGR444, null);
			L.RegVar("SDL_PIXELFORMAT_XRGB1555", get_SDL_PIXELFORMAT_XRGB1555, null);
			L.RegVar("SDL_PIXELFORMAT_RGB555", get_SDL_PIXELFORMAT_RGB555, null);
			L.RegVar("SDL_PIXELFORMAT_XBGR1555", get_SDL_PIXELFORMAT_XBGR1555, null);
			L.RegVar("SDL_PIXELFORMAT_BGR555", get_SDL_PIXELFORMAT_BGR555, null);
			L.RegVar("SDL_PIXELFORMAT_ARGB4444", get_SDL_PIXELFORMAT_ARGB4444, null);
			L.RegVar("SDL_PIXELFORMAT_RGBA4444", get_SDL_PIXELFORMAT_RGBA4444, null);
			L.RegVar("SDL_PIXELFORMAT_ABGR4444", get_SDL_PIXELFORMAT_ABGR4444, null);
			L.RegVar("SDL_PIXELFORMAT_BGRA4444", get_SDL_PIXELFORMAT_BGRA4444, null);
			L.RegVar("SDL_PIXELFORMAT_ARGB1555", get_SDL_PIXELFORMAT_ARGB1555, null);
			L.RegVar("SDL_PIXELFORMAT_RGBA5551", get_SDL_PIXELFORMAT_RGBA5551, null);
			L.RegVar("SDL_PIXELFORMAT_ABGR1555", get_SDL_PIXELFORMAT_ABGR1555, null);
			L.RegVar("SDL_PIXELFORMAT_BGRA5551", get_SDL_PIXELFORMAT_BGRA5551, null);
			L.RegVar("SDL_PIXELFORMAT_RGB565", get_SDL_PIXELFORMAT_RGB565, null);
			L.RegVar("SDL_PIXELFORMAT_BGR565", get_SDL_PIXELFORMAT_BGR565, null);
			L.RegVar("SDL_PIXELFORMAT_RGB24", get_SDL_PIXELFORMAT_RGB24, null);
			L.RegVar("SDL_PIXELFORMAT_BGR24", get_SDL_PIXELFORMAT_BGR24, null);
			L.RegVar("SDL_PIXELFORMAT_XRGB888", get_SDL_PIXELFORMAT_XRGB888, null);
			L.RegVar("SDL_PIXELFORMAT_RGB888", get_SDL_PIXELFORMAT_RGB888, null);
			L.RegVar("SDL_PIXELFORMAT_RGBX8888", get_SDL_PIXELFORMAT_RGBX8888, null);
			L.RegVar("SDL_PIXELFORMAT_XBGR888", get_SDL_PIXELFORMAT_XBGR888, null);
			L.RegVar("SDL_PIXELFORMAT_BGR888", get_SDL_PIXELFORMAT_BGR888, null);
			L.RegVar("SDL_PIXELFORMAT_BGRX8888", get_SDL_PIXELFORMAT_BGRX8888, null);
			L.RegVar("SDL_PIXELFORMAT_ARGB8888", get_SDL_PIXELFORMAT_ARGB8888, null);
			L.RegVar("SDL_PIXELFORMAT_RGBA8888", get_SDL_PIXELFORMAT_RGBA8888, null);
			L.RegVar("SDL_PIXELFORMAT_ABGR8888", get_SDL_PIXELFORMAT_ABGR8888, null);
			L.RegVar("SDL_PIXELFORMAT_BGRA8888", get_SDL_PIXELFORMAT_BGRA8888, null);
			L.RegVar("SDL_PIXELFORMAT_ARGB2101010", get_SDL_PIXELFORMAT_ARGB2101010, null);
			L.RegVar("SDL_PIXELFORMAT_YV12", get_SDL_PIXELFORMAT_YV12, null);
			L.RegVar("SDL_PIXELFORMAT_IYUV", get_SDL_PIXELFORMAT_IYUV, null);
			L.RegVar("SDL_PIXELFORMAT_YUY2", get_SDL_PIXELFORMAT_YUY2, null);
			L.RegVar("SDL_PIXELFORMAT_UYVY", get_SDL_PIXELFORMAT_UYVY, null);
			L.RegVar("SDL_PIXELFORMAT_YVYU", get_SDL_PIXELFORMAT_YVYU, null);
			L.RegVar("SDL_BUTTON_LMASK", get_SDL_BUTTON_LMASK, null);
			L.RegVar("SDL_BUTTON_MMASK", get_SDL_BUTTON_MMASK, null);
			L.RegVar("SDL_BUTTON_RMASK", get_SDL_BUTTON_RMASK, null);
			L.RegVar("SDL_BUTTON_X1MASK", get_SDL_BUTTON_X1MASK, null);
			L.RegVar("SDL_BUTTON_X2MASK", get_SDL_BUTTON_X2MASK, null);
			L.RegVar("AUDIO_U16SYS", get_AUDIO_U16SYS, null);
			L.RegVar("AUDIO_S16SYS", get_AUDIO_S16SYS, null);
			L.RegVar("AUDIO_S32SYS", get_AUDIO_S32SYS, null);
			L.RegVar("AUDIO_F32SYS", get_AUDIO_F32SYS, null);
			L.RegVar("RW_SEEK_SET", get_RW_SEEK_SET, null);
			L.RegVar("RW_SEEK_CUR", get_RW_SEEK_CUR, null);
			L.RegVar("RW_SEEK_END", get_RW_SEEK_END, null);
			L.RegVar("SDL_RWOPS_UNKNOWN", get_SDL_RWOPS_UNKNOWN, null);
			L.RegVar("SDL_RWOPS_WINFILE", get_SDL_RWOPS_WINFILE, null);
			L.RegVar("SDL_RWOPS_STDFILE", get_SDL_RWOPS_STDFILE, null);
			L.RegVar("SDL_RWOPS_JNIFILE", get_SDL_RWOPS_JNIFILE, null);
			L.RegVar("SDL_RWOPS_MEMORY", get_SDL_RWOPS_MEMORY, null);
			L.RegVar("SDL_RWOPS_MEMORY_RO", get_SDL_RWOPS_MEMORY_RO, null);
			L.RegVar("SDL_INIT_TIMER", get_SDL_INIT_TIMER, null);
			L.RegVar("SDL_INIT_AUDIO", get_SDL_INIT_AUDIO, null);
			L.RegVar("SDL_INIT_VIDEO", get_SDL_INIT_VIDEO, null);
			L.RegVar("SDL_INIT_JOYSTICK", get_SDL_INIT_JOYSTICK, null);
			L.RegVar("SDL_INIT_HAPTIC", get_SDL_INIT_HAPTIC, null);
			L.RegVar("SDL_INIT_GAMECONTROLLER", get_SDL_INIT_GAMECONTROLLER, null);
			L.RegVar("SDL_INIT_EVENTS", get_SDL_INIT_EVENTS, null);
			L.RegVar("SDL_INIT_SENSOR", get_SDL_INIT_SENSOR, null);
			L.RegVar("SDL_INIT_NOPARACHUTE", get_SDL_INIT_NOPARACHUTE, null);
			L.RegVar("SDL_INIT_EVERYTHING", get_SDL_INIT_EVERYTHING, null);
			L.RegVar("SDL_HINT_FRAMEBUFFER_ACCELERATION", get_SDL_HINT_FRAMEBUFFER_ACCELERATION, null);
			L.RegVar("SDL_HINT_RENDER_DRIVER", get_SDL_HINT_RENDER_DRIVER, null);
			L.RegVar("SDL_HINT_RENDER_OPENGL_SHADERS", get_SDL_HINT_RENDER_OPENGL_SHADERS, null);
			L.RegVar("SDL_HINT_RENDER_DIRECT3D_THREADSAFE", get_SDL_HINT_RENDER_DIRECT3D_THREADSAFE, null);
			L.RegVar("SDL_HINT_RENDER_VSYNC", get_SDL_HINT_RENDER_VSYNC, null);
			L.RegVar("SDL_HINT_VIDEO_X11_XVIDMODE", get_SDL_HINT_VIDEO_X11_XVIDMODE, null);
			L.RegVar("SDL_HINT_VIDEO_X11_XINERAMA", get_SDL_HINT_VIDEO_X11_XINERAMA, null);
			L.RegVar("SDL_HINT_VIDEO_X11_XRANDR", get_SDL_HINT_VIDEO_X11_XRANDR, null);
			L.RegVar("SDL_HINT_GRAB_KEYBOARD", get_SDL_HINT_GRAB_KEYBOARD, null);
			L.RegVar("SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS", get_SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS, null);
			L.RegVar("SDL_HINT_IDLE_TIMER_DISABLED", get_SDL_HINT_IDLE_TIMER_DISABLED, null);
			L.RegVar("SDL_HINT_ORIENTATIONS", get_SDL_HINT_ORIENTATIONS, null);
			L.RegVar("SDL_HINT_XINPUT_ENABLED", get_SDL_HINT_XINPUT_ENABLED, null);
			L.RegVar("SDL_HINT_GAMECONTROLLERCONFIG", get_SDL_HINT_GAMECONTROLLERCONFIG, null);
			L.RegVar("SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS", get_SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS, null);
			L.RegVar("SDL_HINT_ALLOW_TOPMOST", get_SDL_HINT_ALLOW_TOPMOST, null);
			L.RegVar("SDL_HINT_TIMER_RESOLUTION", get_SDL_HINT_TIMER_RESOLUTION, null);
			L.RegVar("SDL_HINT_RENDER_SCALE_QUALITY", get_SDL_HINT_RENDER_SCALE_QUALITY, null);
			L.RegVar("SDL_HINT_VIDEO_HIGHDPI_DISABLED", get_SDL_HINT_VIDEO_HIGHDPI_DISABLED, null);
			L.RegVar("SDL_HINT_CTRL_CLICK_EMULATE_RIGHT_CLICK", get_SDL_HINT_CTRL_CLICK_EMULATE_RIGHT_CLICK, null);
			L.RegVar("SDL_HINT_VIDEO_WIN_D3DCOMPILER", get_SDL_HINT_VIDEO_WIN_D3DCOMPILER, null);
			L.RegVar("SDL_HINT_MOUSE_RELATIVE_MODE_WARP", get_SDL_HINT_MOUSE_RELATIVE_MODE_WARP, null);
			L.RegVar("SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT", get_SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT, null);
			L.RegVar("SDL_HINT_VIDEO_ALLOW_SCREENSAVER", get_SDL_HINT_VIDEO_ALLOW_SCREENSAVER, null);
			L.RegVar("SDL_HINT_ACCELEROMETER_AS_JOYSTICK", get_SDL_HINT_ACCELEROMETER_AS_JOYSTICK, null);
			L.RegVar("SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES", get_SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES, null);
			L.RegVar("SDL_HINT_WINRT_PRIVACY_POLICY_URL", get_SDL_HINT_WINRT_PRIVACY_POLICY_URL, null);
			L.RegVar("SDL_HINT_WINRT_PRIVACY_POLICY_LABEL", get_SDL_HINT_WINRT_PRIVACY_POLICY_LABEL, null);
			L.RegVar("SDL_HINT_WINRT_HANDLE_BACK_BUTTON", get_SDL_HINT_WINRT_HANDLE_BACK_BUTTON, null);
			L.RegVar("SDL_HINT_NO_SIGNAL_HANDLERS", get_SDL_HINT_NO_SIGNAL_HANDLERS, null);
			L.RegVar("SDL_HINT_IME_INTERNAL_EDITING", get_SDL_HINT_IME_INTERNAL_EDITING, null);
			L.RegVar("SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH", get_SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH, null);
			L.RegVar("SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT", get_SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT, null);
			L.RegVar("SDL_HINT_THREAD_STACK_SIZE", get_SDL_HINT_THREAD_STACK_SIZE, null);
			L.RegVar("SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN", get_SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN, null);
			L.RegVar("SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP", get_SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP, null);
			L.RegVar("SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4", get_SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4, null);
			L.RegVar("SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING", get_SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING, null);
			L.RegVar("SDL_HINT_MAC_BACKGROUND_APP", get_SDL_HINT_MAC_BACKGROUND_APP, null);
			L.RegVar("SDL_HINT_VIDEO_X11_NET_WM_PING", get_SDL_HINT_VIDEO_X11_NET_WM_PING, null);
			L.RegVar("SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION", get_SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION, null);
			L.RegVar("SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION", get_SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION, null);
			L.RegVar("SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH", get_SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH, null);
			L.RegVar("SDL_HINT_BMP_SAVE_LEGACY_FORMAT", get_SDL_HINT_BMP_SAVE_LEGACY_FORMAT, null);
			L.RegVar("SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING", get_SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING, null);
			L.RegVar("SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION", get_SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION, null);
			L.RegVar("SDL_HINT_AUDIO_RESAMPLING_MODE", get_SDL_HINT_AUDIO_RESAMPLING_MODE, null);
			L.RegVar("SDL_HINT_RENDER_LOGICAL_SIZE_MODE", get_SDL_HINT_RENDER_LOGICAL_SIZE_MODE, null);
			L.RegVar("SDL_HINT_MOUSE_NORMAL_SPEED_SCALE", get_SDL_HINT_MOUSE_NORMAL_SPEED_SCALE, null);
			L.RegVar("SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE", get_SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE, null);
			L.RegVar("SDL_HINT_TOUCH_MOUSE_EVENTS", get_SDL_HINT_TOUCH_MOUSE_EVENTS, null);
			L.RegVar("SDL_HINT_WINDOWS_INTRESOURCE_ICON", get_SDL_HINT_WINDOWS_INTRESOURCE_ICON, null);
			L.RegVar("SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL", get_SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL, null);
			L.RegVar("SDL_HINT_IOS_HIDE_HOME_INDICATOR", get_SDL_HINT_IOS_HIDE_HOME_INDICATOR, null);
			L.RegVar("SDL_HINT_TV_REMOTE_AS_JOYSTICK", get_SDL_HINT_TV_REMOTE_AS_JOYSTICK, null);
			L.RegVar("SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR", get_SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR, null);
			L.RegVar("SDL_HINT_MOUSE_DOUBLE_CLICK_TIME", get_SDL_HINT_MOUSE_DOUBLE_CLICK_TIME, null);
			L.RegVar("SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS", get_SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS, null);
			L.RegVar("SDL_HINT_JOYSTICK_HIDAPI", get_SDL_HINT_JOYSTICK_HIDAPI, null);
			L.RegVar("SDL_HINT_JOYSTICK_HIDAPI_PS4", get_SDL_HINT_JOYSTICK_HIDAPI_PS4, null);
			L.RegVar("SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE", get_SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE, null);
			L.RegVar("SDL_HINT_JOYSTICK_HIDAPI_STEAM", get_SDL_HINT_JOYSTICK_HIDAPI_STEAM, null);
			L.RegVar("SDL_HINT_JOYSTICK_HIDAPI_SWITCH", get_SDL_HINT_JOYSTICK_HIDAPI_SWITCH, null);
			L.RegVar("SDL_HINT_JOYSTICK_HIDAPI_XBOX", get_SDL_HINT_JOYSTICK_HIDAPI_XBOX, null);
			L.RegVar("SDL_HINT_ENABLE_STEAM_CONTROLLERS", get_SDL_HINT_ENABLE_STEAM_CONTROLLERS, null);
			L.RegVar("SDL_HINT_ANDROID_TRAP_BACK_BUTTON", get_SDL_HINT_ANDROID_TRAP_BACK_BUTTON, null);
			L.RegVar("SDL_HINT_MOUSE_TOUCH_EVENTS", get_SDL_HINT_MOUSE_TOUCH_EVENTS, null);
			L.RegVar("SDL_HINT_GAMECONTROLLERCONFIG_FILE", get_SDL_HINT_GAMECONTROLLERCONFIG_FILE, null);
			L.RegVar("SDL_HINT_ANDROID_BLOCK_ON_PAUSE", get_SDL_HINT_ANDROID_BLOCK_ON_PAUSE, null);
			L.RegVar("SDL_HINT_RENDER_BATCHING", get_SDL_HINT_RENDER_BATCHING, null);
			L.RegVar("SDL_HINT_EVENT_LOGGING", get_SDL_HINT_EVENT_LOGGING, null);
			L.RegVar("SDL_HINT_WAVE_RIFF_CHUNK_SIZE", get_SDL_HINT_WAVE_RIFF_CHUNK_SIZE, null);
			L.RegVar("SDL_HINT_WAVE_TRUNCATION", get_SDL_HINT_WAVE_TRUNCATION, null);
			L.RegVar("SDL_HINT_WAVE_FACT_CHUNK", get_SDL_HINT_WAVE_FACT_CHUNK, null);
			L.RegVar("SDL_HINT_VIDO_X11_WINDOW_VISUALID", get_SDL_HINT_VIDO_X11_WINDOW_VISUALID, null);
			L.RegVar("SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS", get_SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS, null);
			L.RegVar("SDL_HINT_VIDEO_EXTERNAL_CONTEXT", get_SDL_HINT_VIDEO_EXTERNAL_CONTEXT, null);
			L.RegVar("SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE", get_SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE, null);
			L.RegVar("SDL_HINT_DISPLAY_USABLE_BOUNDS", get_SDL_HINT_DISPLAY_USABLE_BOUNDS, null);
			L.RegVar("SDL_HINT_VIDEO_X11_FORCE_EGL", get_SDL_HINT_VIDEO_X11_FORCE_EGL, null);
			L.RegVar("SDL_HINT_GAMECONTROLLERTYPE", get_SDL_HINT_GAMECONTROLLERTYPE, null);
			L.RegVar("SDL_HINT_JOYSTICK_HIDAPI_CORRELATE_XINPUT", get_SDL_HINT_JOYSTICK_HIDAPI_CORRELATE_XINPUT, null);
			L.RegVar("SDL_HINT_JOYSTICK_RAWINPUT", get_SDL_HINT_JOYSTICK_RAWINPUT, null);
			L.RegVar("SDL_HINT_AUDIO_DEVICE_APP_NAME", get_SDL_HINT_AUDIO_DEVICE_APP_NAME, null);
			L.RegVar("SDL_HINT_AUDIO_DEVICE_STREAM_NAME", get_SDL_HINT_AUDIO_DEVICE_STREAM_NAME, null);
			L.RegVar("SDL_HINT_PREFERRED_LOCALES", get_SDL_HINT_PREFERRED_LOCALES, null);
			L.RegVar("SDL_HINT_THREAD_PRIORITY_POLICY", get_SDL_HINT_THREAD_PRIORITY_POLICY, null);
			L.RegVar("SDL_HINT_EMSCRIPTEN_ASYNCIFY", get_SDL_HINT_EMSCRIPTEN_ASYNCIFY, null);
			L.RegVar("SDL_HINT_LINUX_JOYSTICK_DEADZONES", get_SDL_HINT_LINUX_JOYSTICK_DEADZONES, null);
			L.RegVar("SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO", get_SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO, null);
			L.RegVar("SDL_HINT_JOYSTICK_HIDAPI_PS5", get_SDL_HINT_JOYSTICK_HIDAPI_PS5, null);
			L.RegVar("SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL", get_SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL, null);
			L.RegVar("SDL_HINT_JOYSTICK_THREAD", get_SDL_HINT_JOYSTICK_THREAD, null);
			L.RegVar("SDL_HINT_AUTO_UPDATE_JOYSTICKS", get_SDL_HINT_AUTO_UPDATE_JOYSTICKS, null);
			L.RegVar("SDL_HINT_AUTO_UPDATE_SENSORS", get_SDL_HINT_AUTO_UPDATE_SENSORS, null);
			L.RegVar("SDL_HINT_MOUSE_RELATIVE_SCALING", get_SDL_HINT_MOUSE_RELATIVE_SCALING, null);
			L.RegVar("SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE", get_SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE, null);
			L.RegVar("SDL_MAJOR_VERSION", get_SDL_MAJOR_VERSION, null);
			L.RegVar("SDL_MINOR_VERSION", get_SDL_MINOR_VERSION, null);
			L.RegVar("SDL_PATCHLEVEL", get_SDL_PATCHLEVEL, null);
			L.RegVar("SDL_WINDOWPOS_UNDEFINED_MASK", get_SDL_WINDOWPOS_UNDEFINED_MASK, null);
			L.RegVar("SDL_WINDOWPOS_CENTERED_MASK", get_SDL_WINDOWPOS_CENTERED_MASK, null);
			L.RegVar("SDL_WINDOWPOS_UNDEFINED", get_SDL_WINDOWPOS_UNDEFINED, null);
			L.RegVar("SDL_WINDOWPOS_CENTERED", get_SDL_WINDOWPOS_CENTERED, null);
			L.RegVar("SDL_SWSURFACE", get_SDL_SWSURFACE, null);
			L.RegVar("SDL_PREALLOC", get_SDL_PREALLOC, null);
			L.RegVar("SDL_RLEACCEL", get_SDL_RLEACCEL, null);
			L.RegVar("SDL_DONTFREE", get_SDL_DONTFREE, null);
			L.RegVar("SDL_PRESSED", get_SDL_PRESSED, null);
			L.RegVar("SDL_RELEASED", get_SDL_RELEASED, null);
			L.RegVar("SDL_TEXTEDITINGEVENT_TEXT_SIZE", get_SDL_TEXTEDITINGEVENT_TEXT_SIZE, null);
			L.RegVar("SDL_TEXTINPUTEVENT_TEXT_SIZE", get_SDL_TEXTINPUTEVENT_TEXT_SIZE, null);
			L.RegVar("SDL_QUERY", get_SDL_QUERY, null);
			L.RegVar("SDL_IGNORE", get_SDL_IGNORE, null);
			L.RegVar("SDL_DISABLE", get_SDL_DISABLE, null);
			L.RegVar("SDL_ENABLE", get_SDL_ENABLE, null);
			L.RegVar("SDLK_SCANCODE_MASK", get_SDLK_SCANCODE_MASK, null);
			L.RegVar("SDL_BUTTON_LEFT", get_SDL_BUTTON_LEFT, null);
			L.RegVar("SDL_BUTTON_MIDDLE", get_SDL_BUTTON_MIDDLE, null);
			L.RegVar("SDL_BUTTON_RIGHT", get_SDL_BUTTON_RIGHT, null);
			L.RegVar("SDL_BUTTON_X1", get_SDL_BUTTON_X1, null);
			L.RegVar("SDL_BUTTON_X2", get_SDL_BUTTON_X2, null);
			L.RegVar("SDL_TOUCH_MOUSEID", get_SDL_TOUCH_MOUSEID, null);
			L.RegVar("SDL_HAT_CENTERED", get_SDL_HAT_CENTERED, null);
			L.RegVar("SDL_HAT_UP", get_SDL_HAT_UP, null);
			L.RegVar("SDL_HAT_RIGHT", get_SDL_HAT_RIGHT, null);
			L.RegVar("SDL_HAT_DOWN", get_SDL_HAT_DOWN, null);
			L.RegVar("SDL_HAT_LEFT", get_SDL_HAT_LEFT, null);
			L.RegVar("SDL_HAT_RIGHTUP", get_SDL_HAT_RIGHTUP, null);
			L.RegVar("SDL_HAT_RIGHTDOWN", get_SDL_HAT_RIGHTDOWN, null);
			L.RegVar("SDL_HAT_LEFTUP", get_SDL_HAT_LEFTUP, null);
			L.RegVar("SDL_HAT_LEFTDOWN", get_SDL_HAT_LEFTDOWN, null);
			L.RegVar("SDL_IPHONE_MAX_GFORCE", get_SDL_IPHONE_MAX_GFORCE, null);
			L.RegVar("SDL_HAPTIC_CONSTANT", get_SDL_HAPTIC_CONSTANT, null);
			L.RegVar("SDL_HAPTIC_SINE", get_SDL_HAPTIC_SINE, null);
			L.RegVar("SDL_HAPTIC_LEFTRIGHT", get_SDL_HAPTIC_LEFTRIGHT, null);
			L.RegVar("SDL_HAPTIC_TRIANGLE", get_SDL_HAPTIC_TRIANGLE, null);
			L.RegVar("SDL_HAPTIC_SAWTOOTHUP", get_SDL_HAPTIC_SAWTOOTHUP, null);
			L.RegVar("SDL_HAPTIC_SAWTOOTHDOWN", get_SDL_HAPTIC_SAWTOOTHDOWN, null);
			L.RegVar("SDL_HAPTIC_SPRING", get_SDL_HAPTIC_SPRING, null);
			L.RegVar("SDL_HAPTIC_DAMPER", get_SDL_HAPTIC_DAMPER, null);
			L.RegVar("SDL_HAPTIC_INERTIA", get_SDL_HAPTIC_INERTIA, null);
			L.RegVar("SDL_HAPTIC_FRICTION", get_SDL_HAPTIC_FRICTION, null);
			L.RegVar("SDL_HAPTIC_CUSTOM", get_SDL_HAPTIC_CUSTOM, null);
			L.RegVar("SDL_HAPTIC_GAIN", get_SDL_HAPTIC_GAIN, null);
			L.RegVar("SDL_HAPTIC_AUTOCENTER", get_SDL_HAPTIC_AUTOCENTER, null);
			L.RegVar("SDL_HAPTIC_STATUS", get_SDL_HAPTIC_STATUS, null);
			L.RegVar("SDL_HAPTIC_PAUSE", get_SDL_HAPTIC_PAUSE, null);
			L.RegVar("SDL_HAPTIC_POLAR", get_SDL_HAPTIC_POLAR, null);
			L.RegVar("SDL_HAPTIC_CARTESIAN", get_SDL_HAPTIC_CARTESIAN, null);
			L.RegVar("SDL_HAPTIC_SPHERICAL", get_SDL_HAPTIC_SPHERICAL, null);
			L.RegVar("SDL_HAPTIC_STEERING_AXIS", get_SDL_HAPTIC_STEERING_AXIS, null);
			L.RegVar("SDL_HAPTIC_INFINITY", get_SDL_HAPTIC_INFINITY, null);
			L.RegVar("SDL_STANDARD_GRAVITY", get_SDL_STANDARD_GRAVITY, null);
			L.RegVar("SDL_AUDIO_MASK_BITSIZE", get_SDL_AUDIO_MASK_BITSIZE, null);
			L.RegVar("SDL_AUDIO_MASK_DATATYPE", get_SDL_AUDIO_MASK_DATATYPE, null);
			L.RegVar("SDL_AUDIO_MASK_ENDIAN", get_SDL_AUDIO_MASK_ENDIAN, null);
			L.RegVar("SDL_AUDIO_MASK_SIGNED", get_SDL_AUDIO_MASK_SIGNED, null);
			L.RegVar("AUDIO_U8", get_AUDIO_U8, null);
			L.RegVar("AUDIO_S8", get_AUDIO_S8, null);
			L.RegVar("AUDIO_U16LSB", get_AUDIO_U16LSB, null);
			L.RegVar("AUDIO_S16LSB", get_AUDIO_S16LSB, null);
			L.RegVar("AUDIO_U16MSB", get_AUDIO_U16MSB, null);
			L.RegVar("AUDIO_S16MSB", get_AUDIO_S16MSB, null);
			L.RegVar("AUDIO_U16", get_AUDIO_U16, null);
			L.RegVar("AUDIO_S16", get_AUDIO_S16, null);
			L.RegVar("AUDIO_S32LSB", get_AUDIO_S32LSB, null);
			L.RegVar("AUDIO_S32MSB", get_AUDIO_S32MSB, null);
			L.RegVar("AUDIO_S32", get_AUDIO_S32, null);
			L.RegVar("AUDIO_F32LSB", get_AUDIO_F32LSB, null);
			L.RegVar("AUDIO_F32MSB", get_AUDIO_F32MSB, null);
			L.RegVar("AUDIO_F32", get_AUDIO_F32, null);
			L.RegVar("SDL_AUDIO_ALLOW_FREQUENCY_CHANGE", get_SDL_AUDIO_ALLOW_FREQUENCY_CHANGE, null);
			L.RegVar("SDL_AUDIO_ALLOW_FORMAT_CHANGE", get_SDL_AUDIO_ALLOW_FORMAT_CHANGE, null);
			L.RegVar("SDL_AUDIO_ALLOW_CHANNELS_CHANGE", get_SDL_AUDIO_ALLOW_CHANNELS_CHANGE, null);
			L.RegVar("SDL_AUDIO_ALLOW_SAMPLES_CHANGE", get_SDL_AUDIO_ALLOW_SAMPLES_CHANGE, null);
			L.RegVar("SDL_AUDIO_ALLOW_ANY_CHANGE", get_SDL_AUDIO_ALLOW_ANY_CHANGE, null);
			L.RegVar("SDL_MIX_MAXVOLUME", get_SDL_MIX_MAXVOLUME, null);
			L.RegVar("SDL_ANDROID_EXTERNAL_STORAGE_READ", get_SDL_ANDROID_EXTERNAL_STORAGE_READ, null);
			L.RegVar("SDL_ANDROID_EXTERNAL_STORAGE_WRITE", get_SDL_ANDROID_EXTERNAL_STORAGE_WRITE, null);
			L.RegFunction("SDL_SIMDFree", SDL_SIMDFree);
			L.RegFunction("SDL_HasARMSIMD", SDL_HasARMSIMD);
			L.RegFunction("SDL_GetPreferredLocales", SDL_GetPreferredLocales);
			L.RegFunction("SDL_OpenURL", SDL_OpenURL);
			L.RegFunction("SDL_GetAndroidSDKVersion", SDL_GetAndroidSDKVersion);
			L.RegFunction("SDL_AndroidRequestPermission", SDL_AndroidRequestPermission);
			L.RegFunction("SDL_WinRTGetDeviceFamily", SDL_WinRTGetDeviceFamily);
			L.RegFunction("SDL_IsTablet", SDL_IsTablet);
			L.RegFunction("SDL_GetBasePath", SDL_GetBasePath);
			L.RegFunction("SDL_GetPrefPath", SDL_GetPrefPath);
			L.RegFunction("SDL_GetCPUCount", SDL_GetCPUCount);
			L.RegFunction("SDL_GetCPUCacheLineSize", SDL_GetCPUCacheLineSize);
			L.RegFunction("SDL_HasRDTSC", SDL_HasRDTSC);
			L.RegFunction("SDL_HasAltiVec", SDL_HasAltiVec);
			L.RegFunction("SDL_HasMMX", SDL_HasMMX);
			L.RegFunction("SDL_Has3DNow", SDL_Has3DNow);
			L.RegFunction("SDL_HasSSE", SDL_HasSSE);
			L.RegFunction("SDL_HasSSE2", SDL_HasSSE2);
			L.RegFunction("SDL_HasSSE3", SDL_HasSSE3);
			L.RegFunction("SDL_HasSSE41", SDL_HasSSE41);
			L.RegFunction("SDL_HasSSE42", SDL_HasSSE42);
			L.RegFunction("SDL_HasAVX", SDL_HasAVX);
			L.RegFunction("SDL_HasAVX2", SDL_HasAVX2);
			L.RegFunction("SDL_HasAVX512F", SDL_HasAVX512F);
			L.RegFunction("SDL_HasNEON", SDL_HasNEON);
			L.RegFunction("SDL_GetSystemRAM", SDL_GetSystemRAM);
			L.RegFunction("SDL_SIMDGetAlignment", SDL_SIMDGetAlignment);
			L.RegFunction("SDL_SIMDAlloc", SDL_SIMDAlloc);
			L.RegFunction("SDL_SIMDRealloc", SDL_SIMDRealloc);
			L.RegFunction("SDL_DequeueAudio", SDL_DequeueAudio);
			L.RegFunction("SDL_GetQueuedAudioSize", SDL_GetQueuedAudioSize);
			L.RegFunction("SDL_ClearQueuedAudio", SDL_ClearQueuedAudio);
			L.RegFunction("SDL_NewAudioStream", SDL_NewAudioStream);
			L.RegFunction("SDL_AudioStreamPut", SDL_AudioStreamPut);
			L.RegFunction("SDL_AudioStreamGet", SDL_AudioStreamGet);
			L.RegFunction("SDL_AudioStreamAvailable", SDL_AudioStreamAvailable);
			L.RegFunction("SDL_AudioStreamClear", SDL_AudioStreamClear);
			L.RegFunction("SDL_FreeAudioStream", SDL_FreeAudioStream);
			L.RegFunction("SDL_TICKS_PASSED", SDL_TICKS_PASSED);
			L.RegFunction("SDL_Delay", SDL_Delay);
			L.RegFunction("SDL_GetTicks", SDL_GetTicks);
			L.RegFunction("SDL_GetPerformanceCounter", SDL_GetPerformanceCounter);
			L.RegFunction("SDL_GetPerformanceFrequency", SDL_GetPerformanceFrequency);
			L.RegFunction("SDL_AddTimer", SDL_AddTimer);
			L.RegFunction("SDL_RemoveTimer", SDL_RemoveTimer);
			L.RegFunction("SDL_SetWindowsMessageHook", SDL_SetWindowsMessageHook);
			L.RegFunction("SDL_iPhoneSetAnimationCallback", SDL_iPhoneSetAnimationCallback);
			L.RegFunction("SDL_iPhoneSetEventPump", SDL_iPhoneSetEventPump);
			L.RegFunction("SDL_AndroidGetJNIEnv", SDL_AndroidGetJNIEnv);
			L.RegFunction("SDL_AndroidGetActivity", SDL_AndroidGetActivity);
			L.RegFunction("SDL_IsAndroidTV", SDL_IsAndroidTV);
			L.RegFunction("SDL_IsChromebook", SDL_IsChromebook);
			L.RegFunction("SDL_IsDeXMode", SDL_IsDeXMode);
			L.RegFunction("SDL_AndroidBackButton", SDL_AndroidBackButton);
			L.RegFunction("SDL_AndroidGetInternalStoragePath", SDL_AndroidGetInternalStoragePath);
			L.RegFunction("SDL_AndroidGetExternalStorageState", SDL_AndroidGetExternalStorageState);
			L.RegFunction("SDL_AndroidGetExternalStoragePath", SDL_AndroidGetExternalStoragePath);
			L.RegFunction("SDL_AUDIO_ISLITTLEENDIAN", SDL_AUDIO_ISLITTLEENDIAN);
			L.RegFunction("SDL_AUDIO_ISUNSIGNED", SDL_AUDIO_ISUNSIGNED);
			L.RegFunction("SDL_AudioInit", SDL_AudioInit);
			L.RegFunction("SDL_AudioQuit", SDL_AudioQuit);
			L.RegFunction("SDL_CloseAudio", SDL_CloseAudio);
			L.RegFunction("SDL_CloseAudioDevice", SDL_CloseAudioDevice);
			L.RegFunction("SDL_FreeWAV", SDL_FreeWAV);
			L.RegFunction("SDL_GetAudioDeviceName", SDL_GetAudioDeviceName);
			L.RegFunction("SDL_GetAudioDeviceStatus", SDL_GetAudioDeviceStatus);
			L.RegFunction("SDL_GetAudioDriver", SDL_GetAudioDriver);
			L.RegFunction("SDL_GetAudioStatus", SDL_GetAudioStatus);
			L.RegFunction("SDL_GetCurrentAudioDriver", SDL_GetCurrentAudioDriver);
			L.RegFunction("SDL_GetNumAudioDevices", SDL_GetNumAudioDevices);
			L.RegFunction("SDL_GetNumAudioDrivers", SDL_GetNumAudioDrivers);
			L.RegFunction("SDL_LockAudio", SDL_LockAudio);
			L.RegFunction("SDL_LockAudioDevice", SDL_LockAudioDevice);
			L.RegFunction("SDL_PauseAudio", SDL_PauseAudio);
			L.RegFunction("SDL_PauseAudioDevice", SDL_PauseAudioDevice);
			L.RegFunction("SDL_UnlockAudio", SDL_UnlockAudio);
			L.RegFunction("SDL_UnlockAudioDevice", SDL_UnlockAudioDevice);
			L.RegFunction("SDL_QueueAudio", SDL_QueueAudio);
			L.RegFunction("SDL_HapticRunEffect", SDL_HapticRunEffect);
			L.RegFunction("SDL_HapticSetAutocenter", SDL_HapticSetAutocenter);
			L.RegFunction("SDL_HapticSetGain", SDL_HapticSetGain);
			L.RegFunction("SDL_HapticStopAll", SDL_HapticStopAll);
			L.RegFunction("SDL_HapticStopEffect", SDL_HapticStopEffect);
			L.RegFunction("SDL_HapticUnpause", SDL_HapticUnpause);
			L.RegFunction("SDL_JoystickIsHaptic", SDL_JoystickIsHaptic);
			L.RegFunction("SDL_MouseIsHaptic", SDL_MouseIsHaptic);
			L.RegFunction("SDL_NumHaptics", SDL_NumHaptics);
			L.RegFunction("SDL_NumSensors", SDL_NumSensors);
			L.RegFunction("SDL_SensorGetDeviceName", SDL_SensorGetDeviceName);
			L.RegFunction("SDL_SensorGetDeviceType", SDL_SensorGetDeviceType);
			L.RegFunction("SDL_SensorGetDeviceNonPortableType", SDL_SensorGetDeviceNonPortableType);
			L.RegFunction("SDL_SensorGetDeviceInstanceID", SDL_SensorGetDeviceInstanceID);
			L.RegFunction("SDL_SensorOpen", SDL_SensorOpen);
			L.RegFunction("SDL_SensorFromInstanceID", SDL_SensorFromInstanceID);
			L.RegFunction("SDL_SensorGetName", SDL_SensorGetName);
			L.RegFunction("SDL_SensorGetType", SDL_SensorGetType);
			L.RegFunction("SDL_SensorGetNonPortableType", SDL_SensorGetNonPortableType);
			L.RegFunction("SDL_SensorGetInstanceID", SDL_SensorGetInstanceID);
			L.RegFunction("SDL_SensorGetData", SDL_SensorGetData);
			L.RegFunction("SDL_SensorClose", SDL_SensorClose);
			L.RegFunction("SDL_SensorUpdate", SDL_SensorUpdate);
			L.RegFunction("SDL_LockSensors", SDL_LockSensors);
			L.RegFunction("SDL_UnlockSensors", SDL_UnlockSensors);
			L.RegFunction("SDL_AUDIO_BITSIZE", SDL_AUDIO_BITSIZE);
			L.RegFunction("SDL_AUDIO_ISFLOAT", SDL_AUDIO_ISFLOAT);
			L.RegFunction("SDL_AUDIO_ISBIGENDIAN", SDL_AUDIO_ISBIGENDIAN);
			L.RegFunction("SDL_AUDIO_ISSIGNED", SDL_AUDIO_ISSIGNED);
			L.RegFunction("SDL_AUDIO_ISINT", SDL_AUDIO_ISINT);
			L.RegFunction("SDL_GameControllerHasButton", SDL_GameControllerHasButton);
			L.RegFunction("SDL_GameControllerGetNumTouchpads", SDL_GameControllerGetNumTouchpads);
			L.RegFunction("SDL_GameControllerGetNumTouchpadFingers", SDL_GameControllerGetNumTouchpadFingers);
			L.RegFunction("SDL_GameControllerHasSensor", SDL_GameControllerHasSensor);
			L.RegFunction("SDL_GameControllerSetSensorEnabled", SDL_GameControllerSetSensorEnabled);
			L.RegFunction("SDL_GameControllerIsSensorEnabled", SDL_GameControllerIsSensorEnabled);
			L.RegFunction("SDL_GameControllerGetSensorData", SDL_GameControllerGetSensorData);
			L.RegFunction("SDL_HapticClose", SDL_HapticClose);
			L.RegFunction("SDL_HapticDestroyEffect", SDL_HapticDestroyEffect);
			L.RegFunction("SDL_HapticGetEffectStatus", SDL_HapticGetEffectStatus);
			L.RegFunction("SDL_HapticIndex", SDL_HapticIndex);
			L.RegFunction("SDL_HapticName", SDL_HapticName);
			L.RegFunction("SDL_HapticNumAxes", SDL_HapticNumAxes);
			L.RegFunction("SDL_HapticNumEffects", SDL_HapticNumEffects);
			L.RegFunction("SDL_HapticNumEffectsPlaying", SDL_HapticNumEffectsPlaying);
			L.RegFunction("SDL_HapticOpen", SDL_HapticOpen);
			L.RegFunction("SDL_HapticOpened", SDL_HapticOpened);
			L.RegFunction("SDL_HapticOpenFromJoystick", SDL_HapticOpenFromJoystick);
			L.RegFunction("SDL_HapticOpenFromMouse", SDL_HapticOpenFromMouse);
			L.RegFunction("SDL_HapticPause", SDL_HapticPause);
			L.RegFunction("SDL_HapticQuery", SDL_HapticQuery);
			L.RegFunction("SDL_HapticRumbleInit", SDL_HapticRumbleInit);
			L.RegFunction("SDL_HapticRumblePlay", SDL_HapticRumblePlay);
			L.RegFunction("SDL_HapticRumbleStop", SDL_HapticRumbleStop);
			L.RegFunction("SDL_HapticRumbleSupported", SDL_HapticRumbleSupported);
			L.RegFunction("SDL_GameControllerGetProduct", SDL_GameControllerGetProduct);
			L.RegFunction("SDL_GameControllerGetProductVersion", SDL_GameControllerGetProductVersion);
			L.RegFunction("SDL_GameControllerGetSerial", SDL_GameControllerGetSerial);
			L.RegFunction("SDL_GameControllerGetAttached", SDL_GameControllerGetAttached);
			L.RegFunction("SDL_GameControllerGetJoystick", SDL_GameControllerGetJoystick);
			L.RegFunction("SDL_GameControllerEventState", SDL_GameControllerEventState);
			L.RegFunction("SDL_GameControllerUpdate", SDL_GameControllerUpdate);
			L.RegFunction("SDL_GameControllerGetAxisFromString", SDL_GameControllerGetAxisFromString);
			L.RegFunction("SDL_GameControllerGetStringForAxis", SDL_GameControllerGetStringForAxis);
			L.RegFunction("SDL_GameControllerGetBindForAxis", SDL_GameControllerGetBindForAxis);
			L.RegFunction("SDL_GameControllerGetAxis", SDL_GameControllerGetAxis);
			L.RegFunction("SDL_GameControllerGetButtonFromString", SDL_GameControllerGetButtonFromString);
			L.RegFunction("SDL_GameControllerGetStringForButton", SDL_GameControllerGetStringForButton);
			L.RegFunction("SDL_GameControllerGetBindForButton", SDL_GameControllerGetBindForButton);
			L.RegFunction("SDL_GameControllerGetButton", SDL_GameControllerGetButton);
			L.RegFunction("SDL_GameControllerRumble", SDL_GameControllerRumble);
			L.RegFunction("SDL_GameControllerRumbleTriggers", SDL_GameControllerRumbleTriggers);
			L.RegFunction("SDL_GameControllerClose", SDL_GameControllerClose);
			L.RegFunction("SDL_GameControllerFromInstanceID", SDL_GameControllerFromInstanceID);
			L.RegFunction("SDL_GameControllerTypeForIndex", SDL_GameControllerTypeForIndex);
			L.RegFunction("SDL_GameControllerGetType", SDL_GameControllerGetType);
			L.RegFunction("SDL_GameControllerFromPlayerIndex", SDL_GameControllerFromPlayerIndex);
			L.RegFunction("SDL_GameControllerSetPlayerIndex", SDL_GameControllerSetPlayerIndex);
			L.RegFunction("SDL_GameControllerHasLED", SDL_GameControllerHasLED);
			L.RegFunction("SDL_GameControllerSetLED", SDL_GameControllerSetLED);
			L.RegFunction("SDL_GameControllerHasAxis", SDL_GameControllerHasAxis);
			L.RegFunction("SDL_JoystickFromInstanceID", SDL_JoystickFromInstanceID);
			L.RegFunction("SDL_LockJoysticks", SDL_LockJoysticks);
			L.RegFunction("SDL_UnlockJoysticks", SDL_UnlockJoysticks);
			L.RegFunction("SDL_JoystickFromPlayerIndex", SDL_JoystickFromPlayerIndex);
			L.RegFunction("SDL_JoystickSetPlayerIndex", SDL_JoystickSetPlayerIndex);
			L.RegFunction("SDL_JoystickAttachVirtual", SDL_JoystickAttachVirtual);
			L.RegFunction("SDL_JoystickDetachVirtual", SDL_JoystickDetachVirtual);
			L.RegFunction("SDL_JoystickIsVirtual", SDL_JoystickIsVirtual);
			L.RegFunction("SDL_JoystickSetVirtualAxis", SDL_JoystickSetVirtualAxis);
			L.RegFunction("SDL_JoystickSetVirtualButton", SDL_JoystickSetVirtualButton);
			L.RegFunction("SDL_JoystickSetVirtualHat", SDL_JoystickSetVirtualHat);
			L.RegFunction("SDL_JoystickHasLED", SDL_JoystickHasLED);
			L.RegFunction("SDL_JoystickSetLED", SDL_JoystickSetLED);
			L.RegFunction("SDL_GameControllerAddMapping", SDL_GameControllerAddMapping);
			L.RegFunction("SDL_GameControllerNumMappings", SDL_GameControllerNumMappings);
			L.RegFunction("SDL_GameControllerMappingForIndex", SDL_GameControllerMappingForIndex);
			L.RegFunction("SDL_GameControllerAddMappingsFromFile", SDL_GameControllerAddMappingsFromFile);
			L.RegFunction("SDL_GameControllerMappingForGUID", SDL_GameControllerMappingForGUID);
			L.RegFunction("SDL_GameControllerMapping", SDL_GameControllerMapping);
			L.RegFunction("SDL_IsGameController", SDL_IsGameController);
			L.RegFunction("SDL_GameControllerNameForIndex", SDL_GameControllerNameForIndex);
			L.RegFunction("SDL_GameControllerMappingForDeviceIndex", SDL_GameControllerMappingForDeviceIndex);
			L.RegFunction("SDL_GameControllerOpen", SDL_GameControllerOpen);
			L.RegFunction("SDL_GameControllerName", SDL_GameControllerName);
			L.RegFunction("SDL_GameControllerGetVendor", SDL_GameControllerGetVendor);
			L.RegFunction("SDL_JoystickGetHat", SDL_JoystickGetHat);
			L.RegFunction("SDL_JoystickName", SDL_JoystickName);
			L.RegFunction("SDL_JoystickNameForIndex", SDL_JoystickNameForIndex);
			L.RegFunction("SDL_JoystickNumAxes", SDL_JoystickNumAxes);
			L.RegFunction("SDL_JoystickNumBalls", SDL_JoystickNumBalls);
			L.RegFunction("SDL_JoystickNumButtons", SDL_JoystickNumButtons);
			L.RegFunction("SDL_JoystickNumHats", SDL_JoystickNumHats);
			L.RegFunction("SDL_JoystickOpen", SDL_JoystickOpen);
			L.RegFunction("SDL_JoystickUpdate", SDL_JoystickUpdate);
			L.RegFunction("SDL_NumJoysticks", SDL_NumJoysticks);
			L.RegFunction("SDL_JoystickGetDeviceGUID", SDL_JoystickGetDeviceGUID);
			L.RegFunction("SDL_JoystickGetGUID", SDL_JoystickGetGUID);
			L.RegFunction("SDL_JoystickGetGUIDString", SDL_JoystickGetGUIDString);
			L.RegFunction("SDL_JoystickGetGUIDFromString", SDL_JoystickGetGUIDFromString);
			L.RegFunction("SDL_JoystickGetDeviceVendor", SDL_JoystickGetDeviceVendor);
			L.RegFunction("SDL_JoystickGetDeviceProduct", SDL_JoystickGetDeviceProduct);
			L.RegFunction("SDL_JoystickGetDeviceProductVersion", SDL_JoystickGetDeviceProductVersion);
			L.RegFunction("SDL_JoystickGetDeviceType", SDL_JoystickGetDeviceType);
			L.RegFunction("SDL_JoystickGetDeviceInstanceID", SDL_JoystickGetDeviceInstanceID);
			L.RegFunction("SDL_JoystickGetVendor", SDL_JoystickGetVendor);
			L.RegFunction("SDL_JoystickGetProduct", SDL_JoystickGetProduct);
			L.RegFunction("SDL_JoystickGetProductVersion", SDL_JoystickGetProductVersion);
			L.RegFunction("SDL_JoystickGetSerial", SDL_JoystickGetSerial);
			L.RegFunction("SDL_JoystickGetType", SDL_JoystickGetType);
			L.RegFunction("SDL_JoystickGetAttached", SDL_JoystickGetAttached);
			L.RegFunction("SDL_JoystickInstanceID", SDL_JoystickInstanceID);
			L.RegFunction("SDL_JoystickCurrentPowerLevel", SDL_JoystickCurrentPowerLevel);
			L.RegFunction("SDL_GetGlobalMouseState", SDL_GetGlobalMouseState);
			L.RegFunction("SDL_WarpMouseInWindow", SDL_WarpMouseInWindow);
			L.RegFunction("SDL_WarpMouseGlobal", SDL_WarpMouseGlobal);
			L.RegFunction("SDL_SetRelativeMouseMode", SDL_SetRelativeMouseMode);
			L.RegFunction("SDL_CaptureMouse", SDL_CaptureMouse);
			L.RegFunction("SDL_GetRelativeMouseMode", SDL_GetRelativeMouseMode);
			L.RegFunction("SDL_CreateCursor", SDL_CreateCursor);
			L.RegFunction("SDL_CreateColorCursor", SDL_CreateColorCursor);
			L.RegFunction("SDL_CreateSystemCursor", SDL_CreateSystemCursor);
			L.RegFunction("SDL_SetCursor", SDL_SetCursor);
			L.RegFunction("SDL_GetCursor", SDL_GetCursor);
			L.RegFunction("SDL_FreeCursor", SDL_FreeCursor);
			L.RegFunction("SDL_ShowCursor", SDL_ShowCursor);
			L.RegFunction("SDL_BUTTON", SDL_BUTTON);
			L.RegFunction("SDL_GetNumTouchDevices", SDL_GetNumTouchDevices);
			L.RegFunction("SDL_GetTouchDevice", SDL_GetTouchDevice);
			L.RegFunction("SDL_GetNumTouchFingers", SDL_GetNumTouchFingers);
			L.RegFunction("SDL_GetTouchFinger", SDL_GetTouchFinger);
			L.RegFunction("SDL_GetTouchDeviceType", SDL_GetTouchDeviceType);
			L.RegFunction("SDL_JoystickRumble", SDL_JoystickRumble);
			L.RegFunction("SDL_JoystickRumbleTriggers", SDL_JoystickRumbleTriggers);
			L.RegFunction("SDL_JoystickClose", SDL_JoystickClose);
			L.RegFunction("SDL_JoystickEventState", SDL_JoystickEventState);
			L.RegFunction("SDL_JoystickGetAxis", SDL_JoystickGetAxis);
			L.RegFunction("SDL_JoystickGetButton", SDL_JoystickGetButton);
			L.RegFunction("SDL_FilterEvents", SDL_FilterEvents);
			L.RegFunction("SDL_EventState", SDL_EventState);
			L.RegFunction("SDL_GetEventState", SDL_GetEventState);
			L.RegFunction("SDL_RegisterEvents", SDL_RegisterEvents);
			L.RegFunction("SDL_SCANCODE_TO_KEYCODE", SDL_SCANCODE_TO_KEYCODE);
			L.RegFunction("SDL_GetKeyboardFocus", SDL_GetKeyboardFocus);
			L.RegFunction("SDL_GetModState", SDL_GetModState);
			L.RegFunction("SDL_SetModState", SDL_SetModState);
			L.RegFunction("SDL_GetKeyFromScancode", SDL_GetKeyFromScancode);
			L.RegFunction("SDL_GetScancodeFromKey", SDL_GetScancodeFromKey);
			L.RegFunction("SDL_GetScancodeName", SDL_GetScancodeName);
			L.RegFunction("SDL_GetScancodeFromName", SDL_GetScancodeFromName);
			L.RegFunction("SDL_GetKeyName", SDL_GetKeyName);
			L.RegFunction("SDL_GetKeyFromName", SDL_GetKeyFromName);
			L.RegFunction("SDL_StartTextInput", SDL_StartTextInput);
			L.RegFunction("SDL_IsTextInputActive", SDL_IsTextInputActive);
			L.RegFunction("SDL_StopTextInput", SDL_StopTextInput);
			L.RegFunction("SDL_HasScreenKeyboardSupport", SDL_HasScreenKeyboardSupport);
			L.RegFunction("SDL_IsScreenKeyboardShown", SDL_IsScreenKeyboardShown);
			L.RegFunction("SDL_GetMouseFocus", SDL_GetMouseFocus);
			L.RegFunction("SDL_GetMouseState", SDL_GetMouseState);
			L.RegFunction("SDL_SetSurfaceBlendMode", SDL_SetSurfaceBlendMode);
			L.RegFunction("SDL_SetSurfaceColorMod", SDL_SetSurfaceColorMod);
			L.RegFunction("SDL_SetSurfacePalette", SDL_SetSurfacePalette);
			L.RegFunction("SDL_SetSurfaceRLE", SDL_SetSurfaceRLE);
			L.RegFunction("SDL_HasSurfaceRLE", SDL_HasSurfaceRLE);
			L.RegFunction("SDL_UnlockSurface", SDL_UnlockSurface);
			L.RegFunction("SDL_DuplicateSurface", SDL_DuplicateSurface);
			L.RegFunction("SDL_HasClipboardText", SDL_HasClipboardText);
			L.RegFunction("SDL_GetClipboardText", SDL_GetClipboardText);
			L.RegFunction("SDL_SetClipboardText", SDL_SetClipboardText);
			L.RegFunction("SDL_PumpEvents", SDL_PumpEvents);
			L.RegFunction("SDL_HasEvent", SDL_HasEvent);
			L.RegFunction("SDL_HasEvents", SDL_HasEvents);
			L.RegFunction("SDL_FlushEvent", SDL_FlushEvent);
			L.RegFunction("SDL_FlushEvents", SDL_FlushEvents);
			L.RegFunction("SDL_SetEventFilter", SDL_SetEventFilter);
			L.RegFunction("SDL_AddEventWatch", SDL_AddEventWatch);
			L.RegFunction("SDL_DelEventWatch", SDL_DelEventWatch);
			L.RegFunction("SDL_BlitScaled", SDL_BlitScaled);
			L.RegFunction("SDL_ConvertPixels", SDL_ConvertPixels);
			L.RegFunction("SDL_ConvertSurface", SDL_ConvertSurface);
			L.RegFunction("SDL_ConvertSurfaceFormat", SDL_ConvertSurfaceFormat);
			L.RegFunction("SDL_CreateRGBSurface", SDL_CreateRGBSurface);
			L.RegFunction("SDL_CreateRGBSurfaceFrom", SDL_CreateRGBSurfaceFrom);
			L.RegFunction("SDL_CreateRGBSurfaceWithFormat", SDL_CreateRGBSurfaceWithFormat);
			L.RegFunction("SDL_CreateRGBSurfaceWithFormatFrom", SDL_CreateRGBSurfaceWithFormatFrom);
			L.RegFunction("SDL_FillRect", SDL_FillRect);
			L.RegFunction("SDL_FillRects", SDL_FillRects);
			L.RegFunction("SDL_FreeSurface", SDL_FreeSurface);
			L.RegFunction("SDL_HasColorKey", SDL_HasColorKey);
			L.RegFunction("SDL_LoadBMP", SDL_LoadBMP);
			L.RegFunction("SDL_LockSurface", SDL_LockSurface);
			L.RegFunction("SDL_SaveBMP", SDL_SaveBMP);
			L.RegFunction("SDL_SetColorKey", SDL_SetColorKey);
			L.RegFunction("SDL_SetSurfaceAlphaMod", SDL_SetSurfaceAlphaMod);
			L.RegFunction("SDL_ISPIXELFORMAT_ARRAY", SDL_ISPIXELFORMAT_ARRAY);
			L.RegFunction("SDL_ISPIXELFORMAT_ALPHA", SDL_ISPIXELFORMAT_ALPHA);
			L.RegFunction("SDL_ISPIXELFORMAT_FOURCC", SDL_ISPIXELFORMAT_FOURCC);
			L.RegFunction("SDL_AllocFormat", SDL_AllocFormat);
			L.RegFunction("SDL_AllocPalette", SDL_AllocPalette);
			L.RegFunction("SDL_FreeFormat", SDL_FreeFormat);
			L.RegFunction("SDL_FreePalette", SDL_FreePalette);
			L.RegFunction("SDL_GetPixelFormatName", SDL_GetPixelFormatName);
			L.RegFunction("SDL_MapRGB", SDL_MapRGB);
			L.RegFunction("SDL_MapRGBA", SDL_MapRGBA);
			L.RegFunction("SDL_MasksToPixelFormatEnum", SDL_MasksToPixelFormatEnum);
			L.RegFunction("SDL_SetPaletteColors", SDL_SetPaletteColors);
			L.RegFunction("SDL_SetPixelFormatPalette", SDL_SetPixelFormatPalette);
			L.RegFunction("SDL_MUSTLOCK", SDL_MUSTLOCK);
			L.RegFunction("SDL_BlitSurface", SDL_BlitSurface);
			L.RegFunction("SDL_RenderPresent", SDL_RenderPresent);
			L.RegFunction("SDL_RenderSetClipRect", SDL_RenderSetClipRect);
			L.RegFunction("SDL_RenderSetLogicalSize", SDL_RenderSetLogicalSize);
			L.RegFunction("SDL_RenderSetScale", SDL_RenderSetScale);
			L.RegFunction("SDL_RenderSetIntegerScale", SDL_RenderSetIntegerScale);
			L.RegFunction("SDL_SetRenderDrawBlendMode", SDL_SetRenderDrawBlendMode);
			L.RegFunction("SDL_SetRenderDrawColor", SDL_SetRenderDrawColor);
			L.RegFunction("SDL_SetRenderTarget", SDL_SetRenderTarget);
			L.RegFunction("SDL_SetTextureAlphaMod", SDL_SetTextureAlphaMod);
			L.RegFunction("SDL_SetTextureBlendMode", SDL_SetTextureBlendMode);
			L.RegFunction("SDL_SetTextureColorMod", SDL_SetTextureColorMod);
			L.RegFunction("SDL_UnlockTexture", SDL_UnlockTexture);
			L.RegFunction("SDL_UpdateTexture", SDL_UpdateTexture);
			L.RegFunction("SDL_RenderTargetSupported", SDL_RenderTargetSupported);
			L.RegFunction("SDL_GetRenderTarget", SDL_GetRenderTarget);
			L.RegFunction("SDL_RenderGetMetalLayer", SDL_RenderGetMetalLayer);
			L.RegFunction("SDL_RenderGetMetalCommandEncoder", SDL_RenderGetMetalCommandEncoder);
			L.RegFunction("SDL_RenderIsClipEnabled", SDL_RenderIsClipEnabled);
			L.RegFunction("SDL_RenderFlush", SDL_RenderFlush);
			L.RegFunction("SDL_DEFINE_PIXELFOURCC", SDL_DEFINE_PIXELFOURCC);
			L.RegFunction("SDL_DEFINE_PIXELFORMAT", SDL_DEFINE_PIXELFORMAT);
			L.RegFunction("SDL_PIXELFLAG", SDL_PIXELFLAG);
			L.RegFunction("SDL_PIXELTYPE", SDL_PIXELTYPE);
			L.RegFunction("SDL_PIXELORDER", SDL_PIXELORDER);
			L.RegFunction("SDL_PIXELLAYOUT", SDL_PIXELLAYOUT);
			L.RegFunction("SDL_BITSPERPIXEL", SDL_BITSPERPIXEL);
			L.RegFunction("SDL_BYTESPERPIXEL", SDL_BYTESPERPIXEL);
			L.RegFunction("SDL_ISPIXELFORMAT_INDEXED", SDL_ISPIXELFORMAT_INDEXED);
			L.RegFunction("SDL_ISPIXELFORMAT_PACKED", SDL_ISPIXELFORMAT_PACKED);
			L.RegFunction("SDL_RenderFillRect", SDL_RenderFillRect);
			L.RegFunction("SDL_RenderFillRects", SDL_RenderFillRects);
			L.RegFunction("SDL_RenderCopyF", SDL_RenderCopyF);
			L.RegFunction("SDL_RenderCopyExF", SDL_RenderCopyExF);
			L.RegFunction("SDL_RenderDrawPointF", SDL_RenderDrawPointF);
			L.RegFunction("SDL_RenderDrawPointsF", SDL_RenderDrawPointsF);
			L.RegFunction("SDL_RenderDrawLineF", SDL_RenderDrawLineF);
			L.RegFunction("SDL_RenderDrawLinesF", SDL_RenderDrawLinesF);
			L.RegFunction("SDL_RenderDrawRectF", SDL_RenderDrawRectF);
			L.RegFunction("SDL_RenderDrawRectsF", SDL_RenderDrawRectsF);
			L.RegFunction("SDL_RenderFillRectF", SDL_RenderFillRectF);
			L.RegFunction("SDL_RenderFillRectsF", SDL_RenderFillRectsF);
			L.RegFunction("SDL_RenderClear", SDL_RenderClear);
			L.RegFunction("SDL_RenderCopy", SDL_RenderCopy);
			L.RegFunction("SDL_RenderCopyEx", SDL_RenderCopyEx);
			L.RegFunction("SDL_RenderDrawLine", SDL_RenderDrawLine);
			L.RegFunction("SDL_RenderDrawLines", SDL_RenderDrawLines);
			L.RegFunction("SDL_RenderDrawPoint", SDL_RenderDrawPoint);
			L.RegFunction("SDL_RenderDrawPoints", SDL_RenderDrawPoints);
			L.RegFunction("SDL_RenderDrawRect", SDL_RenderDrawRect);
			L.RegFunction("SDL_RenderDrawRects", SDL_RenderDrawRects);
			L.RegFunction("SDL_SetWindowHitTest", SDL_SetWindowHitTest);
			L.RegFunction("SDL_GetGrabbedWindow", SDL_GetGrabbedWindow);
			L.RegFunction("SDL_ComposeCustomBlendMode", SDL_ComposeCustomBlendMode);
			L.RegFunction("SDL_Vulkan_LoadLibrary", SDL_Vulkan_LoadLibrary);
			L.RegFunction("SDL_Vulkan_GetVkGetInstanceProcAddr", SDL_Vulkan_GetVkGetInstanceProcAddr);
			L.RegFunction("SDL_Vulkan_UnloadLibrary", SDL_Vulkan_UnloadLibrary);
			L.RegFunction("SDL_Metal_CreateView", SDL_Metal_CreateView);
			L.RegFunction("SDL_Metal_DestroyView", SDL_Metal_DestroyView);
			L.RegFunction("SDL_Metal_GetLayer", SDL_Metal_GetLayer);
			L.RegFunction("SDL_CreateRenderer", SDL_CreateRenderer);
			L.RegFunction("SDL_CreateSoftwareRenderer", SDL_CreateSoftwareRenderer);
			L.RegFunction("SDL_CreateTexture", SDL_CreateTexture);
			L.RegFunction("SDL_CreateTextureFromSurface", SDL_CreateTextureFromSurface);
			L.RegFunction("SDL_DestroyRenderer", SDL_DestroyRenderer);
			L.RegFunction("SDL_DestroyTexture", SDL_DestroyTexture);
			L.RegFunction("SDL_GetNumRenderDrivers", SDL_GetNumRenderDrivers);
			L.RegFunction("SDL_SetTextureScaleMode", SDL_SetTextureScaleMode);
			L.RegFunction("SDL_GetRenderer", SDL_GetRenderer);
			L.RegFunction("SDL_GL_UnbindTexture", SDL_GL_UnbindTexture);
			L.RegFunction("SDL_HideWindow", SDL_HideWindow);
			L.RegFunction("SDL_IsScreenSaverEnabled", SDL_IsScreenSaverEnabled);
			L.RegFunction("SDL_MaximizeWindow", SDL_MaximizeWindow);
			L.RegFunction("SDL_MinimizeWindow", SDL_MinimizeWindow);
			L.RegFunction("SDL_RaiseWindow", SDL_RaiseWindow);
			L.RegFunction("SDL_RestoreWindow", SDL_RestoreWindow);
			L.RegFunction("SDL_SetWindowBrightness", SDL_SetWindowBrightness);
			L.RegFunction("SDL_SetWindowData", SDL_SetWindowData);
			L.RegFunction("SDL_SetWindowFullscreen", SDL_SetWindowFullscreen);
			L.RegFunction("SDL_SetWindowGammaRamp", SDL_SetWindowGammaRamp);
			L.RegFunction("SDL_SetWindowGrab", SDL_SetWindowGrab);
			L.RegFunction("SDL_SetWindowIcon", SDL_SetWindowIcon);
			L.RegFunction("SDL_SetWindowMaximumSize", SDL_SetWindowMaximumSize);
			L.RegFunction("SDL_SetWindowMinimumSize", SDL_SetWindowMinimumSize);
			L.RegFunction("SDL_SetWindowPosition", SDL_SetWindowPosition);
			L.RegFunction("SDL_SetWindowSize", SDL_SetWindowSize);
			L.RegFunction("SDL_SetWindowBordered", SDL_SetWindowBordered);
			L.RegFunction("SDL_SetWindowResizable", SDL_SetWindowResizable);
			L.RegFunction("SDL_SetWindowTitle", SDL_SetWindowTitle);
			L.RegFunction("SDL_ShowWindow", SDL_ShowWindow);
			L.RegFunction("SDL_UpdateWindowSurface", SDL_UpdateWindowSurface);
			L.RegFunction("SDL_UpdateWindowSurfaceRects", SDL_UpdateWindowSurfaceRects);
			L.RegFunction("SDL_VideoInit", SDL_VideoInit);
			L.RegFunction("SDL_VideoQuit", SDL_VideoQuit);
			L.RegFunction("SDL_GetWindowGrab", SDL_GetWindowGrab);
			L.RegFunction("SDL_GetWindowID", SDL_GetWindowID);
			L.RegFunction("SDL_GetWindowPixelFormat", SDL_GetWindowPixelFormat);
			L.RegFunction("SDL_GetWindowSurface", SDL_GetWindowSurface);
			L.RegFunction("SDL_GetWindowTitle", SDL_GetWindowTitle);
			L.RegFunction("SDL_GL_CreateContext", SDL_GL_CreateContext);
			L.RegFunction("SDL_GL_DeleteContext", SDL_GL_DeleteContext);
			L.RegFunction("SDL_GL_LoadLibrary", SDL_GL_LoadLibrary);
			L.RegFunction("SDL_GL_GetProcAddress", SDL_GL_GetProcAddress);
			L.RegFunction("SDL_GL_UnloadLibrary", SDL_GL_UnloadLibrary);
			L.RegFunction("SDL_GL_ExtensionSupported", SDL_GL_ExtensionSupported);
			L.RegFunction("SDL_GL_ResetAttributes", SDL_GL_ResetAttributes);
			L.RegFunction("SDL_GL_GetSwapInterval", SDL_GL_GetSwapInterval);
			L.RegFunction("SDL_GL_MakeCurrent", SDL_GL_MakeCurrent);
			L.RegFunction("SDL_GL_GetCurrentWindow", SDL_GL_GetCurrentWindow);
			L.RegFunction("SDL_GL_GetCurrentContext", SDL_GL_GetCurrentContext);
			L.RegFunction("SDL_GL_SetAttribute", SDL_GL_SetAttribute);
			L.RegFunction("SDL_GL_SetSwapInterval", SDL_GL_SetSwapInterval);
			L.RegFunction("SDL_GL_SwapWindow", SDL_GL_SwapWindow);
			L.RegFunction("SDL_DisableScreenSaver", SDL_DisableScreenSaver);
			L.RegFunction("SDL_EnableScreenSaver", SDL_EnableScreenSaver);
			L.RegFunction("SDL_GetCurrentVideoDriver", SDL_GetCurrentVideoDriver);
			L.RegFunction("SDL_GetDisplayName", SDL_GetDisplayName);
			L.RegFunction("SDL_GetDisplayOrientation", SDL_GetDisplayOrientation);
			L.RegFunction("SDL_GetNumDisplayModes", SDL_GetNumDisplayModes);
			L.RegFunction("SDL_GetNumVideoDisplays", SDL_GetNumVideoDisplays);
			L.RegFunction("SDL_GetNumVideoDrivers", SDL_GetNumVideoDrivers);
			L.RegFunction("SDL_GetVideoDriver", SDL_GetVideoDriver);
			L.RegFunction("SDL_GetWindowBrightness", SDL_GetWindowBrightness);
			L.RegFunction("SDL_SetWindowOpacity", SDL_SetWindowOpacity);
			L.RegFunction("SDL_SetWindowModalFor", SDL_SetWindowModalFor);
			L.RegFunction("SDL_SetWindowInputFocus", SDL_SetWindowInputFocus);
			L.RegFunction("SDL_GetWindowData", SDL_GetWindowData);
			L.RegFunction("SDL_GetWindowDisplayIndex", SDL_GetWindowDisplayIndex);
			L.RegFunction("SDL_GetWindowFlags", SDL_GetWindowFlags);
			L.RegFunction("SDL_GetWindowFromID", SDL_GetWindowFromID);
			L.RegFunction("SDL_LogDebug", SDL_LogDebug);
			L.RegFunction("SDL_LogInfo", SDL_LogInfo);
			L.RegFunction("SDL_LogWarn", SDL_LogWarn);
			L.RegFunction("SDL_LogError", SDL_LogError);
			L.RegFunction("SDL_LogCritical", SDL_LogCritical);
			L.RegFunction("SDL_LogMessage", SDL_LogMessage);
			L.RegFunction("SDL_LogMessageV", SDL_LogMessageV);
			L.RegFunction("SDL_LogGetPriority", SDL_LogGetPriority);
			L.RegFunction("SDL_LogSetPriority", SDL_LogSetPriority);
			L.RegFunction("SDL_LogSetAllPriority", SDL_LogSetAllPriority);
			L.RegFunction("SDL_LogResetPriorities", SDL_LogResetPriorities);
			L.RegFunction("SDL_LogSetOutputFunction", SDL_LogSetOutputFunction);
			L.RegFunction("SDL_ShowSimpleMessageBox", SDL_ShowSimpleMessageBox);
			L.RegFunction("SDL_VERSIONNUM", SDL_VERSIONNUM);
			L.RegFunction("SDL_VERSION_ATLEAST", SDL_VERSION_ATLEAST);
			L.RegFunction("SDL_GetRevision", SDL_GetRevision);
			L.RegFunction("SDL_GetRevisionNumber", SDL_GetRevisionNumber);
			L.RegFunction("SDL_WINDOWPOS_UNDEFINED_DISPLAY", SDL_WINDOWPOS_UNDEFINED_DISPLAY);
			L.RegFunction("SDL_WINDOWPOS_ISUNDEFINED", SDL_WINDOWPOS_ISUNDEFINED);
			L.RegFunction("SDL_WINDOWPOS_CENTERED_DISPLAY", SDL_WINDOWPOS_CENTERED_DISPLAY);
			L.RegFunction("SDL_WINDOWPOS_ISCENTERED", SDL_WINDOWPOS_ISCENTERED);
			L.RegFunction("SDL_CreateWindow", SDL_CreateWindow);
			L.RegFunction("SDL_CreateWindowFrom", SDL_CreateWindowFrom);
			L.RegFunction("SDL_DestroyWindow", SDL_DestroyWindow);
			L.RegFunction("SDL_WriteLE64", SDL_WriteLE64);
			L.RegFunction("SDL_WriteBE64", SDL_WriteBE64);
			L.RegFunction("SDL_RWclose", SDL_RWclose);
			L.RegFunction("SDL_SetMainReady", SDL_SetMainReady);
			L.RegFunction("SDL_WinRTRunApp", SDL_WinRTRunApp);
			L.RegFunction("SDL_UIKitRunApp", SDL_UIKitRunApp);
			L.RegFunction("SDL_Init", SDL_Init);
			L.RegFunction("SDL_InitSubSystem", SDL_InitSubSystem);
			L.RegFunction("SDL_Quit", SDL_Quit);
			L.RegFunction("SDL_QuitSubSystem", SDL_QuitSubSystem);
			L.RegFunction("SDL_WasInit", SDL_WasInit);
			L.RegFunction("SDL_GetPlatform", SDL_GetPlatform);
			L.RegFunction("SDL_ClearHints", SDL_ClearHints);
			L.RegFunction("SDL_GetHint", SDL_GetHint);
			L.RegFunction("SDL_SetHint", SDL_SetHint);
			L.RegFunction("SDL_SetHintWithPriority", SDL_SetHintWithPriority);
			L.RegFunction("SDL_GetHintBoolean", SDL_GetHintBoolean);
			L.RegFunction("SDL_ClearError", SDL_ClearError);
			L.RegFunction("SDL_GetError", SDL_GetError);
			L.RegFunction("SDL_SetError", SDL_SetError);
			L.RegFunction("SDL_GetErrorMsg", SDL_GetErrorMsg);
			L.RegFunction("SDL_Log", SDL_Log);
			L.RegFunction("SDL_LogVerbose", SDL_LogVerbose);
			L.RegFunction("UTF8_ToManaged", UTF8_ToManaged);
			L.RegFunction("SDL_FOURCC", SDL_FOURCC);
			L.RegFunction("SDL_memcpy", SDL_memcpy);
			L.RegFunction("SDL_RWFromFile", SDL_RWFromFile);
			L.RegFunction("SDL_AllocRW", SDL_AllocRW);
			L.RegFunction("SDL_FreeRW", SDL_FreeRW);
			L.RegFunction("SDL_RWFromFP", SDL_RWFromFP);
			L.RegFunction("SDL_RWFromMem", SDL_RWFromMem);
			L.RegFunction("SDL_RWFromConstMem", SDL_RWFromConstMem);
			L.RegFunction("SDL_RWsize", SDL_RWsize);
			L.RegFunction("SDL_RWseek", SDL_RWseek);
			L.RegFunction("SDL_RWtell", SDL_RWtell);
			L.RegFunction("SDL_RWread", SDL_RWread);
			L.RegFunction("SDL_RWwrite", SDL_RWwrite);
			L.RegFunction("SDL_ReadU8", SDL_ReadU8);
			L.RegFunction("SDL_ReadLE16", SDL_ReadLE16);
			L.RegFunction("SDL_ReadBE16", SDL_ReadBE16);
			L.RegFunction("SDL_ReadLE32", SDL_ReadLE32);
			L.RegFunction("SDL_ReadBE32", SDL_ReadBE32);
			L.RegFunction("SDL_ReadLE64", SDL_ReadLE64);
			L.RegFunction("SDL_ReadBE64", SDL_ReadBE64);
			L.RegFunction("SDL_WriteU8", SDL_WriteU8);
			L.RegFunction("SDL_WriteLE16", SDL_WriteLE16);
			L.RegFunction("SDL_WriteBE16", SDL_WriteBE16);
			L.RegFunction("SDL_WriteLE32", SDL_WriteLE32);
			L.RegFunction("SDL_WriteBE32", SDL_WriteBE32);
			L.EndStaticLib();
        }
        
        private static int get_SDL_COMPILEDVERSION(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_COMPILEDVERSION);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_UNKNOWN(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_UNKNOWN);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_INDEX1LSB(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_INDEX1LSB);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_INDEX1MSB(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_INDEX1MSB);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_INDEX4LSB(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_INDEX4LSB);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_INDEX4MSB(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_INDEX4MSB);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_INDEX8(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_INDEX8);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_RGB332(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_RGB332);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_XRGB444(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_XRGB444);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_RGB444(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_RGB444);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_XBGR444(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_XBGR444);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_BGR444(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_BGR444);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_XRGB1555(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_XRGB1555);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_RGB555(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_RGB555);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_XBGR1555(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_XBGR1555);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_BGR555(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_BGR555);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_ARGB4444(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_ARGB4444);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_RGBA4444(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_RGBA4444);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_ABGR4444(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_ABGR4444);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_BGRA4444(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_BGRA4444);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_ARGB1555(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_ARGB1555);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_RGBA5551(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_RGBA5551);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_ABGR1555(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_ABGR1555);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_BGRA5551(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_BGRA5551);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_RGB565(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_RGB565);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_BGR565(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_BGR565);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_RGB24(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_RGB24);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_BGR24(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_BGR24);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_XRGB888(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_XRGB888);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_RGB888(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_RGB888);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_RGBX8888(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_RGBX8888);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_XBGR888(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_XBGR888);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_BGR888(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_BGR888);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_BGRX8888(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_BGRX8888);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_ARGB8888(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_ARGB8888);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_RGBA8888(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_RGBA8888);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_ABGR8888(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_ABGR8888);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_BGRA8888(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_BGRA8888);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_ARGB2101010(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_ARGB2101010);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_YV12(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_YV12);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_IYUV(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_IYUV);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_YUY2(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_YUY2);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_UYVY(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_UYVY);
			return 1;
        }
        
        private static int get_SDL_PIXELFORMAT_YVYU(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PIXELFORMAT_YVYU);
			return 1;
        }
        
        private static int get_SDL_BUTTON_LMASK(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_BUTTON_LMASK);
			return 1;
        }
        
        private static int get_SDL_BUTTON_MMASK(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_BUTTON_MMASK);
			return 1;
        }
        
        private static int get_SDL_BUTTON_RMASK(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_BUTTON_RMASK);
			return 1;
        }
        
        private static int get_SDL_BUTTON_X1MASK(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_BUTTON_X1MASK);
			return 1;
        }
        
        private static int get_SDL_BUTTON_X2MASK(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_BUTTON_X2MASK);
			return 1;
        }
        
        private static int get_AUDIO_U16SYS(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_U16SYS);
			return 1;
        }
        
        private static int get_AUDIO_S16SYS(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_S16SYS);
			return 1;
        }
        
        private static int get_AUDIO_S32SYS(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_S32SYS);
			return 1;
        }
        
        private static int get_AUDIO_F32SYS(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_F32SYS);
			return 1;
        }
        
        private static int get_RW_SEEK_SET(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.RW_SEEK_SET);
			return 1;
        }
        
        private static int get_RW_SEEK_CUR(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.RW_SEEK_CUR);
			return 1;
        }
        
        private static int get_RW_SEEK_END(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.RW_SEEK_END);
			return 1;
        }
        
        private static int get_SDL_RWOPS_UNKNOWN(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_RWOPS_UNKNOWN);
			return 1;
        }
        
        private static int get_SDL_RWOPS_WINFILE(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_RWOPS_WINFILE);
			return 1;
        }
        
        private static int get_SDL_RWOPS_STDFILE(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_RWOPS_STDFILE);
			return 1;
        }
        
        private static int get_SDL_RWOPS_JNIFILE(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_RWOPS_JNIFILE);
			return 1;
        }
        
        private static int get_SDL_RWOPS_MEMORY(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_RWOPS_MEMORY);
			return 1;
        }
        
        private static int get_SDL_RWOPS_MEMORY_RO(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_RWOPS_MEMORY_RO);
			return 1;
        }
        
        private static int get_SDL_INIT_TIMER(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_INIT_TIMER);
			return 1;
        }
        
        private static int get_SDL_INIT_AUDIO(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_INIT_AUDIO);
			return 1;
        }
        
        private static int get_SDL_INIT_VIDEO(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_INIT_VIDEO);
			return 1;
        }
        
        private static int get_SDL_INIT_JOYSTICK(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_INIT_JOYSTICK);
			return 1;
        }
        
        private static int get_SDL_INIT_HAPTIC(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_INIT_HAPTIC);
			return 1;
        }
        
        private static int get_SDL_INIT_GAMECONTROLLER(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_INIT_GAMECONTROLLER);
			return 1;
        }
        
        private static int get_SDL_INIT_EVENTS(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_INIT_EVENTS);
			return 1;
        }
        
        private static int get_SDL_INIT_SENSOR(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_INIT_SENSOR);
			return 1;
        }
        
        private static int get_SDL_INIT_NOPARACHUTE(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_INIT_NOPARACHUTE);
			return 1;
        }
        
        private static int get_SDL_INIT_EVERYTHING(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_INIT_EVERYTHING);
			return 1;
        }
        
        private static int get_SDL_HINT_FRAMEBUFFER_ACCELERATION(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_FRAMEBUFFER_ACCELERATION);
			return 1;
        }
        
        private static int get_SDL_HINT_RENDER_DRIVER(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_RENDER_DRIVER);
			return 1;
        }
        
        private static int get_SDL_HINT_RENDER_OPENGL_SHADERS(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_RENDER_OPENGL_SHADERS);
			return 1;
        }
        
        private static int get_SDL_HINT_RENDER_DIRECT3D_THREADSAFE(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_RENDER_DIRECT3D_THREADSAFE);
			return 1;
        }
        
        private static int get_SDL_HINT_RENDER_VSYNC(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_RENDER_VSYNC);
			return 1;
        }
        
        private static int get_SDL_HINT_VIDEO_X11_XVIDMODE(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_VIDEO_X11_XVIDMODE);
			return 1;
        }
        
        private static int get_SDL_HINT_VIDEO_X11_XINERAMA(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_VIDEO_X11_XINERAMA);
			return 1;
        }
        
        private static int get_SDL_HINT_VIDEO_X11_XRANDR(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_VIDEO_X11_XRANDR);
			return 1;
        }
        
        private static int get_SDL_HINT_GRAB_KEYBOARD(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_GRAB_KEYBOARD);
			return 1;
        }
        
        private static int get_SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS);
			return 1;
        }
        
        private static int get_SDL_HINT_IDLE_TIMER_DISABLED(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_IDLE_TIMER_DISABLED);
			return 1;
        }
        
        private static int get_SDL_HINT_ORIENTATIONS(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_ORIENTATIONS);
			return 1;
        }
        
        private static int get_SDL_HINT_XINPUT_ENABLED(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_XINPUT_ENABLED);
			return 1;
        }
        
        private static int get_SDL_HINT_GAMECONTROLLERCONFIG(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_GAMECONTROLLERCONFIG);
			return 1;
        }
        
        private static int get_SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS);
			return 1;
        }
        
        private static int get_SDL_HINT_ALLOW_TOPMOST(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_ALLOW_TOPMOST);
			return 1;
        }
        
        private static int get_SDL_HINT_TIMER_RESOLUTION(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_TIMER_RESOLUTION);
			return 1;
        }
        
        private static int get_SDL_HINT_RENDER_SCALE_QUALITY(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_RENDER_SCALE_QUALITY);
			return 1;
        }
        
        private static int get_SDL_HINT_VIDEO_HIGHDPI_DISABLED(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_VIDEO_HIGHDPI_DISABLED);
			return 1;
        }
        
        private static int get_SDL_HINT_CTRL_CLICK_EMULATE_RIGHT_CLICK(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_CTRL_CLICK_EMULATE_RIGHT_CLICK);
			return 1;
        }
        
        private static int get_SDL_HINT_VIDEO_WIN_D3DCOMPILER(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_VIDEO_WIN_D3DCOMPILER);
			return 1;
        }
        
        private static int get_SDL_HINT_MOUSE_RELATIVE_MODE_WARP(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_MOUSE_RELATIVE_MODE_WARP);
			return 1;
        }
        
        private static int get_SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT);
			return 1;
        }
        
        private static int get_SDL_HINT_VIDEO_ALLOW_SCREENSAVER(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_VIDEO_ALLOW_SCREENSAVER);
			return 1;
        }
        
        private static int get_SDL_HINT_ACCELEROMETER_AS_JOYSTICK(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_ACCELEROMETER_AS_JOYSTICK);
			return 1;
        }
        
        private static int get_SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES);
			return 1;
        }
        
        private static int get_SDL_HINT_WINRT_PRIVACY_POLICY_URL(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_WINRT_PRIVACY_POLICY_URL);
			return 1;
        }
        
        private static int get_SDL_HINT_WINRT_PRIVACY_POLICY_LABEL(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_WINRT_PRIVACY_POLICY_LABEL);
			return 1;
        }
        
        private static int get_SDL_HINT_WINRT_HANDLE_BACK_BUTTON(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_WINRT_HANDLE_BACK_BUTTON);
			return 1;
        }
        
        private static int get_SDL_HINT_NO_SIGNAL_HANDLERS(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_NO_SIGNAL_HANDLERS);
			return 1;
        }
        
        private static int get_SDL_HINT_IME_INTERNAL_EDITING(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_IME_INTERNAL_EDITING);
			return 1;
        }
        
        private static int get_SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH);
			return 1;
        }
        
        private static int get_SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT);
			return 1;
        }
        
        private static int get_SDL_HINT_THREAD_STACK_SIZE(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_THREAD_STACK_SIZE);
			return 1;
        }
        
        private static int get_SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN);
			return 1;
        }
        
        private static int get_SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP);
			return 1;
        }
        
        private static int get_SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4);
			return 1;
        }
        
        private static int get_SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING);
			return 1;
        }
        
        private static int get_SDL_HINT_MAC_BACKGROUND_APP(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_MAC_BACKGROUND_APP);
			return 1;
        }
        
        private static int get_SDL_HINT_VIDEO_X11_NET_WM_PING(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_VIDEO_X11_NET_WM_PING);
			return 1;
        }
        
        private static int get_SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION);
			return 1;
        }
        
        private static int get_SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION);
			return 1;
        }
        
        private static int get_SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH);
			return 1;
        }
        
        private static int get_SDL_HINT_BMP_SAVE_LEGACY_FORMAT(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_BMP_SAVE_LEGACY_FORMAT);
			return 1;
        }
        
        private static int get_SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING);
			return 1;
        }
        
        private static int get_SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION);
			return 1;
        }
        
        private static int get_SDL_HINT_AUDIO_RESAMPLING_MODE(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_AUDIO_RESAMPLING_MODE);
			return 1;
        }
        
        private static int get_SDL_HINT_RENDER_LOGICAL_SIZE_MODE(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_RENDER_LOGICAL_SIZE_MODE);
			return 1;
        }
        
        private static int get_SDL_HINT_MOUSE_NORMAL_SPEED_SCALE(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_MOUSE_NORMAL_SPEED_SCALE);
			return 1;
        }
        
        private static int get_SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE);
			return 1;
        }
        
        private static int get_SDL_HINT_TOUCH_MOUSE_EVENTS(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_TOUCH_MOUSE_EVENTS);
			return 1;
        }
        
        private static int get_SDL_HINT_WINDOWS_INTRESOURCE_ICON(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_WINDOWS_INTRESOURCE_ICON);
			return 1;
        }
        
        private static int get_SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL);
			return 1;
        }
        
        private static int get_SDL_HINT_IOS_HIDE_HOME_INDICATOR(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_IOS_HIDE_HOME_INDICATOR);
			return 1;
        }
        
        private static int get_SDL_HINT_TV_REMOTE_AS_JOYSTICK(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_TV_REMOTE_AS_JOYSTICK);
			return 1;
        }
        
        private static int get_SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR);
			return 1;
        }
        
        private static int get_SDL_HINT_MOUSE_DOUBLE_CLICK_TIME(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_MOUSE_DOUBLE_CLICK_TIME);
			return 1;
        }
        
        private static int get_SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS);
			return 1;
        }
        
        private static int get_SDL_HINT_JOYSTICK_HIDAPI(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_JOYSTICK_HIDAPI);
			return 1;
        }
        
        private static int get_SDL_HINT_JOYSTICK_HIDAPI_PS4(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_JOYSTICK_HIDAPI_PS4);
			return 1;
        }
        
        private static int get_SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE);
			return 1;
        }
        
        private static int get_SDL_HINT_JOYSTICK_HIDAPI_STEAM(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_JOYSTICK_HIDAPI_STEAM);
			return 1;
        }
        
        private static int get_SDL_HINT_JOYSTICK_HIDAPI_SWITCH(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_JOYSTICK_HIDAPI_SWITCH);
			return 1;
        }
        
        private static int get_SDL_HINT_JOYSTICK_HIDAPI_XBOX(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_JOYSTICK_HIDAPI_XBOX);
			return 1;
        }
        
        private static int get_SDL_HINT_ENABLE_STEAM_CONTROLLERS(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_ENABLE_STEAM_CONTROLLERS);
			return 1;
        }
        
        private static int get_SDL_HINT_ANDROID_TRAP_BACK_BUTTON(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_ANDROID_TRAP_BACK_BUTTON);
			return 1;
        }
        
        private static int get_SDL_HINT_MOUSE_TOUCH_EVENTS(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_MOUSE_TOUCH_EVENTS);
			return 1;
        }
        
        private static int get_SDL_HINT_GAMECONTROLLERCONFIG_FILE(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_GAMECONTROLLERCONFIG_FILE);
			return 1;
        }
        
        private static int get_SDL_HINT_ANDROID_BLOCK_ON_PAUSE(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_ANDROID_BLOCK_ON_PAUSE);
			return 1;
        }
        
        private static int get_SDL_HINT_RENDER_BATCHING(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_RENDER_BATCHING);
			return 1;
        }
        
        private static int get_SDL_HINT_EVENT_LOGGING(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_EVENT_LOGGING);
			return 1;
        }
        
        private static int get_SDL_HINT_WAVE_RIFF_CHUNK_SIZE(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_WAVE_RIFF_CHUNK_SIZE);
			return 1;
        }
        
        private static int get_SDL_HINT_WAVE_TRUNCATION(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_WAVE_TRUNCATION);
			return 1;
        }
        
        private static int get_SDL_HINT_WAVE_FACT_CHUNK(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_WAVE_FACT_CHUNK);
			return 1;
        }
        
        private static int get_SDL_HINT_VIDO_X11_WINDOW_VISUALID(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_VIDO_X11_WINDOW_VISUALID);
			return 1;
        }
        
        private static int get_SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS);
			return 1;
        }
        
        private static int get_SDL_HINT_VIDEO_EXTERNAL_CONTEXT(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_VIDEO_EXTERNAL_CONTEXT);
			return 1;
        }
        
        private static int get_SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE);
			return 1;
        }
        
        private static int get_SDL_HINT_DISPLAY_USABLE_BOUNDS(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_DISPLAY_USABLE_BOUNDS);
			return 1;
        }
        
        private static int get_SDL_HINT_VIDEO_X11_FORCE_EGL(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_VIDEO_X11_FORCE_EGL);
			return 1;
        }
        
        private static int get_SDL_HINT_GAMECONTROLLERTYPE(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_GAMECONTROLLERTYPE);
			return 1;
        }
        
        private static int get_SDL_HINT_JOYSTICK_HIDAPI_CORRELATE_XINPUT(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_JOYSTICK_HIDAPI_CORRELATE_XINPUT);
			return 1;
        }
        
        private static int get_SDL_HINT_JOYSTICK_RAWINPUT(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_JOYSTICK_RAWINPUT);
			return 1;
        }
        
        private static int get_SDL_HINT_AUDIO_DEVICE_APP_NAME(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_AUDIO_DEVICE_APP_NAME);
			return 1;
        }
        
        private static int get_SDL_HINT_AUDIO_DEVICE_STREAM_NAME(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_AUDIO_DEVICE_STREAM_NAME);
			return 1;
        }
        
        private static int get_SDL_HINT_PREFERRED_LOCALES(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_PREFERRED_LOCALES);
			return 1;
        }
        
        private static int get_SDL_HINT_THREAD_PRIORITY_POLICY(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_THREAD_PRIORITY_POLICY);
			return 1;
        }
        
        private static int get_SDL_HINT_EMSCRIPTEN_ASYNCIFY(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_EMSCRIPTEN_ASYNCIFY);
			return 1;
        }
        
        private static int get_SDL_HINT_LINUX_JOYSTICK_DEADZONES(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_LINUX_JOYSTICK_DEADZONES);
			return 1;
        }
        
        private static int get_SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO);
			return 1;
        }
        
        private static int get_SDL_HINT_JOYSTICK_HIDAPI_PS5(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_JOYSTICK_HIDAPI_PS5);
			return 1;
        }
        
        private static int get_SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL);
			return 1;
        }
        
        private static int get_SDL_HINT_JOYSTICK_THREAD(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_JOYSTICK_THREAD);
			return 1;
        }
        
        private static int get_SDL_HINT_AUTO_UPDATE_JOYSTICKS(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_AUTO_UPDATE_JOYSTICKS);
			return 1;
        }
        
        private static int get_SDL_HINT_AUTO_UPDATE_SENSORS(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_AUTO_UPDATE_SENSORS);
			return 1;
        }
        
        private static int get_SDL_HINT_MOUSE_RELATIVE_SCALING(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_MOUSE_RELATIVE_SCALING);
			return 1;
        }
        
        private static int get_SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE(UniLua.ILuaState L)
        {
			L.PushAny<string>(SDL2.SDL.SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE);
			return 1;
        }
        
        private static int get_SDL_MAJOR_VERSION(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_MAJOR_VERSION);
			return 1;
        }
        
        private static int get_SDL_MINOR_VERSION(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_MINOR_VERSION);
			return 1;
        }
        
        private static int get_SDL_PATCHLEVEL(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_PATCHLEVEL);
			return 1;
        }
        
        private static int get_SDL_WINDOWPOS_UNDEFINED_MASK(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_WINDOWPOS_UNDEFINED_MASK);
			return 1;
        }
        
        private static int get_SDL_WINDOWPOS_CENTERED_MASK(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_WINDOWPOS_CENTERED_MASK);
			return 1;
        }
        
        private static int get_SDL_WINDOWPOS_UNDEFINED(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_WINDOWPOS_UNDEFINED);
			return 1;
        }
        
        private static int get_SDL_WINDOWPOS_CENTERED(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_WINDOWPOS_CENTERED);
			return 1;
        }
        
        private static int get_SDL_SWSURFACE(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_SWSURFACE);
			return 1;
        }
        
        private static int get_SDL_PREALLOC(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_PREALLOC);
			return 1;
        }
        
        private static int get_SDL_RLEACCEL(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_RLEACCEL);
			return 1;
        }
        
        private static int get_SDL_DONTFREE(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_DONTFREE);
			return 1;
        }
        
        private static int get_SDL_PRESSED(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL.SDL_PRESSED);
			return 1;
        }
        
        private static int get_SDL_RELEASED(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL.SDL_RELEASED);
			return 1;
        }
        
        private static int get_SDL_TEXTEDITINGEVENT_TEXT_SIZE(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_TEXTEDITINGEVENT_TEXT_SIZE);
			return 1;
        }
        
        private static int get_SDL_TEXTINPUTEVENT_TEXT_SIZE(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_TEXTINPUTEVENT_TEXT_SIZE);
			return 1;
        }
        
        private static int get_SDL_QUERY(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_QUERY);
			return 1;
        }
        
        private static int get_SDL_IGNORE(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_IGNORE);
			return 1;
        }
        
        private static int get_SDL_DISABLE(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_DISABLE);
			return 1;
        }
        
        private static int get_SDL_ENABLE(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_ENABLE);
			return 1;
        }
        
        private static int get_SDLK_SCANCODE_MASK(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDLK_SCANCODE_MASK);
			return 1;
        }
        
        private static int get_SDL_BUTTON_LEFT(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_BUTTON_LEFT);
			return 1;
        }
        
        private static int get_SDL_BUTTON_MIDDLE(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_BUTTON_MIDDLE);
			return 1;
        }
        
        private static int get_SDL_BUTTON_RIGHT(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_BUTTON_RIGHT);
			return 1;
        }
        
        private static int get_SDL_BUTTON_X1(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_BUTTON_X1);
			return 1;
        }
        
        private static int get_SDL_BUTTON_X2(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_BUTTON_X2);
			return 1;
        }
        
        private static int get_SDL_TOUCH_MOUSEID(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_TOUCH_MOUSEID);
			return 1;
        }
        
        private static int get_SDL_HAT_CENTERED(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL.SDL_HAT_CENTERED);
			return 1;
        }
        
        private static int get_SDL_HAT_UP(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL.SDL_HAT_UP);
			return 1;
        }
        
        private static int get_SDL_HAT_RIGHT(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL.SDL_HAT_RIGHT);
			return 1;
        }
        
        private static int get_SDL_HAT_DOWN(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL.SDL_HAT_DOWN);
			return 1;
        }
        
        private static int get_SDL_HAT_LEFT(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL.SDL_HAT_LEFT);
			return 1;
        }
        
        private static int get_SDL_HAT_RIGHTUP(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL.SDL_HAT_RIGHTUP);
			return 1;
        }
        
        private static int get_SDL_HAT_RIGHTDOWN(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL.SDL_HAT_RIGHTDOWN);
			return 1;
        }
        
        private static int get_SDL_HAT_LEFTUP(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL.SDL_HAT_LEFTUP);
			return 1;
        }
        
        private static int get_SDL_HAT_LEFTDOWN(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL.SDL_HAT_LEFTDOWN);
			return 1;
        }
        
        private static int get_SDL_IPHONE_MAX_GFORCE(UniLua.ILuaState L)
        {
			L.PushAny<float>(SDL2.SDL.SDL_IPHONE_MAX_GFORCE);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_CONSTANT(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_HAPTIC_CONSTANT);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_SINE(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_HAPTIC_SINE);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_LEFTRIGHT(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_HAPTIC_LEFTRIGHT);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_TRIANGLE(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_HAPTIC_TRIANGLE);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_SAWTOOTHUP(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_HAPTIC_SAWTOOTHUP);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_SAWTOOTHDOWN(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_HAPTIC_SAWTOOTHDOWN);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_SPRING(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_HAPTIC_SPRING);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_DAMPER(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_HAPTIC_DAMPER);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_INERTIA(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_HAPTIC_INERTIA);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_FRICTION(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_HAPTIC_FRICTION);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_CUSTOM(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_HAPTIC_CUSTOM);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_GAIN(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_HAPTIC_GAIN);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_AUTOCENTER(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_HAPTIC_AUTOCENTER);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_STATUS(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_HAPTIC_STATUS);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_PAUSE(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_HAPTIC_PAUSE);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_POLAR(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL.SDL_HAPTIC_POLAR);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_CARTESIAN(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL.SDL_HAPTIC_CARTESIAN);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_SPHERICAL(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL.SDL_HAPTIC_SPHERICAL);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_STEERING_AXIS(UniLua.ILuaState L)
        {
			L.PushAny<byte>(SDL2.SDL.SDL_HAPTIC_STEERING_AXIS);
			return 1;
        }
        
        private static int get_SDL_HAPTIC_INFINITY(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_HAPTIC_INFINITY);
			return 1;
        }
        
        private static int get_SDL_STANDARD_GRAVITY(UniLua.ILuaState L)
        {
			L.PushAny<float>(SDL2.SDL.SDL_STANDARD_GRAVITY);
			return 1;
        }
        
        private static int get_SDL_AUDIO_MASK_BITSIZE(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_AUDIO_MASK_BITSIZE);
			return 1;
        }
        
        private static int get_SDL_AUDIO_MASK_DATATYPE(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_AUDIO_MASK_DATATYPE);
			return 1;
        }
        
        private static int get_SDL_AUDIO_MASK_ENDIAN(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_AUDIO_MASK_ENDIAN);
			return 1;
        }
        
        private static int get_SDL_AUDIO_MASK_SIGNED(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.SDL_AUDIO_MASK_SIGNED);
			return 1;
        }
        
        private static int get_AUDIO_U8(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_U8);
			return 1;
        }
        
        private static int get_AUDIO_S8(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_S8);
			return 1;
        }
        
        private static int get_AUDIO_U16LSB(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_U16LSB);
			return 1;
        }
        
        private static int get_AUDIO_S16LSB(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_S16LSB);
			return 1;
        }
        
        private static int get_AUDIO_U16MSB(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_U16MSB);
			return 1;
        }
        
        private static int get_AUDIO_S16MSB(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_S16MSB);
			return 1;
        }
        
        private static int get_AUDIO_U16(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_U16);
			return 1;
        }
        
        private static int get_AUDIO_S16(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_S16);
			return 1;
        }
        
        private static int get_AUDIO_S32LSB(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_S32LSB);
			return 1;
        }
        
        private static int get_AUDIO_S32MSB(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_S32MSB);
			return 1;
        }
        
        private static int get_AUDIO_S32(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_S32);
			return 1;
        }
        
        private static int get_AUDIO_F32LSB(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_F32LSB);
			return 1;
        }
        
        private static int get_AUDIO_F32MSB(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_F32MSB);
			return 1;
        }
        
        private static int get_AUDIO_F32(UniLua.ILuaState L)
        {
			L.PushAny<ushort>(SDL2.SDL.AUDIO_F32);
			return 1;
        }
        
        private static int get_SDL_AUDIO_ALLOW_FREQUENCY_CHANGE(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_AUDIO_ALLOW_FREQUENCY_CHANGE);
			return 1;
        }
        
        private static int get_SDL_AUDIO_ALLOW_FORMAT_CHANGE(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_AUDIO_ALLOW_FORMAT_CHANGE);
			return 1;
        }
        
        private static int get_SDL_AUDIO_ALLOW_CHANNELS_CHANGE(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_AUDIO_ALLOW_CHANNELS_CHANGE);
			return 1;
        }
        
        private static int get_SDL_AUDIO_ALLOW_SAMPLES_CHANGE(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_AUDIO_ALLOW_SAMPLES_CHANGE);
			return 1;
        }
        
        private static int get_SDL_AUDIO_ALLOW_ANY_CHANGE(UniLua.ILuaState L)
        {
			L.PushAny<uint>(SDL2.SDL.SDL_AUDIO_ALLOW_ANY_CHANGE);
			return 1;
        }
        
        private static int get_SDL_MIX_MAXVOLUME(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_MIX_MAXVOLUME);
			return 1;
        }
        
        private static int get_SDL_ANDROID_EXTERNAL_STORAGE_READ(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_ANDROID_EXTERNAL_STORAGE_READ);
			return 1;
        }
        
        private static int get_SDL_ANDROID_EXTERNAL_STORAGE_WRITE(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL.SDL_ANDROID_EXTERNAL_STORAGE_WRITE);
			return 1;
        }
        
        private static int SDL_SIMDFree(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_SIMDFree(arg1);
				return 0;
			}
			L.L_Error("call function SDL_SIMDFree args is error");
			return 1;
        }
        
        private static int SDL_HasARMSIMD(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_HasARMSIMD();
				return 0;
			}
			L.L_Error("call function SDL_HasARMSIMD args is error");
			return 1;
        }
        
        private static int SDL_GetPreferredLocales(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				System.IntPtr result;
				result = SDL2.SDL.SDL_GetPreferredLocales();
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetPreferredLocales args is error");
			return 1;
        }
        
        private static int SDL_OpenURL(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				int result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_OpenURL(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_OpenURL args is error");
			return 1;
        }
        
        private static int SDL_GetAndroidSDKVersion(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_GetAndroidSDKVersion();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetAndroidSDKVersion args is error");
			return 1;
        }
        
        private static int SDL_AndroidRequestPermission(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_AndroidRequestPermission(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_AndroidRequestPermission args is error");
			return 1;
        }
        
        private static int SDL_WinRTGetDeviceFamily(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_WinRT_DeviceFamily result;
				result = SDL2.SDL.SDL_WinRTGetDeviceFamily();
				L.PushAny<SDL2.SDL.SDL_WinRT_DeviceFamily>(result);
				return 1;
			}
			L.L_Error("call function SDL_WinRTGetDeviceFamily args is error");
			return 1;
        }
        
        private static int SDL_IsTablet(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_IsTablet();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_IsTablet args is error");
			return 1;
        }
        
        private static int SDL_GetBasePath(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				string result;
				result = SDL2.SDL.SDL_GetBasePath();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetBasePath args is error");
			return 1;
        }
        
        private static int SDL_GetPrefPath(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<string, string>(1))
			{
				string result;
				var arg1 = L.CheckAny<string>(1);
				var arg2 = L.CheckAny<string>(2);
				result = SDL2.SDL.SDL_GetPrefPath(arg1, arg2);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetPrefPath args is error");
			return 1;
        }
        
        private static int SDL_GetCPUCount(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_GetCPUCount();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetCPUCount args is error");
			return 1;
        }
        
        private static int SDL_GetCPUCacheLineSize(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_GetCPUCacheLineSize();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetCPUCacheLineSize args is error");
			return 1;
        }
        
        private static int SDL_HasRDTSC(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_HasRDTSC();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasRDTSC args is error");
			return 1;
        }
        
        private static int SDL_HasAltiVec(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_HasAltiVec();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasAltiVec args is error");
			return 1;
        }
        
        private static int SDL_HasMMX(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_HasMMX();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasMMX args is error");
			return 1;
        }
        
        private static int SDL_Has3DNow(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_Has3DNow();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_Has3DNow args is error");
			return 1;
        }
        
        private static int SDL_HasSSE(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_HasSSE();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasSSE args is error");
			return 1;
        }
        
        private static int SDL_HasSSE2(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_HasSSE2();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasSSE2 args is error");
			return 1;
        }
        
        private static int SDL_HasSSE3(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_HasSSE3();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasSSE3 args is error");
			return 1;
        }
        
        private static int SDL_HasSSE41(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_HasSSE41();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasSSE41 args is error");
			return 1;
        }
        
        private static int SDL_HasSSE42(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_HasSSE42();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasSSE42 args is error");
			return 1;
        }
        
        private static int SDL_HasAVX(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_HasAVX();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasAVX args is error");
			return 1;
        }
        
        private static int SDL_HasAVX2(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_HasAVX2();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasAVX2 args is error");
			return 1;
        }
        
        private static int SDL_HasAVX512F(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_HasAVX512F();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasAVX512F args is error");
			return 1;
        }
        
        private static int SDL_HasNEON(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_HasNEON();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasNEON args is error");
			return 1;
        }
        
        private static int SDL_GetSystemRAM(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_GetSystemRAM();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetSystemRAM args is error");
			return 1;
        }
        
        private static int SDL_SIMDGetAlignment(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				uint result;
				result = SDL2.SDL.SDL_SIMDGetAlignment();
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_SIMDGetAlignment args is error");
			return 1;
        }
        
        private static int SDL_SIMDAlloc(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_SIMDAlloc(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_SIMDAlloc args is error");
			return 1;
        }
        
        private static int SDL_SIMDRealloc(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<uint>(2);
				result = SDL2.SDL.SDL_SIMDRealloc(arg1, arg2);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_SIMDRealloc args is error");
			return 1;
        }
        
        private static int SDL_DequeueAudio(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<uint, System.IntPtr, uint>(1))
			{
				uint result;
				var arg1 = L.CheckAny<uint>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<uint>(3);
				result = SDL2.SDL.SDL_DequeueAudio(arg1, arg2, arg3);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_DequeueAudio args is error");
			return 1;
        }
        
        private static int SDL_GetQueuedAudioSize(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				uint result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_GetQueuedAudioSize(arg1);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetQueuedAudioSize args is error");
			return 1;
        }
        
        private static int SDL_ClearQueuedAudio(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				var arg1 = L.CheckAny<uint>(1);
				SDL2.SDL.SDL_ClearQueuedAudio(arg1);
				return 0;
			}
			L.L_Error("call function SDL_ClearQueuedAudio args is error");
			return 1;
        }
        
        private static int SDL_NewAudioStream(UniLua.ILuaState L)
        {
			if(L.CheckNum(6) && L.CheckType<ushort, byte, int, ushort, byte, int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<ushort>(1);
				var arg2 = L.CheckAny<byte>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<ushort>(4);
				var arg5 = L.CheckAny<byte>(5);
				var arg6 = L.CheckAny<int>(6);
				result = SDL2.SDL.SDL_NewAudioStream(arg1, arg2, arg3, arg4, arg5, arg6);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_NewAudioStream args is error");
			return 1;
        }
        
        private static int SDL_AudioStreamPut(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, System.IntPtr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_AudioStreamPut(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_AudioStreamPut args is error");
			return 1;
        }
        
        private static int SDL_AudioStreamGet(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, System.IntPtr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_AudioStreamGet(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_AudioStreamGet args is error");
			return 1;
        }
        
        private static int SDL_AudioStreamAvailable(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_AudioStreamAvailable(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_AudioStreamAvailable args is error");
			return 1;
        }
        
        private static int SDL_AudioStreamClear(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_AudioStreamClear(arg1);
				return 0;
			}
			L.L_Error("call function SDL_AudioStreamClear args is error");
			return 1;
        }
        
        private static int SDL_FreeAudioStream(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_FreeAudioStream(arg1);
				return 0;
			}
			L.L_Error("call function SDL_FreeAudioStream args is error");
			return 1;
        }
        
        private static int SDL_TICKS_PASSED(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<uint, uint>(1))
			{
				bool result;
				var arg1 = L.CheckAny<uint>(1);
				var arg2 = L.CheckAny<uint>(2);
				result = SDL2.SDL.SDL_TICKS_PASSED(arg1, arg2);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_TICKS_PASSED args is error");
			return 1;
        }
        
        private static int SDL_Delay(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				var arg1 = L.CheckAny<uint>(1);
				SDL2.SDL.SDL_Delay(arg1);
				return 0;
			}
			L.L_Error("call function SDL_Delay args is error");
			return 1;
        }
        
        private static int SDL_GetTicks(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				uint result;
				result = SDL2.SDL.SDL_GetTicks();
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetTicks args is error");
			return 1;
        }
        
        private static int SDL_GetPerformanceCounter(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				ulong result;
				result = SDL2.SDL.SDL_GetPerformanceCounter();
				L.PushAny<ulong>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetPerformanceCounter args is error");
			return 1;
        }
        
        private static int SDL_GetPerformanceFrequency(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				ulong result;
				result = SDL2.SDL.SDL_GetPerformanceFrequency();
				L.PushAny<ulong>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetPerformanceFrequency args is error");
			return 1;
        }
        
        private static int SDL_AddTimer(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<uint, SDL2.SDL.SDL_TimerCallback, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<uint>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_TimerCallback>(2);
				var arg3 = L.CheckAny<System.IntPtr>(3);
				result = SDL2.SDL.SDL_AddTimer(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_AddTimer args is error");
			return 1;
        }
        
        private static int SDL_RemoveTimer(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_RemoveTimer(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_RemoveTimer args is error");
			return 1;
        }
        
        private static int SDL_SetWindowsMessageHook(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SDL2.SDL.SDL_WindowsMessageHook, System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<SDL2.SDL.SDL_WindowsMessageHook>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				SDL2.SDL.SDL_SetWindowsMessageHook(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_SetWindowsMessageHook args is error");
			return 1;
        }
        
        private static int SDL_iPhoneSetAnimationCallback(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, int, SDL2.SDL.SDL_iPhoneAnimationCallback, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_iPhoneAnimationCallback>(3);
				var arg4 = L.CheckAny<System.IntPtr>(4);
				result = SDL2.SDL.SDL_iPhoneSetAnimationCallback(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_iPhoneSetAnimationCallback args is error");
			return 1;
        }
        
        private static int SDL_iPhoneSetEventPump(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_bool>(1))
			{
				var arg1 = L.CheckAny<SDL2.SDL.SDL_bool>(1);
				SDL2.SDL.SDL_iPhoneSetEventPump(arg1);
				return 0;
			}
			L.L_Error("call function SDL_iPhoneSetEventPump args is error");
			return 1;
        }
        
        private static int SDL_AndroidGetJNIEnv(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				System.IntPtr result;
				result = SDL2.SDL.SDL_AndroidGetJNIEnv();
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_AndroidGetJNIEnv args is error");
			return 1;
        }
        
        private static int SDL_AndroidGetActivity(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				System.IntPtr result;
				result = SDL2.SDL.SDL_AndroidGetActivity();
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_AndroidGetActivity args is error");
			return 1;
        }
        
        private static int SDL_IsAndroidTV(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_IsAndroidTV();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_IsAndroidTV args is error");
			return 1;
        }
        
        private static int SDL_IsChromebook(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_IsChromebook();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_IsChromebook args is error");
			return 1;
        }
        
        private static int SDL_IsDeXMode(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_IsDeXMode();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_IsDeXMode args is error");
			return 1;
        }
        
        private static int SDL_AndroidBackButton(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_AndroidBackButton();
				return 0;
			}
			L.L_Error("call function SDL_AndroidBackButton args is error");
			return 1;
        }
        
        private static int SDL_AndroidGetInternalStoragePath(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				string result;
				result = SDL2.SDL.SDL_AndroidGetInternalStoragePath();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_AndroidGetInternalStoragePath args is error");
			return 1;
        }
        
        private static int SDL_AndroidGetExternalStorageState(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_AndroidGetExternalStorageState();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_AndroidGetExternalStorageState args is error");
			return 1;
        }
        
        private static int SDL_AndroidGetExternalStoragePath(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				string result;
				result = SDL2.SDL.SDL_AndroidGetExternalStoragePath();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_AndroidGetExternalStoragePath args is error");
			return 1;
        }
        
        private static int SDL_AUDIO_ISLITTLEENDIAN(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<ushort>(1))
			{
				bool result;
				var arg1 = L.CheckAny<ushort>(1);
				result = SDL2.SDL.SDL_AUDIO_ISLITTLEENDIAN(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_AUDIO_ISLITTLEENDIAN args is error");
			return 1;
        }
        
        private static int SDL_AUDIO_ISUNSIGNED(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<ushort>(1))
			{
				bool result;
				var arg1 = L.CheckAny<ushort>(1);
				result = SDL2.SDL.SDL_AUDIO_ISUNSIGNED(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_AUDIO_ISUNSIGNED args is error");
			return 1;
        }
        
        private static int SDL_AudioInit(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				int result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_AudioInit(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_AudioInit args is error");
			return 1;
        }
        
        private static int SDL_AudioQuit(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_AudioQuit();
				return 0;
			}
			L.L_Error("call function SDL_AudioQuit args is error");
			return 1;
        }
        
        private static int SDL_CloseAudio(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_CloseAudio();
				return 0;
			}
			L.L_Error("call function SDL_CloseAudio args is error");
			return 1;
        }
        
        private static int SDL_CloseAudioDevice(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				var arg1 = L.CheckAny<uint>(1);
				SDL2.SDL.SDL_CloseAudioDevice(arg1);
				return 0;
			}
			L.L_Error("call function SDL_CloseAudioDevice args is error");
			return 1;
        }
        
        private static int SDL_FreeWAV(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_FreeWAV(arg1);
				return 0;
			}
			L.L_Error("call function SDL_FreeWAV args is error");
			return 1;
        }
        
        private static int SDL_GetAudioDeviceName(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, int>(1))
			{
				string result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_GetAudioDeviceName(arg1, arg2);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetAudioDeviceName args is error");
			return 1;
        }
        
        private static int SDL_GetAudioDeviceStatus(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				SDL2.SDL.SDL_AudioStatus result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_GetAudioDeviceStatus(arg1);
				L.PushAny<SDL2.SDL.SDL_AudioStatus>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetAudioDeviceStatus args is error");
			return 1;
        }
        
        private static int SDL_GetAudioDriver(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				string result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GetAudioDriver(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetAudioDriver args is error");
			return 1;
        }
        
        private static int SDL_GetAudioStatus(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_AudioStatus result;
				result = SDL2.SDL.SDL_GetAudioStatus();
				L.PushAny<SDL2.SDL.SDL_AudioStatus>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetAudioStatus args is error");
			return 1;
        }
        
        private static int SDL_GetCurrentAudioDriver(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				string result;
				result = SDL2.SDL.SDL_GetCurrentAudioDriver();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetCurrentAudioDriver args is error");
			return 1;
        }
        
        private static int SDL_GetNumAudioDevices(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GetNumAudioDevices(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetNumAudioDevices args is error");
			return 1;
        }
        
        private static int SDL_GetNumAudioDrivers(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_GetNumAudioDrivers();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetNumAudioDrivers args is error");
			return 1;
        }
        
        private static int SDL_LockAudio(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_LockAudio();
				return 0;
			}
			L.L_Error("call function SDL_LockAudio args is error");
			return 1;
        }
        
        private static int SDL_LockAudioDevice(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				var arg1 = L.CheckAny<uint>(1);
				SDL2.SDL.SDL_LockAudioDevice(arg1);
				return 0;
			}
			L.L_Error("call function SDL_LockAudioDevice args is error");
			return 1;
        }
        
        private static int SDL_PauseAudio(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				var arg1 = L.CheckAny<int>(1);
				SDL2.SDL.SDL_PauseAudio(arg1);
				return 0;
			}
			L.L_Error("call function SDL_PauseAudio args is error");
			return 1;
        }
        
        private static int SDL_PauseAudioDevice(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<uint, int>(1))
			{
				var arg1 = L.CheckAny<uint>(1);
				var arg2 = L.CheckAny<int>(2);
				SDL2.SDL.SDL_PauseAudioDevice(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_PauseAudioDevice args is error");
			return 1;
        }
        
        private static int SDL_UnlockAudio(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_UnlockAudio();
				return 0;
			}
			L.L_Error("call function SDL_UnlockAudio args is error");
			return 1;
        }
        
        private static int SDL_UnlockAudioDevice(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				var arg1 = L.CheckAny<uint>(1);
				SDL2.SDL.SDL_UnlockAudioDevice(arg1);
				return 0;
			}
			L.L_Error("call function SDL_UnlockAudioDevice args is error");
			return 1;
        }
        
        private static int SDL_QueueAudio(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<uint, System.IntPtr, uint>(1))
			{
				int result;
				var arg1 = L.CheckAny<uint>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<uint>(3);
				result = SDL2.SDL.SDL_QueueAudio(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_QueueAudio args is error");
			return 1;
        }
        
        private static int SDL_HapticRunEffect(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, uint>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<uint>(3);
				result = SDL2.SDL.SDL_HapticRunEffect(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticRunEffect args is error");
			return 1;
        }
        
        private static int SDL_HapticSetAutocenter(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_HapticSetAutocenter(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticSetAutocenter args is error");
			return 1;
        }
        
        private static int SDL_HapticSetGain(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_HapticSetGain(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticSetGain args is error");
			return 1;
        }
        
        private static int SDL_HapticStopAll(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_HapticStopAll(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticStopAll args is error");
			return 1;
        }
        
        private static int SDL_HapticStopEffect(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_HapticStopEffect(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticStopEffect args is error");
			return 1;
        }
        
        private static int SDL_HapticUnpause(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_HapticUnpause(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticUnpause args is error");
			return 1;
        }
        
        private static int SDL_JoystickIsHaptic(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickIsHaptic(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickIsHaptic args is error");
			return 1;
        }
        
        private static int SDL_MouseIsHaptic(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_MouseIsHaptic();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_MouseIsHaptic args is error");
			return 1;
        }
        
        private static int SDL_NumHaptics(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_NumHaptics();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_NumHaptics args is error");
			return 1;
        }
        
        private static int SDL_NumSensors(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_NumSensors();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_NumSensors args is error");
			return 1;
        }
        
        private static int SDL_SensorGetDeviceName(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				string result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_SensorGetDeviceName(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_SensorGetDeviceName args is error");
			return 1;
        }
        
        private static int SDL_SensorGetDeviceType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				SDL2.SDL.SDL_SensorType result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_SensorGetDeviceType(arg1);
				L.PushAny<SDL2.SDL.SDL_SensorType>(result);
				return 1;
			}
			L.L_Error("call function SDL_SensorGetDeviceType args is error");
			return 1;
        }
        
        private static int SDL_SensorGetDeviceNonPortableType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_SensorGetDeviceNonPortableType(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SensorGetDeviceNonPortableType args is error");
			return 1;
        }
        
        private static int SDL_SensorGetDeviceInstanceID(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_SensorGetDeviceInstanceID(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SensorGetDeviceInstanceID args is error");
			return 1;
        }
        
        private static int SDL_SensorOpen(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_SensorOpen(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_SensorOpen args is error");
			return 1;
        }
        
        private static int SDL_SensorFromInstanceID(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_SensorFromInstanceID(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_SensorFromInstanceID args is error");
			return 1;
        }
        
        private static int SDL_SensorGetName(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				string result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_SensorGetName(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_SensorGetName args is error");
			return 1;
        }
        
        private static int SDL_SensorGetType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				SDL2.SDL.SDL_SensorType result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_SensorGetType(arg1);
				L.PushAny<SDL2.SDL.SDL_SensorType>(result);
				return 1;
			}
			L.L_Error("call function SDL_SensorGetType args is error");
			return 1;
        }
        
        private static int SDL_SensorGetNonPortableType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_SensorGetNonPortableType(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SensorGetNonPortableType args is error");
			return 1;
        }
        
        private static int SDL_SensorGetInstanceID(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_SensorGetInstanceID(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SensorGetInstanceID args is error");
			return 1;
        }
        
        private static int SDL_SensorGetData(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, float[], int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<float[]>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_SensorGetData(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SensorGetData args is error");
			return 1;
        }
        
        private static int SDL_SensorClose(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_SensorClose(arg1);
				return 0;
			}
			L.L_Error("call function SDL_SensorClose args is error");
			return 1;
        }
        
        private static int SDL_SensorUpdate(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_SensorUpdate();
				return 0;
			}
			L.L_Error("call function SDL_SensorUpdate args is error");
			return 1;
        }
        
        private static int SDL_LockSensors(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_LockSensors();
				return 0;
			}
			L.L_Error("call function SDL_LockSensors args is error");
			return 1;
        }
        
        private static int SDL_UnlockSensors(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_UnlockSensors();
				return 0;
			}
			L.L_Error("call function SDL_UnlockSensors args is error");
			return 1;
        }
        
        private static int SDL_AUDIO_BITSIZE(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<ushort>(1))
			{
				ushort result;
				var arg1 = L.CheckAny<ushort>(1);
				result = SDL2.SDL.SDL_AUDIO_BITSIZE(arg1);
				L.PushAny<ushort>(result);
				return 1;
			}
			L.L_Error("call function SDL_AUDIO_BITSIZE args is error");
			return 1;
        }
        
        private static int SDL_AUDIO_ISFLOAT(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<ushort>(1))
			{
				bool result;
				var arg1 = L.CheckAny<ushort>(1);
				result = SDL2.SDL.SDL_AUDIO_ISFLOAT(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_AUDIO_ISFLOAT args is error");
			return 1;
        }
        
        private static int SDL_AUDIO_ISBIGENDIAN(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<ushort>(1))
			{
				bool result;
				var arg1 = L.CheckAny<ushort>(1);
				result = SDL2.SDL.SDL_AUDIO_ISBIGENDIAN(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_AUDIO_ISBIGENDIAN args is error");
			return 1;
        }
        
        private static int SDL_AUDIO_ISSIGNED(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<ushort>(1))
			{
				bool result;
				var arg1 = L.CheckAny<ushort>(1);
				result = SDL2.SDL.SDL_AUDIO_ISSIGNED(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_AUDIO_ISSIGNED args is error");
			return 1;
        }
        
        private static int SDL_AUDIO_ISINT(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<ushort>(1))
			{
				bool result;
				var arg1 = L.CheckAny<ushort>(1);
				result = SDL2.SDL.SDL_AUDIO_ISINT(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_AUDIO_ISINT args is error");
			return 1;
        }
        
        private static int SDL_GameControllerHasButton(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_GameControllerButton>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_GameControllerButton>(2);
				result = SDL2.SDL.SDL_GameControllerHasButton(arg1, arg2);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerHasButton args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetNumTouchpads(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GameControllerGetNumTouchpads(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetNumTouchpads args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetNumTouchpadFingers(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_GameControllerGetNumTouchpadFingers(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetNumTouchpadFingers args is error");
			return 1;
        }
        
        private static int SDL_GameControllerHasSensor(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_SensorType>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_SensorType>(2);
				result = SDL2.SDL.SDL_GameControllerHasSensor(arg1, arg2);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerHasSensor args is error");
			return 1;
        }
        
        private static int SDL_GameControllerSetSensorEnabled(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_SensorType, SDL2.SDL.SDL_bool>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_SensorType>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_bool>(3);
				result = SDL2.SDL.SDL_GameControllerSetSensorEnabled(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerSetSensorEnabled args is error");
			return 1;
        }
        
        private static int SDL_GameControllerIsSensorEnabled(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_SensorType>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_SensorType>(2);
				result = SDL2.SDL.SDL_GameControllerIsSensorEnabled(arg1, arg2);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerIsSensorEnabled args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetSensorData(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_SensorType, System.IntPtr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_SensorType>(2);
				var arg3 = L.CheckAny<System.IntPtr>(3);
				var arg4 = L.CheckAny<int>(4);
				result = SDL2.SDL.SDL_GameControllerGetSensorData(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetSensorData args is error");
			return 1;
        }
        
        private static int SDL_HapticClose(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_HapticClose(arg1);
				return 0;
			}
			L.L_Error("call function SDL_HapticClose args is error");
			return 1;
        }
        
        private static int SDL_HapticDestroyEffect(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				SDL2.SDL.SDL_HapticDestroyEffect(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_HapticDestroyEffect args is error");
			return 1;
        }
        
        private static int SDL_HapticGetEffectStatus(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_HapticGetEffectStatus(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticGetEffectStatus args is error");
			return 1;
        }
        
        private static int SDL_HapticIndex(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_HapticIndex(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticIndex args is error");
			return 1;
        }
        
        private static int SDL_HapticName(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				string result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_HapticName(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticName args is error");
			return 1;
        }
        
        private static int SDL_HapticNumAxes(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_HapticNumAxes(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticNumAxes args is error");
			return 1;
        }
        
        private static int SDL_HapticNumEffects(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_HapticNumEffects(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticNumEffects args is error");
			return 1;
        }
        
        private static int SDL_HapticNumEffectsPlaying(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_HapticNumEffectsPlaying(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticNumEffectsPlaying args is error");
			return 1;
        }
        
        private static int SDL_HapticOpen(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_HapticOpen(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticOpen args is error");
			return 1;
        }
        
        private static int SDL_HapticOpened(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_HapticOpened(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticOpened args is error");
			return 1;
        }
        
        private static int SDL_HapticOpenFromJoystick(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_HapticOpenFromJoystick(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticOpenFromJoystick args is error");
			return 1;
        }
        
        private static int SDL_HapticOpenFromMouse(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				System.IntPtr result;
				result = SDL2.SDL.SDL_HapticOpenFromMouse();
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticOpenFromMouse args is error");
			return 1;
        }
        
        private static int SDL_HapticPause(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_HapticPause(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticPause args is error");
			return 1;
        }
        
        private static int SDL_HapticQuery(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_HapticQuery(arg1);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticQuery args is error");
			return 1;
        }
        
        private static int SDL_HapticRumbleInit(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_HapticRumbleInit(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticRumbleInit args is error");
			return 1;
        }
        
        private static int SDL_HapticRumblePlay(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, float, uint>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<float>(2);
				var arg3 = L.CheckAny<uint>(3);
				result = SDL2.SDL.SDL_HapticRumblePlay(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticRumblePlay args is error");
			return 1;
        }
        
        private static int SDL_HapticRumbleStop(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_HapticRumbleStop(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticRumbleStop args is error");
			return 1;
        }
        
        private static int SDL_HapticRumbleSupported(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_HapticRumbleSupported(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_HapticRumbleSupported args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetProduct(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				ushort result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GameControllerGetProduct(arg1);
				L.PushAny<ushort>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetProduct args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetProductVersion(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				ushort result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GameControllerGetProductVersion(arg1);
				L.PushAny<ushort>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetProductVersion args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetSerial(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				string result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GameControllerGetSerial(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetSerial args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetAttached(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GameControllerGetAttached(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetAttached args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetJoystick(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GameControllerGetJoystick(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetJoystick args is error");
			return 1;
        }
        
        private static int SDL_GameControllerEventState(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GameControllerEventState(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerEventState args is error");
			return 1;
        }
        
        private static int SDL_GameControllerUpdate(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_GameControllerUpdate();
				return 0;
			}
			L.L_Error("call function SDL_GameControllerUpdate args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetAxisFromString(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				SDL2.SDL.SDL_GameControllerAxis result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_GameControllerGetAxisFromString(arg1);
				L.PushAny<SDL2.SDL.SDL_GameControllerAxis>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetAxisFromString args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetStringForAxis(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_GameControllerAxis>(1))
			{
				string result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_GameControllerAxis>(1);
				result = SDL2.SDL.SDL_GameControllerGetStringForAxis(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetStringForAxis args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetBindForAxis(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_GameControllerAxis>(1))
			{
				SDL2.SDL.SDL_GameControllerButtonBind result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_GameControllerAxis>(2);
				result = SDL2.SDL.SDL_GameControllerGetBindForAxis(arg1, arg2);
				L.PushAny<SDL2.SDL.SDL_GameControllerButtonBind>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetBindForAxis args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetAxis(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_GameControllerAxis>(1))
			{
				short result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_GameControllerAxis>(2);
				result = SDL2.SDL.SDL_GameControllerGetAxis(arg1, arg2);
				L.PushAny<short>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetAxis args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetButtonFromString(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				SDL2.SDL.SDL_GameControllerButton result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_GameControllerGetButtonFromString(arg1);
				L.PushAny<SDL2.SDL.SDL_GameControllerButton>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetButtonFromString args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetStringForButton(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_GameControllerButton>(1))
			{
				string result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_GameControllerButton>(1);
				result = SDL2.SDL.SDL_GameControllerGetStringForButton(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetStringForButton args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetBindForButton(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_GameControllerButton>(1))
			{
				SDL2.SDL.SDL_GameControllerButtonBind result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_GameControllerButton>(2);
				result = SDL2.SDL.SDL_GameControllerGetBindForButton(arg1, arg2);
				L.PushAny<SDL2.SDL.SDL_GameControllerButtonBind>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetBindForButton args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetButton(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_GameControllerButton>(1))
			{
				byte result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_GameControllerButton>(2);
				result = SDL2.SDL.SDL_GameControllerGetButton(arg1, arg2);
				L.PushAny<byte>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetButton args is error");
			return 1;
        }
        
        private static int SDL_GameControllerRumble(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, ushort, ushort, uint>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<ushort>(2);
				var arg3 = L.CheckAny<ushort>(3);
				var arg4 = L.CheckAny<uint>(4);
				result = SDL2.SDL.SDL_GameControllerRumble(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerRumble args is error");
			return 1;
        }
        
        private static int SDL_GameControllerRumbleTriggers(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, ushort, ushort, uint>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<ushort>(2);
				var arg3 = L.CheckAny<ushort>(3);
				var arg4 = L.CheckAny<uint>(4);
				result = SDL2.SDL.SDL_GameControllerRumbleTriggers(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerRumbleTriggers args is error");
			return 1;
        }
        
        private static int SDL_GameControllerClose(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_GameControllerClose(arg1);
				return 0;
			}
			L.L_Error("call function SDL_GameControllerClose args is error");
			return 1;
        }
        
        private static int SDL_GameControllerFromInstanceID(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GameControllerFromInstanceID(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerFromInstanceID args is error");
			return 1;
        }
        
        private static int SDL_GameControllerTypeForIndex(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				SDL2.SDL.SDL_GameControllerType result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GameControllerTypeForIndex(arg1);
				L.PushAny<SDL2.SDL.SDL_GameControllerType>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerTypeForIndex args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				SDL2.SDL.SDL_GameControllerType result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GameControllerGetType(arg1);
				L.PushAny<SDL2.SDL.SDL_GameControllerType>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetType args is error");
			return 1;
        }
        
        private static int SDL_GameControllerFromPlayerIndex(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GameControllerFromPlayerIndex(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerFromPlayerIndex args is error");
			return 1;
        }
        
        private static int SDL_GameControllerSetPlayerIndex(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				SDL2.SDL.SDL_GameControllerSetPlayerIndex(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_GameControllerSetPlayerIndex args is error");
			return 1;
        }
        
        private static int SDL_GameControllerHasLED(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GameControllerHasLED(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerHasLED args is error");
			return 1;
        }
        
        private static int SDL_GameControllerSetLED(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, byte, byte, byte>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<byte>(2);
				var arg3 = L.CheckAny<byte>(3);
				var arg4 = L.CheckAny<byte>(4);
				result = SDL2.SDL.SDL_GameControllerSetLED(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerSetLED args is error");
			return 1;
        }
        
        private static int SDL_GameControllerHasAxis(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_GameControllerAxis>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_GameControllerAxis>(2);
				result = SDL2.SDL.SDL_GameControllerHasAxis(arg1, arg2);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerHasAxis args is error");
			return 1;
        }
        
        private static int SDL_JoystickFromInstanceID(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_JoystickFromInstanceID(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickFromInstanceID args is error");
			return 1;
        }
        
        private static int SDL_LockJoysticks(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_LockJoysticks();
				return 0;
			}
			L.L_Error("call function SDL_LockJoysticks args is error");
			return 1;
        }
        
        private static int SDL_UnlockJoysticks(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_UnlockJoysticks();
				return 0;
			}
			L.L_Error("call function SDL_UnlockJoysticks args is error");
			return 1;
        }
        
        private static int SDL_JoystickFromPlayerIndex(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_JoystickFromPlayerIndex(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickFromPlayerIndex args is error");
			return 1;
        }
        
        private static int SDL_JoystickSetPlayerIndex(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				SDL2.SDL.SDL_JoystickSetPlayerIndex(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_JoystickSetPlayerIndex args is error");
			return 1;
        }
        
        private static int SDL_JoystickAttachVirtual(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<int, int, int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<int>(4);
				result = SDL2.SDL.SDL_JoystickAttachVirtual(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickAttachVirtual args is error");
			return 1;
        }
        
        private static int SDL_JoystickDetachVirtual(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_JoystickDetachVirtual(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickDetachVirtual args is error");
			return 1;
        }
        
        private static int SDL_JoystickIsVirtual(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_JoystickIsVirtual(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickIsVirtual args is error");
			return 1;
        }
        
        private static int SDL_JoystickSetVirtualAxis(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, short>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<short>(3);
				result = SDL2.SDL.SDL_JoystickSetVirtualAxis(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickSetVirtualAxis args is error");
			return 1;
        }
        
        private static int SDL_JoystickSetVirtualButton(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, byte>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<byte>(3);
				result = SDL2.SDL.SDL_JoystickSetVirtualButton(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickSetVirtualButton args is error");
			return 1;
        }
        
        private static int SDL_JoystickSetVirtualHat(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, byte>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<byte>(3);
				result = SDL2.SDL.SDL_JoystickSetVirtualHat(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickSetVirtualHat args is error");
			return 1;
        }
        
        private static int SDL_JoystickHasLED(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickHasLED(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickHasLED args is error");
			return 1;
        }
        
        private static int SDL_JoystickSetLED(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, byte, byte, byte>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<byte>(2);
				var arg3 = L.CheckAny<byte>(3);
				var arg4 = L.CheckAny<byte>(4);
				result = SDL2.SDL.SDL_JoystickSetLED(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickSetLED args is error");
			return 1;
        }
        
        private static int SDL_GameControllerAddMapping(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				int result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_GameControllerAddMapping(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerAddMapping args is error");
			return 1;
        }
        
        private static int SDL_GameControllerNumMappings(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_GameControllerNumMappings();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerNumMappings args is error");
			return 1;
        }
        
        private static int SDL_GameControllerMappingForIndex(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				string result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GameControllerMappingForIndex(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerMappingForIndex args is error");
			return 1;
        }
        
        private static int SDL_GameControllerAddMappingsFromFile(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				int result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_GameControllerAddMappingsFromFile(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerAddMappingsFromFile args is error");
			return 1;
        }
        
        private static int SDL_GameControllerMappingForGUID(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.Guid>(1))
			{
				string result;
				var arg1 = L.CheckAny<System.Guid>(1);
				result = SDL2.SDL.SDL_GameControllerMappingForGUID(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerMappingForGUID args is error");
			return 1;
        }
        
        private static int SDL_GameControllerMapping(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				string result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GameControllerMapping(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerMapping args is error");
			return 1;
        }
        
        private static int SDL_IsGameController(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_IsGameController(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_IsGameController args is error");
			return 1;
        }
        
        private static int SDL_GameControllerNameForIndex(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				string result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GameControllerNameForIndex(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerNameForIndex args is error");
			return 1;
        }
        
        private static int SDL_GameControllerMappingForDeviceIndex(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				string result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GameControllerMappingForDeviceIndex(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerMappingForDeviceIndex args is error");
			return 1;
        }
        
        private static int SDL_GameControllerOpen(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GameControllerOpen(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerOpen args is error");
			return 1;
        }
        
        private static int SDL_GameControllerName(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				string result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GameControllerName(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerName args is error");
			return 1;
        }
        
        private static int SDL_GameControllerGetVendor(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				ushort result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GameControllerGetVendor(arg1);
				L.PushAny<ushort>(result);
				return 1;
			}
			L.L_Error("call function SDL_GameControllerGetVendor args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetHat(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				byte result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_JoystickGetHat(arg1, arg2);
				L.PushAny<byte>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetHat args is error");
			return 1;
        }
        
        private static int SDL_JoystickName(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				string result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickName(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickName args is error");
			return 1;
        }
        
        private static int SDL_JoystickNameForIndex(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				string result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_JoystickNameForIndex(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickNameForIndex args is error");
			return 1;
        }
        
        private static int SDL_JoystickNumAxes(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickNumAxes(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickNumAxes args is error");
			return 1;
        }
        
        private static int SDL_JoystickNumBalls(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickNumBalls(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickNumBalls args is error");
			return 1;
        }
        
        private static int SDL_JoystickNumButtons(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickNumButtons(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickNumButtons args is error");
			return 1;
        }
        
        private static int SDL_JoystickNumHats(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickNumHats(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickNumHats args is error");
			return 1;
        }
        
        private static int SDL_JoystickOpen(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_JoystickOpen(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickOpen args is error");
			return 1;
        }
        
        private static int SDL_JoystickUpdate(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_JoystickUpdate();
				return 0;
			}
			L.L_Error("call function SDL_JoystickUpdate args is error");
			return 1;
        }
        
        private static int SDL_NumJoysticks(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_NumJoysticks();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_NumJoysticks args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetDeviceGUID(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				System.Guid result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_JoystickGetDeviceGUID(arg1);
				L.PushAny<System.Guid>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetDeviceGUID args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetGUID(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.Guid result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickGetGUID(arg1);
				L.PushAny<System.Guid>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetGUID args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetGUIDString(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.Guid, byte[], int>(1))
			{
				var arg1 = L.CheckAny<System.Guid>(1);
				var arg2 = L.CheckAny<byte[]>(2);
				var arg3 = L.CheckAny<int>(3);
				SDL2.SDL.SDL_JoystickGetGUIDString(arg1, arg2, arg3);
				return 0;
			}
			L.L_Error("call function SDL_JoystickGetGUIDString args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetGUIDFromString(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				System.Guid result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_JoystickGetGUIDFromString(arg1);
				L.PushAny<System.Guid>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetGUIDFromString args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetDeviceVendor(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				ushort result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_JoystickGetDeviceVendor(arg1);
				L.PushAny<ushort>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetDeviceVendor args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetDeviceProduct(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				ushort result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_JoystickGetDeviceProduct(arg1);
				L.PushAny<ushort>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetDeviceProduct args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetDeviceProductVersion(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				ushort result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_JoystickGetDeviceProductVersion(arg1);
				L.PushAny<ushort>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetDeviceProductVersion args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetDeviceType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				SDL2.SDL.SDL_JoystickType result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_JoystickGetDeviceType(arg1);
				L.PushAny<SDL2.SDL.SDL_JoystickType>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetDeviceType args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetDeviceInstanceID(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_JoystickGetDeviceInstanceID(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetDeviceInstanceID args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetVendor(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				ushort result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickGetVendor(arg1);
				L.PushAny<ushort>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetVendor args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetProduct(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				ushort result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickGetProduct(arg1);
				L.PushAny<ushort>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetProduct args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetProductVersion(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				ushort result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickGetProductVersion(arg1);
				L.PushAny<ushort>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetProductVersion args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetSerial(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				string result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickGetSerial(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetSerial args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				SDL2.SDL.SDL_JoystickType result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickGetType(arg1);
				L.PushAny<SDL2.SDL.SDL_JoystickType>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetType args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetAttached(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickGetAttached(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetAttached args is error");
			return 1;
        }
        
        private static int SDL_JoystickInstanceID(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickInstanceID(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickInstanceID args is error");
			return 1;
        }
        
        private static int SDL_JoystickCurrentPowerLevel(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				SDL2.SDL.SDL_JoystickPowerLevel result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_JoystickCurrentPowerLevel(arg1);
				L.PushAny<SDL2.SDL.SDL_JoystickPowerLevel>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickCurrentPowerLevel args is error");
			return 1;
        }
        
        private static int SDL_GetGlobalMouseState(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, System.IntPtr>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				result = SDL2.SDL.SDL_GetGlobalMouseState(arg1, arg2);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetGlobalMouseState args is error");
			return 1;
        }
        
        private static int SDL_WarpMouseInWindow(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, int>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				SDL2.SDL.SDL_WarpMouseInWindow(arg1, arg2, arg3);
				return 0;
			}
			L.L_Error("call function SDL_WarpMouseInWindow args is error");
			return 1;
        }
        
        private static int SDL_WarpMouseGlobal(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_WarpMouseGlobal(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_WarpMouseGlobal args is error");
			return 1;
        }
        
        private static int SDL_SetRelativeMouseMode(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_bool>(1))
			{
				int result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_bool>(1);
				result = SDL2.SDL.SDL_SetRelativeMouseMode(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetRelativeMouseMode args is error");
			return 1;
        }
        
        private static int SDL_CaptureMouse(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_bool>(1))
			{
				int result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_bool>(1);
				result = SDL2.SDL.SDL_CaptureMouse(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_CaptureMouse args is error");
			return 1;
        }
        
        private static int SDL_GetRelativeMouseMode(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_GetRelativeMouseMode();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetRelativeMouseMode args is error");
			return 1;
        }
        
        private static int SDL_CreateCursor(UniLua.ILuaState L)
        {
			if(L.CheckNum(6) && L.CheckType<System.IntPtr, System.IntPtr, int, int, int, int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<int>(4);
				var arg5 = L.CheckAny<int>(5);
				var arg6 = L.CheckAny<int>(6);
				result = SDL2.SDL.SDL_CreateCursor(arg1, arg2, arg3, arg4, arg5, arg6);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_CreateCursor args is error");
			return 1;
        }
        
        private static int SDL_CreateColorCursor(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_CreateColorCursor(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_CreateColorCursor args is error");
			return 1;
        }
        
        private static int SDL_CreateSystemCursor(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_SystemCursor>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_SystemCursor>(1);
				result = SDL2.SDL.SDL_CreateSystemCursor(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_CreateSystemCursor args is error");
			return 1;
        }
        
        private static int SDL_SetCursor(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_SetCursor(arg1);
				return 0;
			}
			L.L_Error("call function SDL_SetCursor args is error");
			return 1;
        }
        
        private static int SDL_GetCursor(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				System.IntPtr result;
				result = SDL2.SDL.SDL_GetCursor();
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetCursor args is error");
			return 1;
        }
        
        private static int SDL_FreeCursor(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_FreeCursor(arg1);
				return 0;
			}
			L.L_Error("call function SDL_FreeCursor args is error");
			return 1;
        }
        
        private static int SDL_ShowCursor(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_ShowCursor(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_ShowCursor args is error");
			return 1;
        }
        
        private static int SDL_BUTTON(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				uint result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_BUTTON(arg1);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_BUTTON args is error");
			return 1;
        }
        
        private static int SDL_GetNumTouchDevices(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_GetNumTouchDevices();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetNumTouchDevices args is error");
			return 1;
        }
        
        private static int SDL_GetTouchDevice(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				long result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GetTouchDevice(arg1);
				L.PushAny<long>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetTouchDevice args is error");
			return 1;
        }
        
        private static int SDL_GetNumTouchFingers(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<long>(1))
			{
				int result;
				var arg1 = L.CheckAny<long>(1);
				result = SDL2.SDL.SDL_GetNumTouchFingers(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetNumTouchFingers args is error");
			return 1;
        }
        
        private static int SDL_GetTouchFinger(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<long, int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<long>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_GetTouchFinger(arg1, arg2);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetTouchFinger args is error");
			return 1;
        }
        
        private static int SDL_GetTouchDeviceType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<long>(1))
			{
				SDL2.SDL.SDL_TouchDeviceType result;
				var arg1 = L.CheckAny<long>(1);
				result = SDL2.SDL.SDL_GetTouchDeviceType(arg1);
				L.PushAny<SDL2.SDL.SDL_TouchDeviceType>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetTouchDeviceType args is error");
			return 1;
        }
        
        private static int SDL_JoystickRumble(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, ushort, ushort, uint>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<ushort>(2);
				var arg3 = L.CheckAny<ushort>(3);
				var arg4 = L.CheckAny<uint>(4);
				result = SDL2.SDL.SDL_JoystickRumble(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickRumble args is error");
			return 1;
        }
        
        private static int SDL_JoystickRumbleTriggers(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, ushort, ushort, uint>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<ushort>(2);
				var arg3 = L.CheckAny<ushort>(3);
				var arg4 = L.CheckAny<uint>(4);
				result = SDL2.SDL.SDL_JoystickRumbleTriggers(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickRumbleTriggers args is error");
			return 1;
        }
        
        private static int SDL_JoystickClose(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_JoystickClose(arg1);
				return 0;
			}
			L.L_Error("call function SDL_JoystickClose args is error");
			return 1;
        }
        
        private static int SDL_JoystickEventState(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_JoystickEventState(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickEventState args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetAxis(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				short result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_JoystickGetAxis(arg1, arg2);
				L.PushAny<short>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetAxis args is error");
			return 1;
        }
        
        private static int SDL_JoystickGetButton(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				byte result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_JoystickGetButton(arg1, arg2);
				L.PushAny<byte>(result);
				return 1;
			}
			L.L_Error("call function SDL_JoystickGetButton args is error");
			return 1;
        }
        
        private static int SDL_FilterEvents(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SDL2.SDL.SDL_EventFilter, System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<SDL2.SDL.SDL_EventFilter>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				SDL2.SDL.SDL_FilterEvents(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_FilterEvents args is error");
			return 1;
        }
        
        private static int SDL_EventState(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SDL2.SDL.SDL_EventType, int>(1))
			{
				byte result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_EventType>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_EventState(arg1, arg2);
				L.PushAny<byte>(result);
				return 1;
			}
			L.L_Error("call function SDL_EventState args is error");
			return 1;
        }
        
        private static int SDL_GetEventState(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_EventType>(1))
			{
				byte result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_EventType>(1);
				result = SDL2.SDL.SDL_GetEventState(arg1);
				L.PushAny<byte>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetEventState args is error");
			return 1;
        }
        
        private static int SDL_RegisterEvents(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				uint result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_RegisterEvents(arg1);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_RegisterEvents args is error");
			return 1;
        }
        
        private static int SDL_SCANCODE_TO_KEYCODE(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_Scancode>(1))
			{
				SDL2.SDL.SDL_Keycode result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_Scancode>(1);
				result = SDL2.SDL.SDL_SCANCODE_TO_KEYCODE(arg1);
				L.PushAny<SDL2.SDL.SDL_Keycode>(result);
				return 1;
			}
			L.L_Error("call function SDL_SCANCODE_TO_KEYCODE args is error");
			return 1;
        }
        
        private static int SDL_GetKeyboardFocus(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				System.IntPtr result;
				result = SDL2.SDL.SDL_GetKeyboardFocus();
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetKeyboardFocus args is error");
			return 1;
        }
        
        private static int SDL_GetModState(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_Keymod result;
				result = SDL2.SDL.SDL_GetModState();
				L.PushAny<SDL2.SDL.SDL_Keymod>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetModState args is error");
			return 1;
        }
        
        private static int SDL_SetModState(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_Keymod>(1))
			{
				var arg1 = L.CheckAny<SDL2.SDL.SDL_Keymod>(1);
				SDL2.SDL.SDL_SetModState(arg1);
				return 0;
			}
			L.L_Error("call function SDL_SetModState args is error");
			return 1;
        }
        
        private static int SDL_GetKeyFromScancode(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_Scancode>(1))
			{
				SDL2.SDL.SDL_Keycode result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_Scancode>(1);
				result = SDL2.SDL.SDL_GetKeyFromScancode(arg1);
				L.PushAny<SDL2.SDL.SDL_Keycode>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetKeyFromScancode args is error");
			return 1;
        }
        
        private static int SDL_GetScancodeFromKey(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_Keycode>(1))
			{
				SDL2.SDL.SDL_Scancode result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_Keycode>(1);
				result = SDL2.SDL.SDL_GetScancodeFromKey(arg1);
				L.PushAny<SDL2.SDL.SDL_Scancode>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetScancodeFromKey args is error");
			return 1;
        }
        
        private static int SDL_GetScancodeName(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_Scancode>(1))
			{
				string result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_Scancode>(1);
				result = SDL2.SDL.SDL_GetScancodeName(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetScancodeName args is error");
			return 1;
        }
        
        private static int SDL_GetScancodeFromName(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				SDL2.SDL.SDL_Scancode result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_GetScancodeFromName(arg1);
				L.PushAny<SDL2.SDL.SDL_Scancode>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetScancodeFromName args is error");
			return 1;
        }
        
        private static int SDL_GetKeyName(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_Keycode>(1))
			{
				string result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_Keycode>(1);
				result = SDL2.SDL.SDL_GetKeyName(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetKeyName args is error");
			return 1;
        }
        
        private static int SDL_GetKeyFromName(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				SDL2.SDL.SDL_Keycode result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_GetKeyFromName(arg1);
				L.PushAny<SDL2.SDL.SDL_Keycode>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetKeyFromName args is error");
			return 1;
        }
        
        private static int SDL_StartTextInput(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_StartTextInput();
				return 0;
			}
			L.L_Error("call function SDL_StartTextInput args is error");
			return 1;
        }
        
        private static int SDL_IsTextInputActive(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_IsTextInputActive();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_IsTextInputActive args is error");
			return 1;
        }
        
        private static int SDL_StopTextInput(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_StopTextInput();
				return 0;
			}
			L.L_Error("call function SDL_StopTextInput args is error");
			return 1;
        }
        
        private static int SDL_HasScreenKeyboardSupport(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_HasScreenKeyboardSupport();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasScreenKeyboardSupport args is error");
			return 1;
        }
        
        private static int SDL_IsScreenKeyboardShown(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_IsScreenKeyboardShown(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_IsScreenKeyboardShown args is error");
			return 1;
        }
        
        private static int SDL_GetMouseFocus(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				System.IntPtr result;
				result = SDL2.SDL.SDL_GetMouseFocus();
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetMouseFocus args is error");
			return 1;
        }
        
        private static int SDL_GetMouseState(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, System.IntPtr>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				result = SDL2.SDL.SDL_GetMouseState(arg1, arg2);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetMouseState args is error");
			return 1;
        }
        
        private static int SDL_SetSurfaceBlendMode(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_BlendMode>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_BlendMode>(2);
				result = SDL2.SDL.SDL_SetSurfaceBlendMode(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetSurfaceBlendMode args is error");
			return 1;
        }
        
        private static int SDL_SetSurfaceColorMod(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, byte, byte, byte>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<byte>(2);
				var arg3 = L.CheckAny<byte>(3);
				var arg4 = L.CheckAny<byte>(4);
				result = SDL2.SDL.SDL_SetSurfaceColorMod(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetSurfaceColorMod args is error");
			return 1;
        }
        
        private static int SDL_SetSurfacePalette(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				result = SDL2.SDL.SDL_SetSurfacePalette(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetSurfacePalette args is error");
			return 1;
        }
        
        private static int SDL_SetSurfaceRLE(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_SetSurfaceRLE(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetSurfaceRLE args is error");
			return 1;
        }
        
        private static int SDL_HasSurfaceRLE(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_HasSurfaceRLE(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasSurfaceRLE args is error");
			return 1;
        }
        
        private static int SDL_UnlockSurface(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_UnlockSurface(arg1);
				return 0;
			}
			L.L_Error("call function SDL_UnlockSurface args is error");
			return 1;
        }
        
        private static int SDL_DuplicateSurface(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_DuplicateSurface(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_DuplicateSurface args is error");
			return 1;
        }
        
        private static int SDL_HasClipboardText(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_HasClipboardText();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasClipboardText args is error");
			return 1;
        }
        
        private static int SDL_GetClipboardText(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				string result;
				result = SDL2.SDL.SDL_GetClipboardText();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetClipboardText args is error");
			return 1;
        }
        
        private static int SDL_SetClipboardText(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				int result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_SetClipboardText(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetClipboardText args is error");
			return 1;
        }
        
        private static int SDL_PumpEvents(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_PumpEvents();
				return 0;
			}
			L.L_Error("call function SDL_PumpEvents args is error");
			return 1;
        }
        
        private static int SDL_HasEvent(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_EventType>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_EventType>(1);
				result = SDL2.SDL.SDL_HasEvent(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasEvent args is error");
			return 1;
        }
        
        private static int SDL_HasEvents(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SDL2.SDL.SDL_EventType, SDL2.SDL.SDL_EventType>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_EventType>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_EventType>(2);
				result = SDL2.SDL.SDL_HasEvents(arg1, arg2);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasEvents args is error");
			return 1;
        }
        
        private static int SDL_FlushEvent(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_EventType>(1))
			{
				var arg1 = L.CheckAny<SDL2.SDL.SDL_EventType>(1);
				SDL2.SDL.SDL_FlushEvent(arg1);
				return 0;
			}
			L.L_Error("call function SDL_FlushEvent args is error");
			return 1;
        }
        
        private static int SDL_FlushEvents(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SDL2.SDL.SDL_EventType, SDL2.SDL.SDL_EventType>(1))
			{
				var arg1 = L.CheckAny<SDL2.SDL.SDL_EventType>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_EventType>(2);
				SDL2.SDL.SDL_FlushEvents(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_FlushEvents args is error");
			return 1;
        }
        
        private static int SDL_SetEventFilter(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SDL2.SDL.SDL_EventFilter, System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<SDL2.SDL.SDL_EventFilter>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				SDL2.SDL.SDL_SetEventFilter(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_SetEventFilter args is error");
			return 1;
        }
        
        private static int SDL_AddEventWatch(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SDL2.SDL.SDL_EventFilter, System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<SDL2.SDL.SDL_EventFilter>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				SDL2.SDL.SDL_AddEventWatch(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_AddEventWatch args is error");
			return 1;
        }
        
        private static int SDL_DelEventWatch(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SDL2.SDL.SDL_EventFilter, System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<SDL2.SDL.SDL_EventFilter>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				SDL2.SDL.SDL_DelEventWatch(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_DelEventWatch args is error");
			return 1;
        }
        
        private static int SDL_BlitScaled(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<System.IntPtr>(3);
				var arg4 = L.CheckAny<System.IntPtr>(4);
				result = SDL2.SDL.SDL_BlitScaled(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_BlitScaled args is error");
			return 1;
        }
        
        private static int SDL_ConvertPixels(UniLua.ILuaState L)
        {
			if(L.CheckNum(8) && L.CheckType<int, int, uint, System.IntPtr, int, uint, System.IntPtr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<uint>(3);
				var arg4 = L.CheckAny<System.IntPtr>(4);
				var arg5 = L.CheckAny<int>(5);
				var arg6 = L.CheckAny<uint>(6);
				var arg7 = L.CheckAny<System.IntPtr>(7);
				var arg8 = L.CheckAny<int>(8);
				result = SDL2.SDL.SDL_ConvertPixels(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_ConvertPixels args is error");
			return 1;
        }
        
        private static int SDL_ConvertSurface(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, System.IntPtr, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<uint>(3);
				result = SDL2.SDL.SDL_ConvertSurface(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_ConvertSurface args is error");
			return 1;
        }
        
        private static int SDL_ConvertSurfaceFormat(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, uint, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<uint>(2);
				var arg3 = L.CheckAny<uint>(3);
				result = SDL2.SDL.SDL_ConvertSurfaceFormat(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_ConvertSurfaceFormat args is error");
			return 1;
        }
        
        private static int SDL_CreateRGBSurface(UniLua.ILuaState L)
        {
			if(L.CheckNum(8) && L.CheckType<uint, int, int, int, uint, uint, uint, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<uint>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<int>(4);
				var arg5 = L.CheckAny<uint>(5);
				var arg6 = L.CheckAny<uint>(6);
				var arg7 = L.CheckAny<uint>(7);
				var arg8 = L.CheckAny<uint>(8);
				result = SDL2.SDL.SDL_CreateRGBSurface(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_CreateRGBSurface args is error");
			return 1;
        }
        
        private static int SDL_CreateRGBSurfaceFrom(UniLua.ILuaState L)
        {
			if(L.CheckNum(9) && L.CheckType<System.IntPtr, int, int, int, int, uint, uint, uint, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<int>(4);
				var arg5 = L.CheckAny<int>(5);
				var arg6 = L.CheckAny<uint>(6);
				var arg7 = L.CheckAny<uint>(7);
				var arg8 = L.CheckAny<uint>(8);
				var arg9 = L.CheckAny<uint>(9);
				result = SDL2.SDL.SDL_CreateRGBSurfaceFrom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_CreateRGBSurfaceFrom args is error");
			return 1;
        }
        
        private static int SDL_CreateRGBSurfaceWithFormat(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<uint, int, int, int, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<uint>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<int>(4);
				var arg5 = L.CheckAny<uint>(5);
				result = SDL2.SDL.SDL_CreateRGBSurfaceWithFormat(arg1, arg2, arg3, arg4, arg5);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_CreateRGBSurfaceWithFormat args is error");
			return 1;
        }
        
        private static int SDL_CreateRGBSurfaceWithFormatFrom(UniLua.ILuaState L)
        {
			if(L.CheckNum(6) && L.CheckType<System.IntPtr, int, int, int, int, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<int>(4);
				var arg5 = L.CheckAny<int>(5);
				var arg6 = L.CheckAny<uint>(6);
				result = SDL2.SDL.SDL_CreateRGBSurfaceWithFormatFrom(arg1, arg2, arg3, arg4, arg5, arg6);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_CreateRGBSurfaceWithFormatFrom args is error");
			return 1;
        }
        
        private static int SDL_FillRect(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, System.IntPtr, uint>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<uint>(3);
				result = SDL2.SDL.SDL_FillRect(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_FillRect args is error");
			return 1;
        }
        
        private static int SDL_FillRects(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_Rect[], int, uint>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_Rect[]>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<uint>(4);
				result = SDL2.SDL.SDL_FillRects(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_FillRects args is error");
			return 1;
        }
        
        private static int SDL_FreeSurface(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_FreeSurface(arg1);
				return 0;
			}
			L.L_Error("call function SDL_FreeSurface args is error");
			return 1;
        }
        
        private static int SDL_HasColorKey(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_HasColorKey(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_HasColorKey args is error");
			return 1;
        }
        
        private static int SDL_LoadBMP(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_LoadBMP(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_LoadBMP args is error");
			return 1;
        }
        
        private static int SDL_LockSurface(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_LockSurface(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_LockSurface args is error");
			return 1;
        }
        
        private static int SDL_SaveBMP(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, string>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				result = SDL2.SDL.SDL_SaveBMP(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SaveBMP args is error");
			return 1;
        }
        
        private static int SDL_SetColorKey(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, uint>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<uint>(3);
				result = SDL2.SDL.SDL_SetColorKey(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetColorKey args is error");
			return 1;
        }
        
        private static int SDL_SetSurfaceAlphaMod(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, byte>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<byte>(2);
				result = SDL2.SDL.SDL_SetSurfaceAlphaMod(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetSurfaceAlphaMod args is error");
			return 1;
        }
        
        private static int SDL_ISPIXELFORMAT_ARRAY(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				bool result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_ISPIXELFORMAT_ARRAY(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_ISPIXELFORMAT_ARRAY args is error");
			return 1;
        }
        
        private static int SDL_ISPIXELFORMAT_ALPHA(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				bool result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_ISPIXELFORMAT_ALPHA(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_ISPIXELFORMAT_ALPHA args is error");
			return 1;
        }
        
        private static int SDL_ISPIXELFORMAT_FOURCC(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				bool result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_ISPIXELFORMAT_FOURCC(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_ISPIXELFORMAT_FOURCC args is error");
			return 1;
        }
        
        private static int SDL_AllocFormat(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_AllocFormat(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_AllocFormat args is error");
			return 1;
        }
        
        private static int SDL_AllocPalette(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_AllocPalette(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_AllocPalette args is error");
			return 1;
        }
        
        private static int SDL_FreeFormat(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_FreeFormat(arg1);
				return 0;
			}
			L.L_Error("call function SDL_FreeFormat args is error");
			return 1;
        }
        
        private static int SDL_FreePalette(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_FreePalette(arg1);
				return 0;
			}
			L.L_Error("call function SDL_FreePalette args is error");
			return 1;
        }
        
        private static int SDL_GetPixelFormatName(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				string result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_GetPixelFormatName(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetPixelFormatName args is error");
			return 1;
        }
        
        private static int SDL_MapRGB(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, byte, byte, byte>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<byte>(2);
				var arg3 = L.CheckAny<byte>(3);
				var arg4 = L.CheckAny<byte>(4);
				result = SDL2.SDL.SDL_MapRGB(arg1, arg2, arg3, arg4);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_MapRGB args is error");
			return 1;
        }
        
        private static int SDL_MapRGBA(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<System.IntPtr, byte, byte, byte, byte>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<byte>(2);
				var arg3 = L.CheckAny<byte>(3);
				var arg4 = L.CheckAny<byte>(4);
				var arg5 = L.CheckAny<byte>(5);
				result = SDL2.SDL.SDL_MapRGBA(arg1, arg2, arg3, arg4, arg5);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_MapRGBA args is error");
			return 1;
        }
        
        private static int SDL_MasksToPixelFormatEnum(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<int, uint, uint, uint, uint>(1))
			{
				uint result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<uint>(2);
				var arg3 = L.CheckAny<uint>(3);
				var arg4 = L.CheckAny<uint>(4);
				var arg5 = L.CheckAny<uint>(5);
				result = SDL2.SDL.SDL_MasksToPixelFormatEnum(arg1, arg2, arg3, arg4, arg5);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_MasksToPixelFormatEnum args is error");
			return 1;
        }
        
        private static int SDL_SetPaletteColors(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_Color[], int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_Color[]>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<int>(4);
				result = SDL2.SDL.SDL_SetPaletteColors(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetPaletteColors args is error");
			return 1;
        }
        
        private static int SDL_SetPixelFormatPalette(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				result = SDL2.SDL.SDL_SetPixelFormatPalette(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetPixelFormatPalette args is error");
			return 1;
        }
        
        private static int SDL_MUSTLOCK(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				bool result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_MUSTLOCK(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_MUSTLOCK args is error");
			return 1;
        }
        
        private static int SDL_BlitSurface(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<System.IntPtr>(3);
				var arg4 = L.CheckAny<System.IntPtr>(4);
				result = SDL2.SDL.SDL_BlitSurface(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_BlitSurface args is error");
			return 1;
        }
        
        private static int SDL_RenderPresent(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_RenderPresent(arg1);
				return 0;
			}
			L.L_Error("call function SDL_RenderPresent args is error");
			return 1;
        }
        
        private static int SDL_RenderSetClipRect(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				result = SDL2.SDL.SDL_RenderSetClipRect(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderSetClipRect args is error");
			return 1;
        }
        
        private static int SDL_RenderSetLogicalSize(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_RenderSetLogicalSize(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderSetLogicalSize args is error");
			return 1;
        }
        
        private static int SDL_RenderSetScale(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, float, float>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<float>(2);
				var arg3 = L.CheckAny<float>(3);
				result = SDL2.SDL.SDL_RenderSetScale(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderSetScale args is error");
			return 1;
        }
        
        private static int SDL_RenderSetIntegerScale(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_bool>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_bool>(2);
				result = SDL2.SDL.SDL_RenderSetIntegerScale(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderSetIntegerScale args is error");
			return 1;
        }
        
        private static int SDL_SetRenderDrawBlendMode(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_BlendMode>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_BlendMode>(2);
				result = SDL2.SDL.SDL_SetRenderDrawBlendMode(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetRenderDrawBlendMode args is error");
			return 1;
        }
        
        private static int SDL_SetRenderDrawColor(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<System.IntPtr, byte, byte, byte, byte>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<byte>(2);
				var arg3 = L.CheckAny<byte>(3);
				var arg4 = L.CheckAny<byte>(4);
				var arg5 = L.CheckAny<byte>(5);
				result = SDL2.SDL.SDL_SetRenderDrawColor(arg1, arg2, arg3, arg4, arg5);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetRenderDrawColor args is error");
			return 1;
        }
        
        private static int SDL_SetRenderTarget(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				result = SDL2.SDL.SDL_SetRenderTarget(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetRenderTarget args is error");
			return 1;
        }
        
        private static int SDL_SetTextureAlphaMod(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, byte>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<byte>(2);
				result = SDL2.SDL.SDL_SetTextureAlphaMod(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetTextureAlphaMod args is error");
			return 1;
        }
        
        private static int SDL_SetTextureBlendMode(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_BlendMode>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_BlendMode>(2);
				result = SDL2.SDL.SDL_SetTextureBlendMode(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetTextureBlendMode args is error");
			return 1;
        }
        
        private static int SDL_SetTextureColorMod(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, byte, byte, byte>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<byte>(2);
				var arg3 = L.CheckAny<byte>(3);
				var arg4 = L.CheckAny<byte>(4);
				result = SDL2.SDL.SDL_SetTextureColorMod(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetTextureColorMod args is error");
			return 1;
        }
        
        private static int SDL_UnlockTexture(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_UnlockTexture(arg1);
				return 0;
			}
			L.L_Error("call function SDL_UnlockTexture args is error");
			return 1;
        }
        
        private static int SDL_UpdateTexture(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, System.IntPtr, System.IntPtr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<System.IntPtr>(3);
				var arg4 = L.CheckAny<int>(4);
				result = SDL2.SDL.SDL_UpdateTexture(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_UpdateTexture args is error");
			return 1;
        }
        
        private static int SDL_RenderTargetSupported(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_RenderTargetSupported(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderTargetSupported args is error");
			return 1;
        }
        
        private static int SDL_GetRenderTarget(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GetRenderTarget(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetRenderTarget args is error");
			return 1;
        }
        
        private static int SDL_RenderGetMetalLayer(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_RenderGetMetalLayer(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderGetMetalLayer args is error");
			return 1;
        }
        
        private static int SDL_RenderGetMetalCommandEncoder(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_RenderGetMetalCommandEncoder(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderGetMetalCommandEncoder args is error");
			return 1;
        }
        
        private static int SDL_RenderIsClipEnabled(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_RenderIsClipEnabled(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderIsClipEnabled args is error");
			return 1;
        }
        
        private static int SDL_RenderFlush(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_RenderFlush(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderFlush args is error");
			return 1;
        }
        
        private static int SDL_DEFINE_PIXELFOURCC(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<byte, byte, byte, byte>(1))
			{
				uint result;
				var arg1 = L.CheckAny<byte>(1);
				var arg2 = L.CheckAny<byte>(2);
				var arg3 = L.CheckAny<byte>(3);
				var arg4 = L.CheckAny<byte>(4);
				result = SDL2.SDL.SDL_DEFINE_PIXELFOURCC(arg1, arg2, arg3, arg4);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_DEFINE_PIXELFOURCC args is error");
			return 1;
        }
        
        private static int SDL_DEFINE_PIXELFORMAT(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<SDL2.SDL.SDL_PixelType, uint, SDL2.SDL.SDL_PackedLayout, byte, byte>(1))
			{
				uint result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_PixelType>(1);
				var arg2 = L.CheckAny<uint>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_PackedLayout>(3);
				var arg4 = L.CheckAny<byte>(4);
				var arg5 = L.CheckAny<byte>(5);
				result = SDL2.SDL.SDL_DEFINE_PIXELFORMAT(arg1, arg2, arg3, arg4, arg5);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_DEFINE_PIXELFORMAT args is error");
			return 1;
        }
        
        private static int SDL_PIXELFLAG(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				byte result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_PIXELFLAG(arg1);
				L.PushAny<byte>(result);
				return 1;
			}
			L.L_Error("call function SDL_PIXELFLAG args is error");
			return 1;
        }
        
        private static int SDL_PIXELTYPE(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				byte result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_PIXELTYPE(arg1);
				L.PushAny<byte>(result);
				return 1;
			}
			L.L_Error("call function SDL_PIXELTYPE args is error");
			return 1;
        }
        
        private static int SDL_PIXELORDER(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				byte result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_PIXELORDER(arg1);
				L.PushAny<byte>(result);
				return 1;
			}
			L.L_Error("call function SDL_PIXELORDER args is error");
			return 1;
        }
        
        private static int SDL_PIXELLAYOUT(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				byte result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_PIXELLAYOUT(arg1);
				L.PushAny<byte>(result);
				return 1;
			}
			L.L_Error("call function SDL_PIXELLAYOUT args is error");
			return 1;
        }
        
        private static int SDL_BITSPERPIXEL(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				byte result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_BITSPERPIXEL(arg1);
				L.PushAny<byte>(result);
				return 1;
			}
			L.L_Error("call function SDL_BITSPERPIXEL args is error");
			return 1;
        }
        
        private static int SDL_BYTESPERPIXEL(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				byte result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_BYTESPERPIXEL(arg1);
				L.PushAny<byte>(result);
				return 1;
			}
			L.L_Error("call function SDL_BYTESPERPIXEL args is error");
			return 1;
        }
        
        private static int SDL_ISPIXELFORMAT_INDEXED(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				bool result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_ISPIXELFORMAT_INDEXED(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_ISPIXELFORMAT_INDEXED args is error");
			return 1;
        }
        
        private static int SDL_ISPIXELFORMAT_PACKED(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				bool result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_ISPIXELFORMAT_PACKED(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_ISPIXELFORMAT_PACKED args is error");
			return 1;
        }
        
        private static int SDL_RenderFillRect(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				result = SDL2.SDL.SDL_RenderFillRect(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderFillRect args is error");
			return 1;
        }
        
        private static int SDL_RenderFillRects(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_Rect[], int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_Rect[]>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_RenderFillRects(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderFillRects args is error");
			return 1;
        }
        
        private static int SDL_RenderCopyF(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<System.IntPtr>(3);
				var arg4 = L.CheckAny<System.IntPtr>(4);
				result = SDL2.SDL.SDL_RenderCopyF(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderCopyF args is error");
			return 1;
        }
        
        private static int SDL_RenderCopyExF(UniLua.ILuaState L)
        {
			if(L.CheckNum(7) && L.CheckType<System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr, double, System.IntPtr, SDL2.SDL.SDL_RendererFlip>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<System.IntPtr>(3);
				var arg4 = L.CheckAny<System.IntPtr>(4);
				var arg5 = L.CheckAny<double>(5);
				var arg6 = L.CheckAny<System.IntPtr>(6);
				var arg7 = L.CheckAny<SDL2.SDL.SDL_RendererFlip>(7);
				result = SDL2.SDL.SDL_RenderCopyExF(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderCopyExF args is error");
			return 1;
        }
        
        private static int SDL_RenderDrawPointF(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, float, float>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<float>(2);
				var arg3 = L.CheckAny<float>(3);
				result = SDL2.SDL.SDL_RenderDrawPointF(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderDrawPointF args is error");
			return 1;
        }
        
        private static int SDL_RenderDrawPointsF(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_FPoint[], int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_FPoint[]>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_RenderDrawPointsF(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderDrawPointsF args is error");
			return 1;
        }
        
        private static int SDL_RenderDrawLineF(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<System.IntPtr, float, float, float, float>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<float>(2);
				var arg3 = L.CheckAny<float>(3);
				var arg4 = L.CheckAny<float>(4);
				var arg5 = L.CheckAny<float>(5);
				result = SDL2.SDL.SDL_RenderDrawLineF(arg1, arg2, arg3, arg4, arg5);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderDrawLineF args is error");
			return 1;
        }
        
        private static int SDL_RenderDrawLinesF(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_FPoint[], int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_FPoint[]>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_RenderDrawLinesF(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderDrawLinesF args is error");
			return 1;
        }
        
        private static int SDL_RenderDrawRectF(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				result = SDL2.SDL.SDL_RenderDrawRectF(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderDrawRectF args is error");
			return 1;
        }
        
        private static int SDL_RenderDrawRectsF(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_FRect[], int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_FRect[]>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_RenderDrawRectsF(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderDrawRectsF args is error");
			return 1;
        }
        
        private static int SDL_RenderFillRectF(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				result = SDL2.SDL.SDL_RenderFillRectF(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderFillRectF args is error");
			return 1;
        }
        
        private static int SDL_RenderFillRectsF(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_FRect[], int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_FRect[]>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_RenderFillRectsF(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderFillRectsF args is error");
			return 1;
        }
        
        private static int SDL_RenderClear(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_RenderClear(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderClear args is error");
			return 1;
        }
        
        private static int SDL_RenderCopy(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<System.IntPtr>(3);
				var arg4 = L.CheckAny<System.IntPtr>(4);
				result = SDL2.SDL.SDL_RenderCopy(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderCopy args is error");
			return 1;
        }
        
        private static int SDL_RenderCopyEx(UniLua.ILuaState L)
        {
			if(L.CheckNum(7) && L.CheckType<System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr, double, System.IntPtr, SDL2.SDL.SDL_RendererFlip>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<System.IntPtr>(3);
				var arg4 = L.CheckAny<System.IntPtr>(4);
				var arg5 = L.CheckAny<double>(5);
				var arg6 = L.CheckAny<System.IntPtr>(6);
				var arg7 = L.CheckAny<SDL2.SDL.SDL_RendererFlip>(7);
				result = SDL2.SDL.SDL_RenderCopyEx(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderCopyEx args is error");
			return 1;
        }
        
        private static int SDL_RenderDrawLine(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<System.IntPtr, int, int, int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<int>(4);
				var arg5 = L.CheckAny<int>(5);
				result = SDL2.SDL.SDL_RenderDrawLine(arg1, arg2, arg3, arg4, arg5);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderDrawLine args is error");
			return 1;
        }
        
        private static int SDL_RenderDrawLines(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_Point[], int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_Point[]>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_RenderDrawLines(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderDrawLines args is error");
			return 1;
        }
        
        private static int SDL_RenderDrawPoint(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_RenderDrawPoint(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderDrawPoint args is error");
			return 1;
        }
        
        private static int SDL_RenderDrawPoints(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_Point[], int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_Point[]>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_RenderDrawPoints(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderDrawPoints args is error");
			return 1;
        }
        
        private static int SDL_RenderDrawRect(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				result = SDL2.SDL.SDL_RenderDrawRect(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderDrawRect args is error");
			return 1;
        }
        
        private static int SDL_RenderDrawRects(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_Rect[], int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_Rect[]>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_RenderDrawRects(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_RenderDrawRects args is error");
			return 1;
        }
        
        private static int SDL_SetWindowHitTest(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_HitTest, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_HitTest>(2);
				var arg3 = L.CheckAny<System.IntPtr>(3);
				result = SDL2.SDL.SDL_SetWindowHitTest(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetWindowHitTest args is error");
			return 1;
        }
        
        private static int SDL_GetGrabbedWindow(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				System.IntPtr result;
				result = SDL2.SDL.SDL_GetGrabbedWindow();
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetGrabbedWindow args is error");
			return 1;
        }
        
        private static int SDL_ComposeCustomBlendMode(UniLua.ILuaState L)
        {
			if(L.CheckNum(6) && L.CheckType<SDL2.SDL.SDL_BlendFactor, SDL2.SDL.SDL_BlendFactor, SDL2.SDL.SDL_BlendOperation, SDL2.SDL.SDL_BlendFactor, SDL2.SDL.SDL_BlendFactor, SDL2.SDL.SDL_BlendOperation>(1))
			{
				SDL2.SDL.SDL_BlendMode result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_BlendFactor>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_BlendFactor>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_BlendOperation>(3);
				var arg4 = L.CheckAny<SDL2.SDL.SDL_BlendFactor>(4);
				var arg5 = L.CheckAny<SDL2.SDL.SDL_BlendFactor>(5);
				var arg6 = L.CheckAny<SDL2.SDL.SDL_BlendOperation>(6);
				result = SDL2.SDL.SDL_ComposeCustomBlendMode(arg1, arg2, arg3, arg4, arg5, arg6);
				L.PushAny<SDL2.SDL.SDL_BlendMode>(result);
				return 1;
			}
			L.L_Error("call function SDL_ComposeCustomBlendMode args is error");
			return 1;
        }
        
        private static int SDL_Vulkan_LoadLibrary(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				int result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_Vulkan_LoadLibrary(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_Vulkan_LoadLibrary args is error");
			return 1;
        }
        
        private static int SDL_Vulkan_GetVkGetInstanceProcAddr(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				System.IntPtr result;
				result = SDL2.SDL.SDL_Vulkan_GetVkGetInstanceProcAddr();
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_Vulkan_GetVkGetInstanceProcAddr args is error");
			return 1;
        }
        
        private static int SDL_Vulkan_UnloadLibrary(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_Vulkan_UnloadLibrary();
				return 0;
			}
			L.L_Error("call function SDL_Vulkan_UnloadLibrary args is error");
			return 1;
        }
        
        private static int SDL_Metal_CreateView(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_Metal_CreateView(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_Metal_CreateView args is error");
			return 1;
        }
        
        private static int SDL_Metal_DestroyView(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_Metal_DestroyView(arg1);
				return 0;
			}
			L.L_Error("call function SDL_Metal_DestroyView args is error");
			return 1;
        }
        
        private static int SDL_Metal_GetLayer(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_Metal_GetLayer(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_Metal_GetLayer args is error");
			return 1;
        }
        
        private static int SDL_CreateRenderer(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, SDL2.SDL.SDL_RendererFlags>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_RendererFlags>(3);
				result = SDL2.SDL.SDL_CreateRenderer(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_CreateRenderer args is error");
			return 1;
        }
        
        private static int SDL_CreateSoftwareRenderer(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_CreateSoftwareRenderer(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_CreateSoftwareRenderer args is error");
			return 1;
        }
        
        private static int SDL_CreateTexture(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<System.IntPtr, uint, int, int, int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<uint>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<int>(4);
				var arg5 = L.CheckAny<int>(5);
				result = SDL2.SDL.SDL_CreateTexture(arg1, arg2, arg3, arg4, arg5);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_CreateTexture args is error");
			return 1;
        }
        
        private static int SDL_CreateTextureFromSurface(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				result = SDL2.SDL.SDL_CreateTextureFromSurface(arg1, arg2);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_CreateTextureFromSurface args is error");
			return 1;
        }
        
        private static int SDL_DestroyRenderer(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_DestroyRenderer(arg1);
				return 0;
			}
			L.L_Error("call function SDL_DestroyRenderer args is error");
			return 1;
        }
        
        private static int SDL_DestroyTexture(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_DestroyTexture(arg1);
				return 0;
			}
			L.L_Error("call function SDL_DestroyTexture args is error");
			return 1;
        }
        
        private static int SDL_GetNumRenderDrivers(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_GetNumRenderDrivers();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetNumRenderDrivers args is error");
			return 1;
        }
        
        private static int SDL_SetTextureScaleMode(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_ScaleMode>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_ScaleMode>(2);
				result = SDL2.SDL.SDL_SetTextureScaleMode(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetTextureScaleMode args is error");
			return 1;
        }
        
        private static int SDL_GetRenderer(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GetRenderer(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetRenderer args is error");
			return 1;
        }
        
        private static int SDL_GL_UnbindTexture(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GL_UnbindTexture(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GL_UnbindTexture args is error");
			return 1;
        }
        
        private static int SDL_HideWindow(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_HideWindow(arg1);
				return 0;
			}
			L.L_Error("call function SDL_HideWindow args is error");
			return 1;
        }
        
        private static int SDL_IsScreenSaverEnabled(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_bool result;
				result = SDL2.SDL.SDL_IsScreenSaverEnabled();
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_IsScreenSaverEnabled args is error");
			return 1;
        }
        
        private static int SDL_MaximizeWindow(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_MaximizeWindow(arg1);
				return 0;
			}
			L.L_Error("call function SDL_MaximizeWindow args is error");
			return 1;
        }
        
        private static int SDL_MinimizeWindow(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_MinimizeWindow(arg1);
				return 0;
			}
			L.L_Error("call function SDL_MinimizeWindow args is error");
			return 1;
        }
        
        private static int SDL_RaiseWindow(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_RaiseWindow(arg1);
				return 0;
			}
			L.L_Error("call function SDL_RaiseWindow args is error");
			return 1;
        }
        
        private static int SDL_RestoreWindow(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_RestoreWindow(arg1);
				return 0;
			}
			L.L_Error("call function SDL_RestoreWindow args is error");
			return 1;
        }
        
        private static int SDL_SetWindowBrightness(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, float>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<float>(2);
				result = SDL2.SDL.SDL_SetWindowBrightness(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetWindowBrightness args is error");
			return 1;
        }
        
        private static int SDL_SetWindowData(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, string, System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<System.IntPtr>(3);
				result = SDL2.SDL.SDL_SetWindowData(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetWindowData args is error");
			return 1;
        }
        
        private static int SDL_SetWindowFullscreen(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, uint>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<uint>(2);
				result = SDL2.SDL.SDL_SetWindowFullscreen(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetWindowFullscreen args is error");
			return 1;
        }
        
        private static int SDL_SetWindowGammaRamp(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, ushort[], ushort[], ushort[]>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<ushort[]>(2);
				var arg3 = L.CheckAny<ushort[]>(3);
				var arg4 = L.CheckAny<ushort[]>(4);
				result = SDL2.SDL.SDL_SetWindowGammaRamp(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetWindowGammaRamp args is error");
			return 1;
        }
        
        private static int SDL_SetWindowGrab(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_bool>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_bool>(2);
				SDL2.SDL.SDL_SetWindowGrab(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_SetWindowGrab args is error");
			return 1;
        }
        
        private static int SDL_SetWindowIcon(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				SDL2.SDL.SDL_SetWindowIcon(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_SetWindowIcon args is error");
			return 1;
        }
        
        private static int SDL_SetWindowMaximumSize(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, int>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				SDL2.SDL.SDL_SetWindowMaximumSize(arg1, arg2, arg3);
				return 0;
			}
			L.L_Error("call function SDL_SetWindowMaximumSize args is error");
			return 1;
        }
        
        private static int SDL_SetWindowMinimumSize(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, int>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				SDL2.SDL.SDL_SetWindowMinimumSize(arg1, arg2, arg3);
				return 0;
			}
			L.L_Error("call function SDL_SetWindowMinimumSize args is error");
			return 1;
        }
        
        private static int SDL_SetWindowPosition(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, int>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				SDL2.SDL.SDL_SetWindowPosition(arg1, arg2, arg3);
				return 0;
			}
			L.L_Error("call function SDL_SetWindowPosition args is error");
			return 1;
        }
        
        private static int SDL_SetWindowSize(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, int>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				SDL2.SDL.SDL_SetWindowSize(arg1, arg2, arg3);
				return 0;
			}
			L.L_Error("call function SDL_SetWindowSize args is error");
			return 1;
        }
        
        private static int SDL_SetWindowBordered(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_bool>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_bool>(2);
				SDL2.SDL.SDL_SetWindowBordered(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_SetWindowBordered args is error");
			return 1;
        }
        
        private static int SDL_SetWindowResizable(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_bool>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_bool>(2);
				SDL2.SDL.SDL_SetWindowResizable(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_SetWindowResizable args is error");
			return 1;
        }
        
        private static int SDL_SetWindowTitle(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, string>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				SDL2.SDL.SDL_SetWindowTitle(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_SetWindowTitle args is error");
			return 1;
        }
        
        private static int SDL_ShowWindow(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_ShowWindow(arg1);
				return 0;
			}
			L.L_Error("call function SDL_ShowWindow args is error");
			return 1;
        }
        
        private static int SDL_UpdateWindowSurface(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_UpdateWindowSurface(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_UpdateWindowSurface args is error");
			return 1;
        }
        
        private static int SDL_UpdateWindowSurfaceRects(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_Rect[], int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_Rect[]>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_UpdateWindowSurfaceRects(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_UpdateWindowSurfaceRects args is error");
			return 1;
        }
        
        private static int SDL_VideoInit(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				int result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_VideoInit(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_VideoInit args is error");
			return 1;
        }
        
        private static int SDL_VideoQuit(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_VideoQuit();
				return 0;
			}
			L.L_Error("call function SDL_VideoQuit args is error");
			return 1;
        }
        
        private static int SDL_GetWindowGrab(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GetWindowGrab(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetWindowGrab args is error");
			return 1;
        }
        
        private static int SDL_GetWindowID(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GetWindowID(arg1);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetWindowID args is error");
			return 1;
        }
        
        private static int SDL_GetWindowPixelFormat(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GetWindowPixelFormat(arg1);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetWindowPixelFormat args is error");
			return 1;
        }
        
        private static int SDL_GetWindowSurface(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GetWindowSurface(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetWindowSurface args is error");
			return 1;
        }
        
        private static int SDL_GetWindowTitle(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				string result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GetWindowTitle(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetWindowTitle args is error");
			return 1;
        }
        
        private static int SDL_GL_CreateContext(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GL_CreateContext(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GL_CreateContext args is error");
			return 1;
        }
        
        private static int SDL_GL_DeleteContext(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_GL_DeleteContext(arg1);
				return 0;
			}
			L.L_Error("call function SDL_GL_DeleteContext args is error");
			return 1;
        }
        
        private static int SDL_GL_LoadLibrary(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				int result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_GL_LoadLibrary(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GL_LoadLibrary args is error");
			return 1;
        }
        
        private static int SDL_GL_GetProcAddress(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GL_GetProcAddress(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			else if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_GL_GetProcAddress(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GL_GetProcAddress args is error");
			return 1;
        }
        
        private static int SDL_GL_UnloadLibrary(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_GL_UnloadLibrary();
				return 0;
			}
			L.L_Error("call function SDL_GL_UnloadLibrary args is error");
			return 1;
        }
        
        private static int SDL_GL_ExtensionSupported(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_GL_ExtensionSupported(arg1);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_GL_ExtensionSupported args is error");
			return 1;
        }
        
        private static int SDL_GL_ResetAttributes(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_GL_ResetAttributes();
				return 0;
			}
			L.L_Error("call function SDL_GL_ResetAttributes args is error");
			return 1;
        }
        
        private static int SDL_GL_GetSwapInterval(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_GL_GetSwapInterval();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GL_GetSwapInterval args is error");
			return 1;
        }
        
        private static int SDL_GL_MakeCurrent(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				result = SDL2.SDL.SDL_GL_MakeCurrent(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GL_MakeCurrent args is error");
			return 1;
        }
        
        private static int SDL_GL_GetCurrentWindow(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				System.IntPtr result;
				result = SDL2.SDL.SDL_GL_GetCurrentWindow();
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GL_GetCurrentWindow args is error");
			return 1;
        }
        
        private static int SDL_GL_GetCurrentContext(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				System.IntPtr result;
				result = SDL2.SDL.SDL_GL_GetCurrentContext();
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GL_GetCurrentContext args is error");
			return 1;
        }
        
        private static int SDL_GL_SetAttribute(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SDL2.SDL.SDL_GLattr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_GLattr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_GL_SetAttribute(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			else if(L.CheckNum(2) && L.CheckType<SDL2.SDL.SDL_GLattr, SDL2.SDL.SDL_GLprofile>(1))
			{
				int result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_GLattr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_GLprofile>(2);
				result = SDL2.SDL.SDL_GL_SetAttribute(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GL_SetAttribute args is error");
			return 1;
        }
        
        private static int SDL_GL_SetSwapInterval(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GL_SetSwapInterval(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GL_SetSwapInterval args is error");
			return 1;
        }
        
        private static int SDL_GL_SwapWindow(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_GL_SwapWindow(arg1);
				return 0;
			}
			L.L_Error("call function SDL_GL_SwapWindow args is error");
			return 1;
        }
        
        private static int SDL_DisableScreenSaver(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_DisableScreenSaver();
				return 0;
			}
			L.L_Error("call function SDL_DisableScreenSaver args is error");
			return 1;
        }
        
        private static int SDL_EnableScreenSaver(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_EnableScreenSaver();
				return 0;
			}
			L.L_Error("call function SDL_EnableScreenSaver args is error");
			return 1;
        }
        
        private static int SDL_GetCurrentVideoDriver(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				string result;
				result = SDL2.SDL.SDL_GetCurrentVideoDriver();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetCurrentVideoDriver args is error");
			return 1;
        }
        
        private static int SDL_GetDisplayName(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				string result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GetDisplayName(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetDisplayName args is error");
			return 1;
        }
        
        private static int SDL_GetDisplayOrientation(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				SDL2.SDL.SDL_DisplayOrientation result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GetDisplayOrientation(arg1);
				L.PushAny<SDL2.SDL.SDL_DisplayOrientation>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetDisplayOrientation args is error");
			return 1;
        }
        
        private static int SDL_GetNumDisplayModes(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GetNumDisplayModes(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetNumDisplayModes args is error");
			return 1;
        }
        
        private static int SDL_GetNumVideoDisplays(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_GetNumVideoDisplays();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetNumVideoDisplays args is error");
			return 1;
        }
        
        private static int SDL_GetNumVideoDrivers(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_GetNumVideoDrivers();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetNumVideoDrivers args is error");
			return 1;
        }
        
        private static int SDL_GetVideoDriver(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				string result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_GetVideoDriver(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetVideoDriver args is error");
			return 1;
        }
        
        private static int SDL_GetWindowBrightness(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				float result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GetWindowBrightness(arg1);
				L.PushAny<float>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetWindowBrightness args is error");
			return 1;
        }
        
        private static int SDL_SetWindowOpacity(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, float>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<float>(2);
				result = SDL2.SDL.SDL_SetWindowOpacity(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetWindowOpacity args is error");
			return 1;
        }
        
        private static int SDL_SetWindowModalFor(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				result = SDL2.SDL.SDL_SetWindowModalFor(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetWindowModalFor args is error");
			return 1;
        }
        
        private static int SDL_SetWindowInputFocus(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_SetWindowInputFocus(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetWindowInputFocus args is error");
			return 1;
        }
        
        private static int SDL_GetWindowData(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, string>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				result = SDL2.SDL.SDL_GetWindowData(arg1, arg2);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetWindowData args is error");
			return 1;
        }
        
        private static int SDL_GetWindowDisplayIndex(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GetWindowDisplayIndex(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetWindowDisplayIndex args is error");
			return 1;
        }
        
        private static int SDL_GetWindowFlags(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_GetWindowFlags(arg1);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetWindowFlags args is error");
			return 1;
        }
        
        private static int SDL_GetWindowFromID(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_GetWindowFromID(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetWindowFromID args is error");
			return 1;
        }
        
        private static int SDL_LogDebug(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, string>(1))
			{
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<string>(2);
				SDL2.SDL.SDL_LogDebug(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_LogDebug args is error");
			return 1;
        }
        
        private static int SDL_LogInfo(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, string>(1))
			{
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<string>(2);
				SDL2.SDL.SDL_LogInfo(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_LogInfo args is error");
			return 1;
        }
        
        private static int SDL_LogWarn(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, string>(1))
			{
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<string>(2);
				SDL2.SDL.SDL_LogWarn(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_LogWarn args is error");
			return 1;
        }
        
        private static int SDL_LogError(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, string>(1))
			{
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<string>(2);
				SDL2.SDL.SDL_LogError(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_LogError args is error");
			return 1;
        }
        
        private static int SDL_LogCritical(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, string>(1))
			{
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<string>(2);
				SDL2.SDL.SDL_LogCritical(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_LogCritical args is error");
			return 1;
        }
        
        private static int SDL_LogMessage(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<int, SDL2.SDL.SDL_LogPriority, string>(1))
			{
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_LogPriority>(2);
				var arg3 = L.CheckAny<string>(3);
				SDL2.SDL.SDL_LogMessage(arg1, arg2, arg3);
				return 0;
			}
			L.L_Error("call function SDL_LogMessage args is error");
			return 1;
        }
        
        private static int SDL_LogMessageV(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<int, SDL2.SDL.SDL_LogPriority, string>(1))
			{
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_LogPriority>(2);
				var arg3 = L.CheckAny<string>(3);
				SDL2.SDL.SDL_LogMessageV(arg1, arg2, arg3);
				return 0;
			}
			L.L_Error("call function SDL_LogMessageV args is error");
			return 1;
        }
        
        private static int SDL_LogGetPriority(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				SDL2.SDL.SDL_LogPriority result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_LogGetPriority(arg1);
				L.PushAny<SDL2.SDL.SDL_LogPriority>(result);
				return 1;
			}
			L.L_Error("call function SDL_LogGetPriority args is error");
			return 1;
        }
        
        private static int SDL_LogSetPriority(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, SDL2.SDL.SDL_LogPriority>(1))
			{
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_LogPriority>(2);
				SDL2.SDL.SDL_LogSetPriority(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_LogSetPriority args is error");
			return 1;
        }
        
        private static int SDL_LogSetAllPriority(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<SDL2.SDL.SDL_LogPriority>(1))
			{
				var arg1 = L.CheckAny<SDL2.SDL.SDL_LogPriority>(1);
				SDL2.SDL.SDL_LogSetAllPriority(arg1);
				return 0;
			}
			L.L_Error("call function SDL_LogSetAllPriority args is error");
			return 1;
        }
        
        private static int SDL_LogResetPriorities(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_LogResetPriorities();
				return 0;
			}
			L.L_Error("call function SDL_LogResetPriorities args is error");
			return 1;
        }
        
        private static int SDL_LogSetOutputFunction(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SDL2.SDL.SDL_LogOutputFunction, System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<SDL2.SDL.SDL_LogOutputFunction>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				SDL2.SDL.SDL_LogSetOutputFunction(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_LogSetOutputFunction args is error");
			return 1;
        }
        
        private static int SDL_ShowSimpleMessageBox(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<SDL2.SDL.SDL_MessageBoxFlags, string, string, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_MessageBoxFlags>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<string>(3);
				var arg4 = L.CheckAny<System.IntPtr>(4);
				result = SDL2.SDL.SDL_ShowSimpleMessageBox(arg1, arg2, arg3, arg4);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_ShowSimpleMessageBox args is error");
			return 1;
        }
        
        private static int SDL_VERSIONNUM(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<int, int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_VERSIONNUM(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_VERSIONNUM args is error");
			return 1;
        }
        
        private static int SDL_VERSION_ATLEAST(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<int, int, int>(1))
			{
				bool result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_VERSION_ATLEAST(arg1, arg2, arg3);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_VERSION_ATLEAST args is error");
			return 1;
        }
        
        private static int SDL_GetRevision(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				string result;
				result = SDL2.SDL.SDL_GetRevision();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetRevision args is error");
			return 1;
        }
        
        private static int SDL_GetRevisionNumber(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL.SDL_GetRevisionNumber();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetRevisionNumber args is error");
			return 1;
        }
        
        private static int SDL_WINDOWPOS_UNDEFINED_DISPLAY(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_WINDOWPOS_UNDEFINED_DISPLAY(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_WINDOWPOS_UNDEFINED_DISPLAY args is error");
			return 1;
        }
        
        private static int SDL_WINDOWPOS_ISUNDEFINED(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				bool result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_WINDOWPOS_ISUNDEFINED(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_WINDOWPOS_ISUNDEFINED args is error");
			return 1;
        }
        
        private static int SDL_WINDOWPOS_CENTERED_DISPLAY(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_WINDOWPOS_CENTERED_DISPLAY(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_WINDOWPOS_CENTERED_DISPLAY args is error");
			return 1;
        }
        
        private static int SDL_WINDOWPOS_ISCENTERED(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				bool result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL.SDL_WINDOWPOS_ISCENTERED(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_WINDOWPOS_ISCENTERED args is error");
			return 1;
        }
        
        private static int SDL_CreateWindow(UniLua.ILuaState L)
        {
			if(L.CheckNum(6) && L.CheckType<string, int, int, int, int, SDL2.SDL.SDL_WindowFlags>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<string>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<int>(4);
				var arg5 = L.CheckAny<int>(5);
				var arg6 = L.CheckAny<SDL2.SDL.SDL_WindowFlags>(6);
				result = SDL2.SDL.SDL_CreateWindow(arg1, arg2, arg3, arg4, arg5, arg6);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_CreateWindow args is error");
			return 1;
        }
        
        private static int SDL_CreateWindowFrom(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_CreateWindowFrom(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_CreateWindowFrom args is error");
			return 1;
        }
        
        private static int SDL_DestroyWindow(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_DestroyWindow(arg1);
				return 0;
			}
			L.L_Error("call function SDL_DestroyWindow args is error");
			return 1;
        }
        
        private static int SDL_WriteLE64(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, ulong>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<ulong>(2);
				result = SDL2.SDL.SDL_WriteLE64(arg1, arg2);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_WriteLE64 args is error");
			return 1;
        }
        
        private static int SDL_WriteBE64(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, ulong>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<ulong>(2);
				result = SDL2.SDL.SDL_WriteBE64(arg1, arg2);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_WriteBE64 args is error");
			return 1;
        }
        
        private static int SDL_RWclose(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				long result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_RWclose(arg1);
				L.PushAny<long>(result);
				return 1;
			}
			L.L_Error("call function SDL_RWclose args is error");
			return 1;
        }
        
        private static int SDL_SetMainReady(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_SetMainReady();
				return 0;
			}
			L.L_Error("call function SDL_SetMainReady args is error");
			return 1;
        }
        
        private static int SDL_WinRTRunApp(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SDL2.SDL.SDL_main_func, System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<SDL2.SDL.SDL_main_func>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				result = SDL2.SDL.SDL_WinRTRunApp(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_WinRTRunApp args is error");
			return 1;
        }
        
        private static int SDL_UIKitRunApp(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<int, System.IntPtr, SDL2.SDL.SDL_main_func>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_main_func>(3);
				result = SDL2.SDL.SDL_UIKitRunApp(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_UIKitRunApp args is error");
			return 1;
        }
        
        private static int SDL_Init(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				int result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_Init(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_Init args is error");
			return 1;
        }
        
        private static int SDL_InitSubSystem(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				int result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_InitSubSystem(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_InitSubSystem args is error");
			return 1;
        }
        
        private static int SDL_Quit(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_Quit();
				return 0;
			}
			L.L_Error("call function SDL_Quit args is error");
			return 1;
        }
        
        private static int SDL_QuitSubSystem(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				var arg1 = L.CheckAny<uint>(1);
				SDL2.SDL.SDL_QuitSubSystem(arg1);
				return 0;
			}
			L.L_Error("call function SDL_QuitSubSystem args is error");
			return 1;
        }
        
        private static int SDL_WasInit(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<uint>(1))
			{
				uint result;
				var arg1 = L.CheckAny<uint>(1);
				result = SDL2.SDL.SDL_WasInit(arg1);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_WasInit args is error");
			return 1;
        }
        
        private static int SDL_GetPlatform(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				string result;
				result = SDL2.SDL.SDL_GetPlatform();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetPlatform args is error");
			return 1;
        }
        
        private static int SDL_ClearHints(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_ClearHints();
				return 0;
			}
			L.L_Error("call function SDL_ClearHints args is error");
			return 1;
        }
        
        private static int SDL_GetHint(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				string result;
				var arg1 = L.CheckAny<string>(1);
				result = SDL2.SDL.SDL_GetHint(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetHint args is error");
			return 1;
        }
        
        private static int SDL_SetHint(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<string, string>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<string>(1);
				var arg2 = L.CheckAny<string>(2);
				result = SDL2.SDL.SDL_SetHint(arg1, arg2);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetHint args is error");
			return 1;
        }
        
        private static int SDL_SetHintWithPriority(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<string, string, SDL2.SDL.SDL_HintPriority>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<string>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_HintPriority>(3);
				result = SDL2.SDL.SDL_SetHintWithPriority(arg1, arg2, arg3);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_SetHintWithPriority args is error");
			return 1;
        }
        
        private static int SDL_GetHintBoolean(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<string, SDL2.SDL.SDL_bool>(1))
			{
				SDL2.SDL.SDL_bool result;
				var arg1 = L.CheckAny<string>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_bool>(2);
				result = SDL2.SDL.SDL_GetHintBoolean(arg1, arg2);
				L.PushAny<SDL2.SDL.SDL_bool>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetHintBoolean args is error");
			return 1;
        }
        
        private static int SDL_ClearError(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_ClearError();
				return 0;
			}
			L.L_Error("call function SDL_ClearError args is error");
			return 1;
        }
        
        private static int SDL_GetError(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				string result;
				result = SDL2.SDL.SDL_GetError();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetError args is error");
			return 1;
        }
        
        private static int SDL_SetError(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				var arg1 = L.CheckAny<string>(1);
				SDL2.SDL.SDL_SetError(arg1);
				return 0;
			}
			L.L_Error("call function SDL_SetError args is error");
			return 1;
        }
        
        private static int SDL_GetErrorMsg(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_GetErrorMsg(arg1, arg2);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetErrorMsg args is error");
			return 1;
        }
        
        private static int SDL_Log(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<string>(1))
			{
				var arg1 = L.CheckAny<string>(1);
				SDL2.SDL.SDL_Log(arg1);
				return 0;
			}
			L.L_Error("call function SDL_Log args is error");
			return 1;
        }
        
        private static int SDL_LogVerbose(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<int, string>(1))
			{
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<string>(2);
				SDL2.SDL.SDL_LogVerbose(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SDL_LogVerbose args is error");
			return 1;
        }
        
        private static int UTF8_ToManaged(UniLua.ILuaState L)
        {
			if(L.CheckRange(1, 2) && L.CheckType<System.IntPtr>(1))
			{
				var top = L.GetTop();
				string result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = default(bool);				
				if(2 + 1 > top)
				{
					arg2 = L.CheckAny<bool>(2);
					result = SDL2.SDL.UTF8_ToManaged(arg1, arg2);
					L.PushAny<string>(result);
					return 1;
				}
				result = SDL2.SDL.UTF8_ToManaged(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function UTF8_ToManaged args is error");
			return 1;
        }
        
        private static int SDL_FOURCC(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<byte, byte, byte, byte>(1))
			{
				uint result;
				var arg1 = L.CheckAny<byte>(1);
				var arg2 = L.CheckAny<byte>(2);
				var arg3 = L.CheckAny<byte>(3);
				var arg4 = L.CheckAny<byte>(4);
				result = SDL2.SDL.SDL_FOURCC(arg1, arg2, arg3, arg4);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_FOURCC args is error");
			return 1;
        }
        
        private static int SDL_memcpy(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, System.IntPtr, System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<System.IntPtr>(3);
				result = SDL2.SDL.SDL_memcpy(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_memcpy args is error");
			return 1;
        }
        
        private static int SDL_RWFromFile(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<string, string>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<string>(1);
				var arg2 = L.CheckAny<string>(2);
				result = SDL2.SDL.SDL_RWFromFile(arg1, arg2);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_RWFromFile args is error");
			return 1;
        }
        
        private static int SDL_AllocRW(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				System.IntPtr result;
				result = SDL2.SDL.SDL_AllocRW();
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_AllocRW args is error");
			return 1;
        }
        
        private static int SDL_FreeRW(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL.SDL_FreeRW(arg1);
				return 0;
			}
			L.L_Error("call function SDL_FreeRW args is error");
			return 1;
        }
        
        private static int SDL_RWFromFP(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, SDL2.SDL.SDL_bool>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<SDL2.SDL.SDL_bool>(2);
				result = SDL2.SDL.SDL_RWFromFP(arg1, arg2);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_RWFromFP args is error");
			return 1;
        }
        
        private static int SDL_RWFromMem(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_RWFromMem(arg1, arg2);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_RWFromMem args is error");
			return 1;
        }
        
        private static int SDL_RWFromConstMem(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL.SDL_RWFromConstMem(arg1, arg2);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function SDL_RWFromConstMem args is error");
			return 1;
        }
        
        private static int SDL_RWsize(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				long result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_RWsize(arg1);
				L.PushAny<long>(result);
				return 1;
			}
			L.L_Error("call function SDL_RWsize args is error");
			return 1;
        }
        
        private static int SDL_RWseek(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, long, int>(1))
			{
				long result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<long>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL.SDL_RWseek(arg1, arg2, arg3);
				L.PushAny<long>(result);
				return 1;
			}
			L.L_Error("call function SDL_RWseek args is error");
			return 1;
        }
        
        private static int SDL_RWtell(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				long result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_RWtell(arg1);
				L.PushAny<long>(result);
				return 1;
			}
			L.L_Error("call function SDL_RWtell args is error");
			return 1;
        }
        
        private static int SDL_RWread(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr>(1))
			{
				long result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<System.IntPtr>(3);
				var arg4 = L.CheckAny<System.IntPtr>(4);
				result = SDL2.SDL.SDL_RWread(arg1, arg2, arg3, arg4);
				L.PushAny<long>(result);
				return 1;
			}
			L.L_Error("call function SDL_RWread args is error");
			return 1;
        }
        
        private static int SDL_RWwrite(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr>(1))
			{
				long result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<System.IntPtr>(2);
				var arg3 = L.CheckAny<System.IntPtr>(3);
				var arg4 = L.CheckAny<System.IntPtr>(4);
				result = SDL2.SDL.SDL_RWwrite(arg1, arg2, arg3, arg4);
				L.PushAny<long>(result);
				return 1;
			}
			L.L_Error("call function SDL_RWwrite args is error");
			return 1;
        }
        
        private static int SDL_ReadU8(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				byte result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_ReadU8(arg1);
				L.PushAny<byte>(result);
				return 1;
			}
			L.L_Error("call function SDL_ReadU8 args is error");
			return 1;
        }
        
        private static int SDL_ReadLE16(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				ushort result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_ReadLE16(arg1);
				L.PushAny<ushort>(result);
				return 1;
			}
			L.L_Error("call function SDL_ReadLE16 args is error");
			return 1;
        }
        
        private static int SDL_ReadBE16(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				ushort result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_ReadBE16(arg1);
				L.PushAny<ushort>(result);
				return 1;
			}
			L.L_Error("call function SDL_ReadBE16 args is error");
			return 1;
        }
        
        private static int SDL_ReadLE32(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_ReadLE32(arg1);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_ReadLE32 args is error");
			return 1;
        }
        
        private static int SDL_ReadBE32(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_ReadBE32(arg1);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_ReadBE32 args is error");
			return 1;
        }
        
        private static int SDL_ReadLE64(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				ulong result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_ReadLE64(arg1);
				L.PushAny<ulong>(result);
				return 1;
			}
			L.L_Error("call function SDL_ReadLE64 args is error");
			return 1;
        }
        
        private static int SDL_ReadBE64(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				ulong result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL.SDL_ReadBE64(arg1);
				L.PushAny<ulong>(result);
				return 1;
			}
			L.L_Error("call function SDL_ReadBE64 args is error");
			return 1;
        }
        
        private static int SDL_WriteU8(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, byte>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<byte>(2);
				result = SDL2.SDL.SDL_WriteU8(arg1, arg2);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_WriteU8 args is error");
			return 1;
        }
        
        private static int SDL_WriteLE16(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, ushort>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<ushort>(2);
				result = SDL2.SDL.SDL_WriteLE16(arg1, arg2);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_WriteLE16 args is error");
			return 1;
        }
        
        private static int SDL_WriteBE16(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, ushort>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<ushort>(2);
				result = SDL2.SDL.SDL_WriteBE16(arg1, arg2);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_WriteBE16 args is error");
			return 1;
        }
        
        private static int SDL_WriteLE32(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, uint>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<uint>(2);
				result = SDL2.SDL.SDL_WriteLE32(arg1, arg2);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_WriteLE32 args is error");
			return 1;
        }
        
        private static int SDL_WriteBE32(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, uint>(1))
			{
				uint result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<uint>(2);
				result = SDL2.SDL.SDL_WriteBE32(arg1, arg2);
				L.PushAny<uint>(result);
				return 1;
			}
			L.L_Error("call function SDL_WriteBE32 args is error");
			return 1;
        }
    }
}
