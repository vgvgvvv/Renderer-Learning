//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UniToLua
{
    using MathLib;
    using System;
    
    
    public class MathLib1Mathf1MathfInternalWrap
    {
        
        public static void Register(UniLua.ILuaState L)
        {
			L.BeginClass(typeof(MathLib.Mathf.MathfInternal), typeof(System.ValueType));
			L.RegFunction("New", _CreateMathLib1Mathf1MathfInternal);
			L.RegVar("FloatMinNormal", get_FloatMinNormal, set_FloatMinNormal);
			L.RegVar("FloatMinDenormal", get_FloatMinDenormal, set_FloatMinDenormal);
			L.RegVar("IsFlushToZeroEnabled", get_IsFlushToZeroEnabled, set_IsFlushToZeroEnabled);
			L.RegFunction("Equals", Equals);
			L.RegFunction("GetHashCode", GetHashCode);
			L.RegFunction("ToString", ToString);
			L.RegFunction("GetType", GetType);
			L.EndClass();
        }
        
        private static int _CreateMathLib1Mathf1MathfInternal(UniLua.ILuaState L)
        {
			if(L.CheckNum(0)) {
				L.PushAny<MathLib.Mathf.MathfInternal>(default(MathLib.Mathf.MathfInternal));
				return 1;
			}
			L.L_Error("call MathfInternal constructor args is error");
			return 1;
        }
        
        private static int get_FloatMinNormal(UniLua.ILuaState L)
        {
			L.PushAny<float>(MathLib.Mathf.MathfInternal.FloatMinNormal);
			return 1;
        }
        
        private static int set_FloatMinNormal(UniLua.ILuaState L)
        {
			var value = L.CheckAny<float>(1);
			MathLib.Mathf.MathfInternal.FloatMinNormal = value;
			return 0;
        }
        
        private static int get_FloatMinDenormal(UniLua.ILuaState L)
        {
			L.PushAny<float>(MathLib.Mathf.MathfInternal.FloatMinDenormal);
			return 1;
        }
        
        private static int set_FloatMinDenormal(UniLua.ILuaState L)
        {
			var value = L.CheckAny<float>(1);
			MathLib.Mathf.MathfInternal.FloatMinDenormal = value;
			return 0;
        }
        
        private static int get_IsFlushToZeroEnabled(UniLua.ILuaState L)
        {
			L.PushAny<bool>(MathLib.Mathf.MathfInternal.IsFlushToZeroEnabled);
			return 1;
        }
        
        private static int set_IsFlushToZeroEnabled(UniLua.ILuaState L)
        {
			var value = L.CheckAny<bool>(1);
			MathLib.Mathf.MathfInternal.IsFlushToZeroEnabled = value;
			return 0;
        }
        
        private static int Equals(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Mathf.MathfInternal, object>(1))
			{
				bool result;
				var obj = (MathLib.Mathf.MathfInternal) L.ToUserData(1);
				var arg1 = L.CheckAny<object>(2);
				result = obj.Equals(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function Equals args is error");
			return 1;
        }
        
        private static int GetHashCode(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				int result;
				var obj = (MathLib.Mathf.MathfInternal) L.ToUserData(1);
				result = obj.GetHashCode();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function GetHashCode args is error");
			return 1;
        }
        
        private static int ToString(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				string result;
				var obj = (MathLib.Mathf.MathfInternal) L.ToUserData(1);
				result = obj.ToString();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function ToString args is error");
			return 1;
        }
        
        private static int GetType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				System.Type result;
				var obj = (MathLib.Mathf.MathfInternal) L.ToUserData(1);
				result = obj.GetType();
				L.PushAny<System.Type>(result);
				return 1;
			}
			L.L_Error("call function GetType args is error");
			return 1;
        }
    }
}
