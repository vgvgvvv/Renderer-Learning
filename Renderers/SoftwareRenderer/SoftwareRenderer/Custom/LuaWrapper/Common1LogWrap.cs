//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UniToLua
{
    using Common;
    using System;
    
    
    public class Common1LogWrap
    {
        
        public static void Register(UniLua.ILuaState L)
        {
			L.BeginClass(typeof(Common.Log), null);
			L.RegFunction("New", _CreateCommon1Log);
			L.RegVar("Logger", get_Logger, set_Logger);
			L.RegFunction("SetLogger", SetLogger);
			L.RegFunction("SetLevel", SetLevel);
			L.RegFunction("Info", Info);
			L.RegFunction("Debug", Debug);
			L.RegFunction("Warning", Warning);
			L.RegFunction("Error", Error);
			L.RegFunction("Exception", Exception);
			L.RegFunction("CombineLoggers", CombineLoggers);
			L.RegFunction("AppendLogger", AppendLogger);
			L.RegFunction("GetType", GetType);
			L.RegFunction("ToString", ToString);
			L.RegFunction("Equals", Equals);
			L.RegFunction("GetHashCode", GetHashCode);
			L.EndClass();
        }
        
        private static int _CreateCommon1Log(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				L.PushAny<Common.Log>(new Common.Log());
				return 1;
			}
			L.L_Error("call Log constructor args is error");
			return 1;
        }
        
        private static int get_Logger(UniLua.ILuaState L)
        {
			L.PushAny<Common.ILogger>(Common.Log.Logger);
			return 1;
        }
        
        private static int set_Logger(UniLua.ILuaState L)
        {
			var value = L.CheckAny<Common.ILogger>(1);
			Common.Log.Logger = value;
			return 0;
        }
        
        private static int SetLogger(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<Common.ILogger>(1))
			{
				var arg1 = L.CheckAny<Common.ILogger>(1);
				Common.Log.SetLogger(arg1);
				return 0;
			}
			L.L_Error("call function SetLogger args is error");
			return 1;
        }
        
        private static int SetLevel(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<Common.LogLevel>(1))
			{
				var arg1 = L.CheckAny<Common.LogLevel>(1);
				Common.Log.SetLevel(arg1);
				return 0;
			}
			L.L_Error("call function SetLevel args is error");
			return 1;
        }
        
        private static int Info(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<object[]>(1))
			{
				var arg1 = L.CheckAny<object[]>(1);
				Common.Log.Info(arg1);
				return 0;
			}
			L.L_Error("call function Info args is error");
			return 1;
        }
        
        private static int Debug(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<object[]>(1))
			{
				var arg1 = L.CheckAny<object[]>(1);
				Common.Log.Debug(arg1);
				return 0;
			}
			L.L_Error("call function Debug args is error");
			return 1;
        }
        
        private static int Warning(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<object[]>(1))
			{
				var arg1 = L.CheckAny<object[]>(1);
				Common.Log.Warning(arg1);
				return 0;
			}
			L.L_Error("call function Warning args is error");
			return 1;
        }
        
        private static int Error(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<object[]>(1))
			{
				var arg1 = L.CheckAny<object[]>(1);
				Common.Log.Error(arg1);
				return 0;
			}
			L.L_Error("call function Error args is error");
			return 1;
        }
        
        private static int Exception(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.Exception>(1))
			{
				var arg1 = L.CheckAny<System.Exception>(1);
				Common.Log.Exception(arg1);
				return 0;
			}
			L.L_Error("call function Exception args is error");
			return 1;
        }
        
        private static int CombineLoggers(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<Common.ILogger[]>(1))
			{
				var arg1 = L.CheckAny<Common.ILogger[]>(1);
				Common.Log.CombineLoggers(arg1);
				return 0;
			}
			L.L_Error("call function CombineLoggers args is error");
			return 1;
        }
        
        private static int AppendLogger(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<Common.ILogger>(1))
			{
				var arg1 = L.CheckAny<Common.ILogger>(1);
				Common.Log.AppendLogger(arg1);
				return 0;
			}
			L.L_Error("call function AppendLogger args is error");
			return 1;
        }
        
        private static int GetType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				System.Type result;
				var obj = (Common.Log) L.ToUserData(1);
				result = obj.GetType();
				L.PushAny<System.Type>(result);
				return 1;
			}
			L.L_Error("call function GetType args is error");
			return 1;
        }
        
        private static int ToString(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				string result;
				var obj = (Common.Log) L.ToUserData(1);
				result = obj.ToString();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function ToString args is error");
			return 1;
        }
        
        private static int Equals(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<Common.Log, object>(1))
			{
				bool result;
				var obj = (Common.Log) L.ToUserData(1);
				var arg1 = L.CheckAny<object>(2);
				result = obj.Equals(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function Equals args is error");
			return 1;
        }
        
        private static int GetHashCode(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				int result;
				var obj = (Common.Log) L.ToUserData(1);
				result = obj.GetHashCode();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function GetHashCode args is error");
			return 1;
        }
    }
}
