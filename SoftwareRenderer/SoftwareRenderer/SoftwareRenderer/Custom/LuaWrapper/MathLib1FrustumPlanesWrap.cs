//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UniToLua
{
    using MathLib;
    using System;
    
    
    public class MathLib1FrustumPlanesWrap
    {
        
        public static void Register(UniLua.ILuaState L)
        {
			L.BeginClass(typeof(MathLib.FrustumPlanes), typeof(System.ValueType));
			L.RegFunction("New", _CreateMathLib1FrustumPlanes);
			L.RegVar("left", get_left, set_left);
			L.RegVar("right", get_right, set_right);
			L.RegVar("bottom", get_bottom, set_bottom);
			L.RegVar("top", get_top, set_top);
			L.RegVar("zNear", get_zNear, set_zNear);
			L.RegVar("zFar", get_zFar, set_zFar);
			L.RegFunction("Equals", Equals);
			L.RegFunction("GetHashCode", GetHashCode);
			L.RegFunction("ToString", ToString);
			L.RegFunction("GetType", GetType);
			L.EndClass();
        }
        
        private static int _CreateMathLib1FrustumPlanes(UniLua.ILuaState L)
        {
			if(L.CheckNum(0)) {
				L.PushAny<MathLib.FrustumPlanes>(default(MathLib.FrustumPlanes));
				return 1;
			}
			L.L_Error("call FrustumPlanes constructor args is error");
			return 1;
        }
        
        private static int get_left(UniLua.ILuaState L)
        {
			var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
			L.PushAny<float>(obj.left);
			return 1;
        }
        
        private static int set_left(UniLua.ILuaState L)
        {
			var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.left = value;
			// replace old struct
			L.PushAny<MathLib.FrustumPlanes>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_right(UniLua.ILuaState L)
        {
			var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
			L.PushAny<float>(obj.right);
			return 1;
        }
        
        private static int set_right(UniLua.ILuaState L)
        {
			var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.right = value;
			// replace old struct
			L.PushAny<MathLib.FrustumPlanes>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_bottom(UniLua.ILuaState L)
        {
			var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
			L.PushAny<float>(obj.bottom);
			return 1;
        }
        
        private static int set_bottom(UniLua.ILuaState L)
        {
			var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.bottom = value;
			// replace old struct
			L.PushAny<MathLib.FrustumPlanes>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_top(UniLua.ILuaState L)
        {
			var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
			L.PushAny<float>(obj.top);
			return 1;
        }
        
        private static int set_top(UniLua.ILuaState L)
        {
			var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.top = value;
			// replace old struct
			L.PushAny<MathLib.FrustumPlanes>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_zNear(UniLua.ILuaState L)
        {
			var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
			L.PushAny<float>(obj.zNear);
			return 1;
        }
        
        private static int set_zNear(UniLua.ILuaState L)
        {
			var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.zNear = value;
			// replace old struct
			L.PushAny<MathLib.FrustumPlanes>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_zFar(UniLua.ILuaState L)
        {
			var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
			L.PushAny<float>(obj.zFar);
			return 1;
        }
        
        private static int set_zFar(UniLua.ILuaState L)
        {
			var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.zFar = value;
			// replace old struct
			L.PushAny<MathLib.FrustumPlanes>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int Equals(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.FrustumPlanes, object>(1))
			{
				bool result;
				var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
				var arg1 = L.CheckAny<object>(2);
				result = obj.Equals(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function Equals args is error");
			return 1;
        }
        
        private static int GetHashCode(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				int result;
				var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
				result = obj.GetHashCode();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function GetHashCode args is error");
			return 1;
        }
        
        private static int ToString(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				string result;
				var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
				result = obj.ToString();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function ToString args is error");
			return 1;
        }
        
        private static int GetType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				System.Type result;
				var obj = (MathLib.FrustumPlanes) L.ToUserData(1);
				result = obj.GetType();
				L.PushAny<System.Type>(result);
				return 1;
			}
			L.L_Error("call function GetType args is error");
			return 1;
        }
    }
}
