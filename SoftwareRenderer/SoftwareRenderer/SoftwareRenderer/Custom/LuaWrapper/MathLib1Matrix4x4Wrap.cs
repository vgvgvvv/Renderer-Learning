//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UniToLua
{
    using MathLib;
    using System;
    
    
    public class MathLib1Matrix4x4Wrap
    {
        
        public static void Register(UniLua.ILuaState L)
        {
			L.BeginClass(typeof(MathLib.Matrix4x4), typeof(System.ValueType));
			L.RegFunction("New", _CreateMathLib1Matrix4x4);
			L.RegVar("m00", get_m00, set_m00);
			L.RegVar("m10", get_m10, set_m10);
			L.RegVar("m20", get_m20, set_m20);
			L.RegVar("m30", get_m30, set_m30);
			L.RegVar("m01", get_m01, set_m01);
			L.RegVar("m11", get_m11, set_m11);
			L.RegVar("m21", get_m21, set_m21);
			L.RegVar("m31", get_m31, set_m31);
			L.RegVar("m02", get_m02, set_m02);
			L.RegVar("m12", get_m12, set_m12);
			L.RegVar("m22", get_m22, set_m22);
			L.RegVar("m32", get_m32, set_m32);
			L.RegVar("m03", get_m03, set_m03);
			L.RegVar("m13", get_m13, set_m13);
			L.RegVar("m23", get_m23, set_m23);
			L.RegVar("m33", get_m33, set_m33);
			L.RegVar("zero", get_zero, null);
			L.RegVar("identity", get_identity, null);
			L.RegVar("rotation", get_rotation, null);
			L.RegVar("lossyScale", get_lossyScale, null);
			L.RegVar("isIdentity", get_isIdentity, null);
			L.RegVar("determinant", get_determinant, null);
			L.RegVar("decomposeProjection", get_decomposeProjection, null);
			L.RegVar("inverse", get_inverse, null);
			L.RegVar("transpose", get_transpose, null);
			L.RegFunction("GetHashCode", GetHashCode);
			L.RegFunction("Equals", Equals);
			L.RegFunction("__mul", op_Multiply);
			L.RegFunction("__eq", op_Equality);
			L.RegFunction("Inequality", op_Inequality);
			L.RegFunction("GetColumn", GetColumn);
			L.RegFunction("GetRow", GetRow);
			L.RegFunction("SetColumn", SetColumn);
			L.RegFunction("SetRow", SetRow);
			L.RegFunction("MultiplyPoint", MultiplyPoint);
			L.RegFunction("MultiplyPoint3x4", MultiplyPoint3x4);
			L.RegFunction("MultiplyVector", MultiplyVector);
			L.RegFunction("TransformPlane", TransformPlane);
			L.RegFunction("Scale", Scale);
			L.RegFunction("Translate", Translate);
			L.RegFunction("Rotate", Rotate);
			L.RegFunction("ToString", ToString);
			L.RegFunction("Determinant", Determinant);
			L.RegFunction("TRS", TRS);
			L.RegFunction("SetTRS", SetTRS);
			L.RegFunction("Inverse", Inverse);
			L.RegFunction("Transpose", Transpose);
			L.RegFunction("Ortho", Ortho);
			L.RegFunction("Perspective", Perspective);
			L.RegFunction("LookAt", LookAt);
			L.RegFunction("Frustum", Frustum);
			L.RegFunction("GetType", GetType);
			L.RegFunction("GetItem", get_Item);
			L.RegFunction("SetItem", set_Item);
			L.EndClass();
        }
        
        private static int _CreateMathLib1Matrix4x4(UniLua.ILuaState L)
        {
			if(L.CheckNum(4)&& L.CheckType<MathLib.Vector4, MathLib.Vector4, MathLib.Vector4, MathLib.Vector4>(1))
			{
				var arg1 = L.CheckAny<MathLib.Vector4>(1);
				var arg2 = L.CheckAny<MathLib.Vector4>(2);
				var arg3 = L.CheckAny<MathLib.Vector4>(3);
				var arg4 = L.CheckAny<MathLib.Vector4>(4);
				L.PushAny<MathLib.Matrix4x4>(new MathLib.Matrix4x4(arg1, arg2, arg3, arg4));
				return 1;
			}
			else if(L.CheckNum(16)&& L.CheckType<float, float, float, float, float, float, float, float, float>(1))
			{
				var arg1 = L.CheckAny<float>(1);
				var arg2 = L.CheckAny<float>(2);
				var arg3 = L.CheckAny<float>(3);
				var arg4 = L.CheckAny<float>(4);
				var arg5 = L.CheckAny<float>(5);
				var arg6 = L.CheckAny<float>(6);
				var arg7 = L.CheckAny<float>(7);
				var arg8 = L.CheckAny<float>(8);
				var arg9 = L.CheckAny<float>(9);
				var arg10 = L.CheckAny<float>(10);
				var arg11 = L.CheckAny<float>(11);
				var arg12 = L.CheckAny<float>(12);
				var arg13 = L.CheckAny<float>(13);
				var arg14 = L.CheckAny<float>(14);
				var arg15 = L.CheckAny<float>(15);
				var arg16 = L.CheckAny<float>(16);
				L.PushAny<MathLib.Matrix4x4>(new MathLib.Matrix4x4(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16));
				return 1;
			}
			L.L_Error("call Matrix4x4 constructor args is error");
			return 1;
        }
        
        private static int get_m00(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m00);
			return 1;
        }
        
        private static int set_m00(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m00 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_m10(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m10);
			return 1;
        }
        
        private static int set_m10(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m10 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_m20(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m20);
			return 1;
        }
        
        private static int set_m20(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m20 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_m30(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m30);
			return 1;
        }
        
        private static int set_m30(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m30 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_m01(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m01);
			return 1;
        }
        
        private static int set_m01(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m01 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_m11(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m11);
			return 1;
        }
        
        private static int set_m11(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m11 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_m21(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m21);
			return 1;
        }
        
        private static int set_m21(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m21 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_m31(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m31);
			return 1;
        }
        
        private static int set_m31(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m31 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_m02(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m02);
			return 1;
        }
        
        private static int set_m02(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m02 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_m12(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m12);
			return 1;
        }
        
        private static int set_m12(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m12 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_m22(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m22);
			return 1;
        }
        
        private static int set_m22(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m22 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_m32(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m32);
			return 1;
        }
        
        private static int set_m32(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m32 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_m03(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m03);
			return 1;
        }
        
        private static int set_m03(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m03 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_m13(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m13);
			return 1;
        }
        
        private static int set_m13(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m13 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_m23(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m23);
			return 1;
        }
        
        private static int set_m23(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m23 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_m33(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.m33);
			return 1;
        }
        
        private static int set_m33(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.m33 = value;
			// replace old struct
			L.PushAny<MathLib.Matrix4x4>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_zero(UniLua.ILuaState L)
        {
			L.PushAny<MathLib.Matrix4x4>(MathLib.Matrix4x4.zero);
			return 1;
        }
        
        private static int get_identity(UniLua.ILuaState L)
        {
			L.PushAny<MathLib.Matrix4x4>(MathLib.Matrix4x4.identity);
			return 1;
        }
        
        private static int get_rotation(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<MathLib.Quaternion>(obj.rotation);
			return 1;
        }
        
        private static int get_lossyScale(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<MathLib.Vector3>(obj.lossyScale);
			return 1;
        }
        
        private static int get_isIdentity(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<bool>(obj.isIdentity);
			return 1;
        }
        
        private static int get_determinant(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<float>(obj.determinant);
			return 1;
        }
        
        private static int get_decomposeProjection(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<MathLib.FrustumPlanes>(obj.decomposeProjection);
			return 1;
        }
        
        private static int get_inverse(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<MathLib.Matrix4x4>(obj.inverse);
			return 1;
        }
        
        private static int get_transpose(UniLua.ILuaState L)
        {
			var obj = (MathLib.Matrix4x4) L.ToUserData(1);
			L.PushAny<MathLib.Matrix4x4>(obj.transpose);
			return 1;
        }
        
        private static int GetHashCode(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				int result;
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				result = obj.GetHashCode();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function GetHashCode args is error");
			return 1;
        }
        
        private static int Equals(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Matrix4x4, object>(1))
			{
				bool result;
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<object>(2);
				result = obj.Equals(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			else if(L.CheckNum(2) && L.CheckType<MathLib.Matrix4x4, MathLib.Matrix4x4>(1))
			{
				bool result;
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<MathLib.Matrix4x4>(2);
				result = obj.Equals(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function Equals args is error");
			return 1;
        }
        
        private static int op_Multiply(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Matrix4x4, MathLib.Matrix4x4>(1))
			{
				MathLib.Matrix4x4 result;
				var arg1 = L.CheckAny<MathLib.Matrix4x4>(1);
				var arg2 = L.CheckAny<MathLib.Matrix4x4>(2);
				result = arg1 * arg2;
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			else if(L.CheckNum(2) && L.CheckType<MathLib.Matrix4x4, MathLib.Vector4>(1))
			{
				MathLib.Vector4 result;
				var arg1 = L.CheckAny<MathLib.Matrix4x4>(1);
				var arg2 = L.CheckAny<MathLib.Vector4>(2);
				result = arg1 * arg2;
				L.PushAny<MathLib.Vector4>(result);
				return 1;
			}
			L.L_Error("call function op_Multiply args is error");
			return 1;
        }
        
        private static int op_Equality(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Matrix4x4, MathLib.Matrix4x4>(1))
			{
				bool result;
				var arg1 = L.CheckAny<MathLib.Matrix4x4>(1);
				var arg2 = L.CheckAny<MathLib.Matrix4x4>(2);
				result = arg1 == arg2;
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function op_Equality args is error");
			return 1;
        }
        
        private static int op_Inequality(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Matrix4x4, MathLib.Matrix4x4>(1))
			{
				bool result;
				var arg1 = L.CheckAny<MathLib.Matrix4x4>(1);
				var arg2 = L.CheckAny<MathLib.Matrix4x4>(2);
				result = arg1 != arg2;
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function op_Inequality args is error");
			return 1;
        }
        
        private static int GetColumn(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Matrix4x4, int>(1))
			{
				MathLib.Vector4 result;
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<int>(2);
				result = obj.GetColumn(arg1);
				L.PushAny<MathLib.Vector4>(result);
				return 1;
			}
			L.L_Error("call function GetColumn args is error");
			return 1;
        }
        
        private static int GetRow(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Matrix4x4, int>(1))
			{
				MathLib.Vector4 result;
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<int>(2);
				result = obj.GetRow(arg1);
				L.PushAny<MathLib.Vector4>(result);
				return 1;
			}
			L.L_Error("call function GetRow args is error");
			return 1;
        }
        
        private static int SetColumn(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<MathLib.Matrix4x4, int, MathLib.Vector4>(1))
			{
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<int>(2);
				var arg2 = L.CheckAny<MathLib.Vector4>(3);
				obj.SetColumn(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SetColumn args is error");
			return 1;
        }
        
        private static int SetRow(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<MathLib.Matrix4x4, int, MathLib.Vector4>(1))
			{
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<int>(2);
				var arg2 = L.CheckAny<MathLib.Vector4>(3);
				obj.SetRow(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SetRow args is error");
			return 1;
        }
        
        private static int MultiplyPoint(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Matrix4x4, MathLib.Vector3>(1))
			{
				MathLib.Vector3 result;
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<MathLib.Vector3>(2);
				result = obj.MultiplyPoint(arg1);
				L.PushAny<MathLib.Vector3>(result);
				return 1;
			}
			L.L_Error("call function MultiplyPoint args is error");
			return 1;
        }
        
        private static int MultiplyPoint3x4(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Matrix4x4, MathLib.Vector3>(1))
			{
				MathLib.Vector3 result;
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<MathLib.Vector3>(2);
				result = obj.MultiplyPoint3x4(arg1);
				L.PushAny<MathLib.Vector3>(result);
				return 1;
			}
			L.L_Error("call function MultiplyPoint3x4 args is error");
			return 1;
        }
        
        private static int MultiplyVector(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Matrix4x4, MathLib.Vector3>(1))
			{
				MathLib.Vector3 result;
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<MathLib.Vector3>(2);
				result = obj.MultiplyVector(arg1);
				L.PushAny<MathLib.Vector3>(result);
				return 1;
			}
			L.L_Error("call function MultiplyVector args is error");
			return 1;
        }
        
        private static int TransformPlane(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Matrix4x4, MathLib.Plane>(1))
			{
				MathLib.Plane result;
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<MathLib.Plane>(2);
				result = obj.TransformPlane(arg1);
				L.PushAny<MathLib.Plane>(result);
				return 1;
			}
			L.L_Error("call function TransformPlane args is error");
			return 1;
        }
        
        private static int Scale(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<MathLib.Vector3>(1))
			{
				MathLib.Matrix4x4 result;
				var arg1 = L.CheckAny<MathLib.Vector3>(1);
				result = MathLib.Matrix4x4.Scale(arg1);
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			L.L_Error("call function Scale args is error");
			return 1;
        }
        
        private static int Translate(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<MathLib.Vector3>(1))
			{
				MathLib.Matrix4x4 result;
				var arg1 = L.CheckAny<MathLib.Vector3>(1);
				result = MathLib.Matrix4x4.Translate(arg1);
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			L.L_Error("call function Translate args is error");
			return 1;
        }
        
        private static int Rotate(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<MathLib.Quaternion>(1))
			{
				MathLib.Matrix4x4 result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				result = MathLib.Matrix4x4.Rotate(arg1);
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			L.L_Error("call function Rotate args is error");
			return 1;
        }
        
        private static int ToString(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				string result;
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				result = obj.ToString();
				L.PushAny<string>(result);
				return 1;
			}
			else if(L.CheckNum(2) && L.CheckType<MathLib.Matrix4x4, string>(1))
			{
				string result;
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<string>(2);
				result = obj.ToString(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			else if(L.CheckNum(3) && L.CheckType<MathLib.Matrix4x4, string, System.IFormatProvider>(1))
			{
				string result;
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<string>(2);
				var arg2 = L.CheckAny<System.IFormatProvider>(3);
				result = obj.ToString(arg1, arg2);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function ToString args is error");
			return 1;
        }
        
        private static int Determinant(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<MathLib.Matrix4x4>(1))
			{
				float result;
				var arg1 = L.CheckAny<MathLib.Matrix4x4>(1);
				result = MathLib.Matrix4x4.Determinant(arg1);
				L.PushAny<float>(result);
				return 1;
			}
			L.L_Error("call function Determinant args is error");
			return 1;
        }
        
        private static int TRS(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<MathLib.Vector3, MathLib.Quaternion, MathLib.Vector3>(1))
			{
				MathLib.Matrix4x4 result;
				var arg1 = L.CheckAny<MathLib.Vector3>(1);
				var arg2 = L.CheckAny<MathLib.Quaternion>(2);
				var arg3 = L.CheckAny<MathLib.Vector3>(3);
				result = MathLib.Matrix4x4.TRS(arg1, arg2, arg3);
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			L.L_Error("call function TRS args is error");
			return 1;
        }
        
        private static int SetTRS(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<MathLib.Matrix4x4, MathLib.Vector3, MathLib.Quaternion, MathLib.Vector3>(1))
			{
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<MathLib.Vector3>(2);
				var arg2 = L.CheckAny<MathLib.Quaternion>(3);
				var arg3 = L.CheckAny<MathLib.Vector3>(4);
				obj.SetTRS(arg1, arg2, arg3);
				return 0;
			}
			L.L_Error("call function SetTRS args is error");
			return 1;
        }
        
        private static int Inverse(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<MathLib.Matrix4x4>(1))
			{
				MathLib.Matrix4x4 result;
				var arg1 = L.CheckAny<MathLib.Matrix4x4>(1);
				result = MathLib.Matrix4x4.Inverse(arg1);
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			L.L_Error("call function Inverse args is error");
			return 1;
        }
        
        private static int Transpose(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<MathLib.Matrix4x4>(1))
			{
				MathLib.Matrix4x4 result;
				var arg1 = L.CheckAny<MathLib.Matrix4x4>(1);
				result = MathLib.Matrix4x4.Transpose(arg1);
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			L.L_Error("call function Transpose args is error");
			return 1;
        }
        
        private static int Ortho(UniLua.ILuaState L)
        {
			if(L.CheckNum(6) && L.CheckType<float, float, float, float, float, float>(1))
			{
				MathLib.Matrix4x4 result;
				var arg1 = L.CheckAny<float>(1);
				var arg2 = L.CheckAny<float>(2);
				var arg3 = L.CheckAny<float>(3);
				var arg4 = L.CheckAny<float>(4);
				var arg5 = L.CheckAny<float>(5);
				var arg6 = L.CheckAny<float>(6);
				result = MathLib.Matrix4x4.Ortho(arg1, arg2, arg3, arg4, arg5, arg6);
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			L.L_Error("call function Ortho args is error");
			return 1;
        }
        
        private static int Perspective(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<float, float, float, float>(1))
			{
				MathLib.Matrix4x4 result;
				var arg1 = L.CheckAny<float>(1);
				var arg2 = L.CheckAny<float>(2);
				var arg3 = L.CheckAny<float>(3);
				var arg4 = L.CheckAny<float>(4);
				result = MathLib.Matrix4x4.Perspective(arg1, arg2, arg3, arg4);
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			L.L_Error("call function Perspective args is error");
			return 1;
        }
        
        private static int LookAt(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<MathLib.Vector3, MathLib.Vector3, MathLib.Vector3>(1))
			{
				MathLib.Matrix4x4 result;
				var arg1 = L.CheckAny<MathLib.Vector3>(1);
				var arg2 = L.CheckAny<MathLib.Vector3>(2);
				var arg3 = L.CheckAny<MathLib.Vector3>(3);
				result = MathLib.Matrix4x4.LookAt(arg1, arg2, arg3);
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			L.L_Error("call function LookAt args is error");
			return 1;
        }
        
        private static int Frustum(UniLua.ILuaState L)
        {
			if(L.CheckNum(6) && L.CheckType<float, float, float, float, float, float>(1))
			{
				MathLib.Matrix4x4 result;
				var arg1 = L.CheckAny<float>(1);
				var arg2 = L.CheckAny<float>(2);
				var arg3 = L.CheckAny<float>(3);
				var arg4 = L.CheckAny<float>(4);
				var arg5 = L.CheckAny<float>(5);
				var arg6 = L.CheckAny<float>(6);
				result = MathLib.Matrix4x4.Frustum(arg1, arg2, arg3, arg4, arg5, arg6);
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			else if(L.CheckNum(1) && L.CheckType<MathLib.FrustumPlanes>(1))
			{
				MathLib.Matrix4x4 result;
				var arg1 = L.CheckAny<MathLib.FrustumPlanes>(1);
				result = MathLib.Matrix4x4.Frustum(arg1);
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			L.L_Error("call function Frustum args is error");
			return 1;
        }
        
        private static int GetType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				System.Type result;
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				result = obj.GetType();
				L.PushAny<System.Type>(result);
				return 1;
			}
			L.L_Error("call function GetType args is error");
			return 1;
        }
        
        private static int get_Item(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<MathLib.Matrix4x4, int, int>(1))
			{
				float result;
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<int>(2);
				var arg2 = L.CheckAny<int>(3);
				result = obj[arg1, arg2];
				L.PushAny<float>(result);
				return 1;
			}
			else if(L.CheckNum(2) && L.CheckType<MathLib.Matrix4x4, int>(1))
			{
				float result;
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<int>(2);
				result = obj[arg1];
				L.PushAny<float>(result);
				return 1;
			}
			L.L_Error("call function get_Item args is error");
			return 1;
        }
        
        private static int set_Item(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<MathLib.Matrix4x4, int, int, float>(1))
			{
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<int>(2);
				var arg2 = L.CheckAny<int>(3);
				var arg3 = L.CheckAny<float>(4);
				obj[arg1, arg2] = arg3;
				return 0;
			}
			else if(L.CheckNum(3) && L.CheckType<MathLib.Matrix4x4, int, float>(1))
			{
				var obj = (MathLib.Matrix4x4) L.ToUserData(1);
				var arg1 = L.CheckAny<int>(2);
				var arg2 = L.CheckAny<float>(3);
				obj[arg1] = arg2;
				return 0;
			}
			L.L_Error("call function set_Item args is error");
			return 1;
        }
    }
}
