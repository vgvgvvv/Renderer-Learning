//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UniToLua
{
    using MathLib;
    using System;
    
    
    public class MathLib1QuaternionWrap
    {
        
        public static void Register(UniLua.ILuaState L)
        {
			L.BeginClass(typeof(MathLib.Quaternion), typeof(System.ValueType));
			L.RegFunction("New", _CreateMathLib1Quaternion);
			L.RegVar("x", get_x, set_x);
			L.RegVar("y", get_y, set_y);
			L.RegVar("z", get_z, set_z);
			L.RegVar("w", get_w, set_w);
			L.RegVar("kEpsilon", get_kEpsilon, null);
			L.RegVar("identity", get_identity, null);
			L.RegVar("eulerAngles", get_eulerAngles, set_eulerAngles);
			L.RegVar("normalized", get_normalized, null);
			L.RegFunction("Set", Set);
			L.RegFunction("__mul", op_Multiply);
			L.RegFunction("__eq", op_Equality);
			L.RegFunction("Inequality", op_Inequality);
			L.RegFunction("Dot", Dot);
			L.RegFunction("SetLookRotation", SetLookRotation);
			L.RegFunction("Angle", Angle);
			L.RegFunction("Euler", Euler);
			L.RegFunction("SetFromToRotation", SetFromToRotation);
			L.RegFunction("RotateTowards", RotateTowards);
			L.RegFunction("Normalize", Normalize);
			L.RegFunction("GetHashCode", GetHashCode);
			L.RegFunction("Equals", Equals);
			L.RegFunction("ToString", ToString);
			L.RegFunction("FromToRotation", FromToRotation);
			L.RegFunction("Inverse", Inverse);
			L.RegFunction("Conjugate", Conjugate);
			L.RegFunction("Slerp", Slerp);
			L.RegFunction("SlerpUnclamped", SlerpUnclamped);
			L.RegFunction("Lerp", Lerp);
			L.RegFunction("LerpUnclamped", LerpUnclamped);
			L.RegFunction("FromMatrix3x3", FromMatrix3x3);
			L.RegFunction("ToMatrix3x3", ToMatrix3x3);
			L.RegFunction("FromMatrix4x4", FromMatrix4x4);
			L.RegFunction("ToMatrix4x4", ToMatrix4x4);
			L.RegFunction("AngleAxis", AngleAxis);
			L.RegFunction("LookRotation", LookRotation);
			L.RegFunction("GetType", GetType);
			L.RegFunction("GetItem", get_Item);
			L.RegFunction("SetItem", set_Item);
			L.EndClass();
        }
        
        private static int _CreateMathLib1Quaternion(UniLua.ILuaState L)
        {
			if(L.CheckNum(4)&& L.CheckType<float, float, float, float>(1))
			{
				var arg1 = L.CheckAny<float>(1);
				var arg2 = L.CheckAny<float>(2);
				var arg3 = L.CheckAny<float>(3);
				var arg4 = L.CheckAny<float>(4);
				L.PushAny<MathLib.Quaternion>(new MathLib.Quaternion(arg1, arg2, arg3, arg4));
				return 1;
			}
			L.L_Error("call Quaternion constructor args is error");
			return 1;
        }
        
        private static int get_x(UniLua.ILuaState L)
        {
			var obj = (MathLib.Quaternion) L.ToUserData(1);
			L.PushAny<float>(obj.x);
			return 1;
        }
        
        private static int set_x(UniLua.ILuaState L)
        {
			var obj = (MathLib.Quaternion) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.x = value;
			return 0;
        }
        
        private static int get_y(UniLua.ILuaState L)
        {
			var obj = (MathLib.Quaternion) L.ToUserData(1);
			L.PushAny<float>(obj.y);
			return 1;
        }
        
        private static int set_y(UniLua.ILuaState L)
        {
			var obj = (MathLib.Quaternion) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.y = value;
			return 0;
        }
        
        private static int get_z(UniLua.ILuaState L)
        {
			var obj = (MathLib.Quaternion) L.ToUserData(1);
			L.PushAny<float>(obj.z);
			return 1;
        }
        
        private static int set_z(UniLua.ILuaState L)
        {
			var obj = (MathLib.Quaternion) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.z = value;
			return 0;
        }
        
        private static int get_w(UniLua.ILuaState L)
        {
			var obj = (MathLib.Quaternion) L.ToUserData(1);
			L.PushAny<float>(obj.w);
			return 1;
        }
        
        private static int set_w(UniLua.ILuaState L)
        {
			var obj = (MathLib.Quaternion) L.ToUserData(1);
			var value = L.CheckAny<float>(2);
			obj.w = value;
			return 0;
        }
        
        private static int get_kEpsilon(UniLua.ILuaState L)
        {
			L.PushAny<float>(MathLib.Quaternion.kEpsilon);
			return 1;
        }
        
        private static int get_identity(UniLua.ILuaState L)
        {
			L.PushAny<MathLib.Quaternion>(MathLib.Quaternion.identity);
			return 1;
        }
        
        private static int get_eulerAngles(UniLua.ILuaState L)
        {
			var obj = (MathLib.Quaternion) L.ToUserData(1);
			L.PushAny<MathLib.Vector3>(obj.eulerAngles);
			return 1;
        }
        
        private static int set_eulerAngles(UniLua.ILuaState L)
        {
			var obj = (MathLib.Quaternion) L.ToUserData(1);
			var value = L.CheckAny<MathLib.Vector3>(2);
			obj.eulerAngles = value;
			return 0;
        }
        
        private static int get_normalized(UniLua.ILuaState L)
        {
			var obj = (MathLib.Quaternion) L.ToUserData(1);
			L.PushAny<MathLib.Quaternion>(obj.normalized);
			return 1;
        }
        
        private static int Set(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<MathLib.Quaternion, float, float, float, float>(1))
			{
				var obj = (MathLib.Quaternion) L.ToUserData(1);
				var arg1 = L.CheckAny<float>(2);
				var arg2 = L.CheckAny<float>(3);
				var arg3 = L.CheckAny<float>(4);
				var arg4 = L.CheckAny<float>(5);
				obj.Set(arg1, arg2, arg3, arg4);
				return 0;
			}
			L.L_Error("call function Set args is error");
			return 1;
        }
        
        private static int op_Multiply(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Quaternion, MathLib.Quaternion>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				var arg2 = L.CheckAny<MathLib.Quaternion>(2);
				result = arg1 * arg2;
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			else if(L.CheckNum(2) && L.CheckType<MathLib.Quaternion, MathLib.Vector3>(1))
			{
				MathLib.Vector3 result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				var arg2 = L.CheckAny<MathLib.Vector3>(2);
				result = arg1 * arg2;
				L.PushAny<MathLib.Vector3>(result);
				return 1;
			}
			L.L_Error("call function op_Multiply args is error");
			return 1;
        }
        
        private static int op_Equality(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Quaternion, MathLib.Quaternion>(1))
			{
				bool result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				var arg2 = L.CheckAny<MathLib.Quaternion>(2);
				result = arg1 == arg2;
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function op_Equality args is error");
			return 1;
        }
        
        private static int op_Inequality(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Quaternion, MathLib.Quaternion>(1))
			{
				bool result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				var arg2 = L.CheckAny<MathLib.Quaternion>(2);
				result = arg1 != arg2;
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function op_Inequality args is error");
			return 1;
        }
        
        private static int Dot(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Quaternion, MathLib.Quaternion>(1))
			{
				float result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				var arg2 = L.CheckAny<MathLib.Quaternion>(2);
				result = MathLib.Quaternion.Dot(arg1, arg2);
				L.PushAny<float>(result);
				return 1;
			}
			L.L_Error("call function Dot args is error");
			return 1;
        }
        
        private static int SetLookRotation(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Quaternion, MathLib.Vector3>(1))
			{
				var obj = (MathLib.Quaternion) L.ToUserData(1);
				var arg1 = L.CheckAny<MathLib.Vector3>(2);
				obj.SetLookRotation(arg1);
				return 0;
			}
			else if(L.CheckNum(3) && L.CheckType<MathLib.Quaternion, MathLib.Vector3, MathLib.Vector3>(1))
			{
				var obj = (MathLib.Quaternion) L.ToUserData(1);
				var arg1 = L.CheckAny<MathLib.Vector3>(2);
				var arg2 = L.CheckAny<MathLib.Vector3>(3);
				obj.SetLookRotation(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SetLookRotation args is error");
			return 1;
        }
        
        private static int Angle(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Quaternion, MathLib.Quaternion>(1))
			{
				float result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				var arg2 = L.CheckAny<MathLib.Quaternion>(2);
				result = MathLib.Quaternion.Angle(arg1, arg2);
				L.PushAny<float>(result);
				return 1;
			}
			L.L_Error("call function Angle args is error");
			return 1;
        }
        
        private static int Euler(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<float, float, float>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<float>(1);
				var arg2 = L.CheckAny<float>(2);
				var arg3 = L.CheckAny<float>(3);
				result = MathLib.Quaternion.Euler(arg1, arg2, arg3);
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			else if(L.CheckNum(1) && L.CheckType<MathLib.Vector3>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<MathLib.Vector3>(1);
				result = MathLib.Quaternion.Euler(arg1);
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			L.L_Error("call function Euler args is error");
			return 1;
        }
        
        private static int SetFromToRotation(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<MathLib.Quaternion, MathLib.Vector3, MathLib.Vector3>(1))
			{
				var obj = (MathLib.Quaternion) L.ToUserData(1);
				var arg1 = L.CheckAny<MathLib.Vector3>(2);
				var arg2 = L.CheckAny<MathLib.Vector3>(3);
				obj.SetFromToRotation(arg1, arg2);
				return 0;
			}
			L.L_Error("call function SetFromToRotation args is error");
			return 1;
        }
        
        private static int RotateTowards(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<MathLib.Quaternion, MathLib.Quaternion, float>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				var arg2 = L.CheckAny<MathLib.Quaternion>(2);
				var arg3 = L.CheckAny<float>(3);
				result = MathLib.Quaternion.RotateTowards(arg1, arg2, arg3);
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			L.L_Error("call function RotateTowards args is error");
			return 1;
        }
        
        private static int Normalize(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<MathLib.Quaternion>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				result = MathLib.Quaternion.Normalize(arg1);
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			else if(L.CheckNum(1))
			{
				var obj = (MathLib.Quaternion) L.ToUserData(1);
				obj.Normalize();
				return 0;
			}
			L.L_Error("call function Normalize args is error");
			return 1;
        }
        
        private static int GetHashCode(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				int result;
				var obj = (MathLib.Quaternion) L.ToUserData(1);
				result = obj.GetHashCode();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function GetHashCode args is error");
			return 1;
        }
        
        private static int Equals(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Quaternion, object>(1))
			{
				bool result;
				var obj = (MathLib.Quaternion) L.ToUserData(1);
				var arg1 = L.CheckAny<object>(2);
				result = obj.Equals(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			else if(L.CheckNum(2) && L.CheckType<MathLib.Quaternion, MathLib.Quaternion>(1))
			{
				bool result;
				var obj = (MathLib.Quaternion) L.ToUserData(1);
				var arg1 = L.CheckAny<MathLib.Quaternion>(2);
				result = obj.Equals(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function Equals args is error");
			return 1;
        }
        
        private static int ToString(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				string result;
				var obj = (MathLib.Quaternion) L.ToUserData(1);
				result = obj.ToString();
				L.PushAny<string>(result);
				return 1;
			}
			else if(L.CheckNum(2) && L.CheckType<MathLib.Quaternion, string>(1))
			{
				string result;
				var obj = (MathLib.Quaternion) L.ToUserData(1);
				var arg1 = L.CheckAny<string>(2);
				result = obj.ToString(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			else if(L.CheckNum(3) && L.CheckType<MathLib.Quaternion, string, System.IFormatProvider>(1))
			{
				string result;
				var obj = (MathLib.Quaternion) L.ToUserData(1);
				var arg1 = L.CheckAny<string>(2);
				var arg2 = L.CheckAny<System.IFormatProvider>(3);
				result = obj.ToString(arg1, arg2);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function ToString args is error");
			return 1;
        }
        
        private static int FromToRotation(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Vector3, MathLib.Vector3>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<MathLib.Vector3>(1);
				var arg2 = L.CheckAny<MathLib.Vector3>(2);
				result = MathLib.Quaternion.FromToRotation(arg1, arg2);
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			L.L_Error("call function FromToRotation args is error");
			return 1;
        }
        
        private static int Inverse(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<MathLib.Quaternion>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				result = MathLib.Quaternion.Inverse(arg1);
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			L.L_Error("call function Inverse args is error");
			return 1;
        }
        
        private static int Conjugate(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				MathLib.Quaternion result;
				var obj = (MathLib.Quaternion) L.ToUserData(1);
				result = obj.Conjugate();
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			L.L_Error("call function Conjugate args is error");
			return 1;
        }
        
        private static int Slerp(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<MathLib.Quaternion, MathLib.Quaternion, float>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				var arg2 = L.CheckAny<MathLib.Quaternion>(2);
				var arg3 = L.CheckAny<float>(3);
				result = MathLib.Quaternion.Slerp(arg1, arg2, arg3);
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			L.L_Error("call function Slerp args is error");
			return 1;
        }
        
        private static int SlerpUnclamped(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<MathLib.Quaternion, MathLib.Quaternion, float>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				var arg2 = L.CheckAny<MathLib.Quaternion>(2);
				var arg3 = L.CheckAny<float>(3);
				result = MathLib.Quaternion.SlerpUnclamped(arg1, arg2, arg3);
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			L.L_Error("call function SlerpUnclamped args is error");
			return 1;
        }
        
        private static int Lerp(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<MathLib.Quaternion, MathLib.Quaternion, float>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				var arg2 = L.CheckAny<MathLib.Quaternion>(2);
				var arg3 = L.CheckAny<float>(3);
				result = MathLib.Quaternion.Lerp(arg1, arg2, arg3);
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			L.L_Error("call function Lerp args is error");
			return 1;
        }
        
        private static int LerpUnclamped(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<MathLib.Quaternion, MathLib.Quaternion, float>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				var arg2 = L.CheckAny<MathLib.Quaternion>(2);
				var arg3 = L.CheckAny<float>(3);
				result = MathLib.Quaternion.LerpUnclamped(arg1, arg2, arg3);
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			L.L_Error("call function LerpUnclamped args is error");
			return 1;
        }
        
        private static int FromMatrix3x3(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<MathLib.Matrix3x3>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<MathLib.Matrix3x3>(1);
				result = MathLib.Quaternion.FromMatrix3x3(arg1);
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			L.L_Error("call function FromMatrix3x3 args is error");
			return 1;
        }
        
        private static int ToMatrix3x3(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<MathLib.Quaternion>(1))
			{
				MathLib.Matrix3x3 result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				result = MathLib.Quaternion.ToMatrix3x3(arg1);
				L.PushAny<MathLib.Matrix3x3>(result);
				return 1;
			}
			L.L_Error("call function ToMatrix3x3 args is error");
			return 1;
        }
        
        private static int FromMatrix4x4(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<MathLib.Matrix4x4>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<MathLib.Matrix4x4>(1);
				result = MathLib.Quaternion.FromMatrix4x4(arg1);
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			L.L_Error("call function FromMatrix4x4 args is error");
			return 1;
        }
        
        private static int ToMatrix4x4(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<MathLib.Quaternion>(1))
			{
				MathLib.Matrix4x4 result;
				var arg1 = L.CheckAny<MathLib.Quaternion>(1);
				result = MathLib.Quaternion.ToMatrix4x4(arg1);
				L.PushAny<MathLib.Matrix4x4>(result);
				return 1;
			}
			L.L_Error("call function ToMatrix4x4 args is error");
			return 1;
        }
        
        private static int AngleAxis(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<float, MathLib.Vector3>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<float>(1);
				var arg2 = L.CheckAny<MathLib.Vector3>(2);
				result = MathLib.Quaternion.AngleAxis(arg1, arg2);
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			L.L_Error("call function AngleAxis args is error");
			return 1;
        }
        
        private static int LookRotation(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Vector3, MathLib.Vector3>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<MathLib.Vector3>(1);
				var arg2 = L.CheckAny<MathLib.Vector3>(2);
				result = MathLib.Quaternion.LookRotation(arg1, arg2);
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			else if(L.CheckNum(1) && L.CheckType<MathLib.Vector3>(1))
			{
				MathLib.Quaternion result;
				var arg1 = L.CheckAny<MathLib.Vector3>(1);
				result = MathLib.Quaternion.LookRotation(arg1);
				L.PushAny<MathLib.Quaternion>(result);
				return 1;
			}
			L.L_Error("call function LookRotation args is error");
			return 1;
        }
        
        private static int GetType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				System.Type result;
				var obj = (MathLib.Quaternion) L.ToUserData(1);
				result = obj.GetType();
				L.PushAny<System.Type>(result);
				return 1;
			}
			L.L_Error("call function GetType args is error");
			return 1;
        }
        
        private static int get_Item(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Quaternion, int>(1))
			{
				float result;
				var obj = (MathLib.Quaternion) L.ToUserData(1);
				var arg1 = L.CheckAny<int>(2);
				result = obj[arg1];
				L.PushAny<float>(result);
				return 1;
			}
			L.L_Error("call function get_Item args is error");
			return 1;
        }
        
        private static int set_Item(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<MathLib.Quaternion, int, float>(1))
			{
				var obj = (MathLib.Quaternion) L.ToUserData(1);
				var arg1 = L.CheckAny<int>(2);
				var arg2 = L.CheckAny<float>(3);
				obj[arg1] = arg2;
				return 0;
			}
			L.L_Error("call function set_Item args is error");
			return 1;
        }
    }
}
