//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UniToLua
{
    using SDL2;
    using System;
    
    
    public class SDL21SDL_ttfWrap
    {
        
        public static void Register(UniLua.ILuaState L)
        {
			L.BeginStaticLib("SDL_ttf");
			L.RegVar("SDL_TTF_MAJOR_VERSION", get_SDL_TTF_MAJOR_VERSION, null);
			L.RegVar("SDL_TTF_MINOR_VERSION", get_SDL_TTF_MINOR_VERSION, null);
			L.RegVar("SDL_TTF_PATCHLEVEL", get_SDL_TTF_PATCHLEVEL, null);
			L.RegVar("UNICODE_BOM_NATIVE", get_UNICODE_BOM_NATIVE, null);
			L.RegVar("UNICODE_BOM_SWAPPED", get_UNICODE_BOM_SWAPPED, null);
			L.RegVar("TTF_STYLE_NORMAL", get_TTF_STYLE_NORMAL, null);
			L.RegVar("TTF_STYLE_BOLD", get_TTF_STYLE_BOLD, null);
			L.RegVar("TTF_STYLE_ITALIC", get_TTF_STYLE_ITALIC, null);
			L.RegVar("TTF_STYLE_UNDERLINE", get_TTF_STYLE_UNDERLINE, null);
			L.RegVar("TTF_STYLE_STRIKETHROUGH", get_TTF_STYLE_STRIKETHROUGH, null);
			L.RegVar("TTF_HINTING_NORMAL", get_TTF_HINTING_NORMAL, null);
			L.RegVar("TTF_HINTING_LIGHT", get_TTF_HINTING_LIGHT, null);
			L.RegVar("TTF_HINTING_MONO", get_TTF_HINTING_MONO, null);
			L.RegVar("TTF_HINTING_NONE", get_TTF_HINTING_NONE, null);
			L.RegVar("TTF_HINTING_LIGHT_SUBPIXEL", get_TTF_HINTING_LIGHT_SUBPIXEL, null);
			L.RegFunction("TTF_RenderUNICODE_Blended", TTF_RenderUNICODE_Blended);
			L.RegFunction("TTF_RenderText_Blended_Wrapped", TTF_RenderText_Blended_Wrapped);
			L.RegFunction("TTF_RenderUTF8_Blended_Wrapped", TTF_RenderUTF8_Blended_Wrapped);
			L.RegFunction("TTF_RenderUNICODE_Blended_Wrapped", TTF_RenderUNICODE_Blended_Wrapped);
			L.RegFunction("TTF_RenderGlyph_Blended", TTF_RenderGlyph_Blended);
			L.RegFunction("TTF_RenderGlyph32_Blended", TTF_RenderGlyph32_Blended);
			L.RegFunction("TTF_SetDirection", TTF_SetDirection);
			L.RegFunction("TTF_SetScript", TTF_SetScript);
			L.RegFunction("TTF_CloseFont", TTF_CloseFont);
			L.RegFunction("TTF_Quit", TTF_Quit);
			L.RegFunction("TTF_WasInit", TTF_WasInit);
			L.RegFunction("SDL_GetFontKerningSize", SDL_GetFontKerningSize);
			L.RegFunction("TTF_GetFontKerningSizeGlyphs", TTF_GetFontKerningSizeGlyphs);
			L.RegFunction("TTF_GetFontKerningSizeGlyphs32", TTF_GetFontKerningSizeGlyphs32);
			L.RegFunction("TTF_RenderText_Solid", TTF_RenderText_Solid);
			L.RegFunction("TTF_RenderUTF8_Solid", TTF_RenderUTF8_Solid);
			L.RegFunction("TTF_RenderUNICODE_Solid", TTF_RenderUNICODE_Solid);
			L.RegFunction("TTF_RenderText_Solid_Wrapped", TTF_RenderText_Solid_Wrapped);
			L.RegFunction("TTF_RenderUTF8_Solid_Wrapped", TTF_RenderUTF8_Solid_Wrapped);
			L.RegFunction("TTF_RenderUNICODE_Solid_Wrapped", TTF_RenderUNICODE_Solid_Wrapped);
			L.RegFunction("TTF_RenderGlyph_Solid", TTF_RenderGlyph_Solid);
			L.RegFunction("TTF_RenderGlyph32_Solid", TTF_RenderGlyph32_Solid);
			L.RegFunction("TTF_RenderText_Shaded", TTF_RenderText_Shaded);
			L.RegFunction("TTF_RenderUTF8_Shaded", TTF_RenderUTF8_Shaded);
			L.RegFunction("TTF_RenderUNICODE_Shaded", TTF_RenderUNICODE_Shaded);
			L.RegFunction("TTF_RenderText_Shaded_Wrapped", TTF_RenderText_Shaded_Wrapped);
			L.RegFunction("TTF_RenderUTF8_Shaded_Wrapped", TTF_RenderUTF8_Shaded_Wrapped);
			L.RegFunction("TTF_RenderUNICODE_Shaded_Wrapped", TTF_RenderUNICODE_Shaded_Wrapped);
			L.RegFunction("TTF_RenderGlyph_Shaded", TTF_RenderGlyph_Shaded);
			L.RegFunction("TTF_RenderGlyph32_Shaded", TTF_RenderGlyph32_Shaded);
			L.RegFunction("TTF_RenderText_Blended", TTF_RenderText_Blended);
			L.RegFunction("TTF_RenderUTF8_Blended", TTF_RenderUTF8_Blended);
			L.RegFunction("TTF_LinkedVersion", TTF_LinkedVersion);
			L.RegFunction("TTF_ByteSwappedUNICODE", TTF_ByteSwappedUNICODE);
			L.RegFunction("TTF_Init", TTF_Init);
			L.RegFunction("TTF_OpenFont", TTF_OpenFont);
			L.RegFunction("TTF_OpenFontRW", TTF_OpenFontRW);
			L.RegFunction("TTF_OpenFontIndex", TTF_OpenFontIndex);
			L.RegFunction("TTF_OpenFontIndexRW", TTF_OpenFontIndexRW);
			L.RegFunction("TTF_SetFontSize", TTF_SetFontSize);
			L.RegFunction("TTF_GetFontStyle", TTF_GetFontStyle);
			L.RegFunction("TTF_SetFontStyle", TTF_SetFontStyle);
			L.RegFunction("TTF_GetFontOutline", TTF_GetFontOutline);
			L.RegFunction("TTF_SetFontOutline", TTF_SetFontOutline);
			L.RegFunction("TTF_GetFontHinting", TTF_GetFontHinting);
			L.RegFunction("TTF_SetFontHinting", TTF_SetFontHinting);
			L.RegFunction("TTF_FontHeight", TTF_FontHeight);
			L.RegFunction("TTF_FontAscent", TTF_FontAscent);
			L.RegFunction("TTF_FontDescent", TTF_FontDescent);
			L.RegFunction("TTF_FontLineSkip", TTF_FontLineSkip);
			L.RegFunction("TTF_GetFontKerning", TTF_GetFontKerning);
			L.RegFunction("TTF_SetFontKerning", TTF_SetFontKerning);
			L.RegFunction("TTF_FontFaces", TTF_FontFaces);
			L.RegFunction("TTF_FontFaceIsFixedWidth", TTF_FontFaceIsFixedWidth);
			L.RegFunction("TTF_FontFaceFamilyName", TTF_FontFaceFamilyName);
			L.RegFunction("TTF_FontFaceStyleName", TTF_FontFaceStyleName);
			L.RegFunction("TTF_GlyphIsProvided", TTF_GlyphIsProvided);
			L.RegFunction("TTF_GlyphIsProvided32", TTF_GlyphIsProvided32);
			L.EndStaticLib();
        }
        
        private static int get_SDL_TTF_MAJOR_VERSION(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_ttf.SDL_TTF_MAJOR_VERSION);
			return 1;
        }
        
        private static int get_SDL_TTF_MINOR_VERSION(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_ttf.SDL_TTF_MINOR_VERSION);
			return 1;
        }
        
        private static int get_SDL_TTF_PATCHLEVEL(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_ttf.SDL_TTF_PATCHLEVEL);
			return 1;
        }
        
        private static int get_UNICODE_BOM_NATIVE(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_ttf.UNICODE_BOM_NATIVE);
			return 1;
        }
        
        private static int get_UNICODE_BOM_SWAPPED(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_ttf.UNICODE_BOM_SWAPPED);
			return 1;
        }
        
        private static int get_TTF_STYLE_NORMAL(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_ttf.TTF_STYLE_NORMAL);
			return 1;
        }
        
        private static int get_TTF_STYLE_BOLD(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_ttf.TTF_STYLE_BOLD);
			return 1;
        }
        
        private static int get_TTF_STYLE_ITALIC(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_ttf.TTF_STYLE_ITALIC);
			return 1;
        }
        
        private static int get_TTF_STYLE_UNDERLINE(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_ttf.TTF_STYLE_UNDERLINE);
			return 1;
        }
        
        private static int get_TTF_STYLE_STRIKETHROUGH(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_ttf.TTF_STYLE_STRIKETHROUGH);
			return 1;
        }
        
        private static int get_TTF_HINTING_NORMAL(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_ttf.TTF_HINTING_NORMAL);
			return 1;
        }
        
        private static int get_TTF_HINTING_LIGHT(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_ttf.TTF_HINTING_LIGHT);
			return 1;
        }
        
        private static int get_TTF_HINTING_MONO(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_ttf.TTF_HINTING_MONO);
			return 1;
        }
        
        private static int get_TTF_HINTING_NONE(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_ttf.TTF_HINTING_NONE);
			return 1;
        }
        
        private static int get_TTF_HINTING_LIGHT_SUBPIXEL(UniLua.ILuaState L)
        {
			L.PushAny<int>(SDL2.SDL_ttf.TTF_HINTING_LIGHT_SUBPIXEL);
			return 1;
        }
        
        private static int TTF_RenderUNICODE_Blended(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				result = SDL2.SDL_ttf.TTF_RenderUNICODE_Blended(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderUNICODE_Blended args is error");
			return 1;
        }
        
        private static int TTF_RenderText_Blended_Wrapped(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				var arg4 = L.CheckAny<uint>(4);
				result = SDL2.SDL_ttf.TTF_RenderText_Blended_Wrapped(arg1, arg2, arg3, arg4);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderText_Blended_Wrapped args is error");
			return 1;
        }
        
        private static int TTF_RenderUTF8_Blended_Wrapped(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				var arg4 = L.CheckAny<uint>(4);
				result = SDL2.SDL_ttf.TTF_RenderUTF8_Blended_Wrapped(arg1, arg2, arg3, arg4);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderUTF8_Blended_Wrapped args is error");
			return 1;
        }
        
        private static int TTF_RenderUNICODE_Blended_Wrapped(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				var arg4 = L.CheckAny<uint>(4);
				result = SDL2.SDL_ttf.TTF_RenderUNICODE_Blended_Wrapped(arg1, arg2, arg3, arg4);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderUNICODE_Blended_Wrapped args is error");
			return 1;
        }
        
        private static int TTF_RenderGlyph_Blended(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, ushort, SDL2.SDL.SDL_Color>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<ushort>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				result = SDL2.SDL_ttf.TTF_RenderGlyph_Blended(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderGlyph_Blended args is error");
			return 1;
        }
        
        private static int TTF_RenderGlyph32_Blended(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, uint, SDL2.SDL.SDL_Color>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<uint>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				result = SDL2.SDL_ttf.TTF_RenderGlyph32_Blended(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderGlyph32_Blended args is error");
			return 1;
        }
        
        private static int TTF_SetDirection(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_ttf.TTF_SetDirection(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_SetDirection args is error");
			return 1;
        }
        
        private static int TTF_SetScript(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				int result;
				var arg1 = L.CheckAny<int>(1);
				result = SDL2.SDL_ttf.TTF_SetScript(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_SetScript args is error");
			return 1;
        }
        
        private static int TTF_CloseFont(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				SDL2.SDL_ttf.TTF_CloseFont(arg1);
				return 0;
			}
			L.L_Error("call function TTF_CloseFont args is error");
			return 1;
        }
        
        private static int TTF_Quit(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL_ttf.TTF_Quit();
				return 0;
			}
			L.L_Error("call function TTF_Quit args is error");
			return 1;
        }
        
        private static int TTF_WasInit(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL_ttf.TTF_WasInit();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_WasInit args is error");
			return 1;
        }
        
        private static int SDL_GetFontKerningSize(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL_ttf.SDL_GetFontKerningSize(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function SDL_GetFontKerningSize args is error");
			return 1;
        }
        
        private static int TTF_GetFontKerningSizeGlyphs(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, ushort, ushort>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<ushort>(2);
				var arg3 = L.CheckAny<ushort>(3);
				result = SDL2.SDL_ttf.TTF_GetFontKerningSizeGlyphs(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_GetFontKerningSizeGlyphs args is error");
			return 1;
        }
        
        private static int TTF_GetFontKerningSizeGlyphs32(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, ushort, ushort>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<ushort>(2);
				var arg3 = L.CheckAny<ushort>(3);
				result = SDL2.SDL_ttf.TTF_GetFontKerningSizeGlyphs32(arg1, arg2, arg3);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_GetFontKerningSizeGlyphs32 args is error");
			return 1;
        }
        
        private static int TTF_RenderText_Solid(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				result = SDL2.SDL_ttf.TTF_RenderText_Solid(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderText_Solid args is error");
			return 1;
        }
        
        private static int TTF_RenderUTF8_Solid(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				result = SDL2.SDL_ttf.TTF_RenderUTF8_Solid(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderUTF8_Solid args is error");
			return 1;
        }
        
        private static int TTF_RenderUNICODE_Solid(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				result = SDL2.SDL_ttf.TTF_RenderUNICODE_Solid(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderUNICODE_Solid args is error");
			return 1;
        }
        
        private static int TTF_RenderText_Solid_Wrapped(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				var arg4 = L.CheckAny<uint>(4);
				result = SDL2.SDL_ttf.TTF_RenderText_Solid_Wrapped(arg1, arg2, arg3, arg4);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderText_Solid_Wrapped args is error");
			return 1;
        }
        
        private static int TTF_RenderUTF8_Solid_Wrapped(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				var arg4 = L.CheckAny<uint>(4);
				result = SDL2.SDL_ttf.TTF_RenderUTF8_Solid_Wrapped(arg1, arg2, arg3, arg4);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderUTF8_Solid_Wrapped args is error");
			return 1;
        }
        
        private static int TTF_RenderUNICODE_Solid_Wrapped(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				var arg4 = L.CheckAny<uint>(4);
				result = SDL2.SDL_ttf.TTF_RenderUNICODE_Solid_Wrapped(arg1, arg2, arg3, arg4);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderUNICODE_Solid_Wrapped args is error");
			return 1;
        }
        
        private static int TTF_RenderGlyph_Solid(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, ushort, SDL2.SDL.SDL_Color>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<ushort>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				result = SDL2.SDL_ttf.TTF_RenderGlyph_Solid(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderGlyph_Solid args is error");
			return 1;
        }
        
        private static int TTF_RenderGlyph32_Solid(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, uint, SDL2.SDL.SDL_Color>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<uint>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				result = SDL2.SDL_ttf.TTF_RenderGlyph32_Solid(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderGlyph32_Solid args is error");
			return 1;
        }
        
        private static int TTF_RenderText_Shaded(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color, SDL2.SDL.SDL_Color>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				var arg4 = L.CheckAny<SDL2.SDL.SDL_Color>(4);
				result = SDL2.SDL_ttf.TTF_RenderText_Shaded(arg1, arg2, arg3, arg4);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderText_Shaded args is error");
			return 1;
        }
        
        private static int TTF_RenderUTF8_Shaded(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color, SDL2.SDL.SDL_Color>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				var arg4 = L.CheckAny<SDL2.SDL.SDL_Color>(4);
				result = SDL2.SDL_ttf.TTF_RenderUTF8_Shaded(arg1, arg2, arg3, arg4);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderUTF8_Shaded args is error");
			return 1;
        }
        
        private static int TTF_RenderUNICODE_Shaded(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color, SDL2.SDL.SDL_Color>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				var arg4 = L.CheckAny<SDL2.SDL.SDL_Color>(4);
				result = SDL2.SDL_ttf.TTF_RenderUNICODE_Shaded(arg1, arg2, arg3, arg4);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderUNICODE_Shaded args is error");
			return 1;
        }
        
        private static int TTF_RenderText_Shaded_Wrapped(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color, SDL2.SDL.SDL_Color, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				var arg4 = L.CheckAny<SDL2.SDL.SDL_Color>(4);
				var arg5 = L.CheckAny<uint>(5);
				result = SDL2.SDL_ttf.TTF_RenderText_Shaded_Wrapped(arg1, arg2, arg3, arg4, arg5);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderText_Shaded_Wrapped args is error");
			return 1;
        }
        
        private static int TTF_RenderUTF8_Shaded_Wrapped(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color, SDL2.SDL.SDL_Color, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				var arg4 = L.CheckAny<SDL2.SDL.SDL_Color>(4);
				var arg5 = L.CheckAny<uint>(5);
				result = SDL2.SDL_ttf.TTF_RenderUTF8_Shaded_Wrapped(arg1, arg2, arg3, arg4, arg5);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderUTF8_Shaded_Wrapped args is error");
			return 1;
        }
        
        private static int TTF_RenderUNICODE_Shaded_Wrapped(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color, SDL2.SDL.SDL_Color, uint>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				var arg4 = L.CheckAny<SDL2.SDL.SDL_Color>(4);
				var arg5 = L.CheckAny<uint>(5);
				result = SDL2.SDL_ttf.TTF_RenderUNICODE_Shaded_Wrapped(arg1, arg2, arg3, arg4, arg5);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderUNICODE_Shaded_Wrapped args is error");
			return 1;
        }
        
        private static int TTF_RenderGlyph_Shaded(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, ushort, SDL2.SDL.SDL_Color, SDL2.SDL.SDL_Color>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<ushort>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				var arg4 = L.CheckAny<SDL2.SDL.SDL_Color>(4);
				result = SDL2.SDL_ttf.TTF_RenderGlyph_Shaded(arg1, arg2, arg3, arg4);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderGlyph_Shaded args is error");
			return 1;
        }
        
        private static int TTF_RenderGlyph32_Shaded(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, uint, SDL2.SDL.SDL_Color, SDL2.SDL.SDL_Color>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<uint>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				var arg4 = L.CheckAny<SDL2.SDL.SDL_Color>(4);
				result = SDL2.SDL_ttf.TTF_RenderGlyph32_Shaded(arg1, arg2, arg3, arg4);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderGlyph32_Shaded args is error");
			return 1;
        }
        
        private static int TTF_RenderText_Blended(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				result = SDL2.SDL_ttf.TTF_RenderText_Blended(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderText_Blended args is error");
			return 1;
        }
        
        private static int TTF_RenderUTF8_Blended(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, string, SDL2.SDL.SDL_Color>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<string>(2);
				var arg3 = L.CheckAny<SDL2.SDL.SDL_Color>(3);
				result = SDL2.SDL_ttf.TTF_RenderUTF8_Blended(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_RenderUTF8_Blended args is error");
			return 1;
        }
        
        private static int TTF_LinkedVersion(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				SDL2.SDL.SDL_version result;
				result = SDL2.SDL_ttf.TTF_LinkedVersion();
				L.PushAny<SDL2.SDL.SDL_version>(result);
				return 1;
			}
			L.L_Error("call function TTF_LinkedVersion args is error");
			return 1;
        }
        
        private static int TTF_ByteSwappedUNICODE(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<int>(1))
			{
				var arg1 = L.CheckAny<int>(1);
				SDL2.SDL_ttf.TTF_ByteSwappedUNICODE(arg1);
				return 0;
			}
			L.L_Error("call function TTF_ByteSwappedUNICODE args is error");
			return 1;
        }
        
        private static int TTF_Init(UniLua.ILuaState L)
        {
			if(L.CheckNum(0))
			{
				int result;
				result = SDL2.SDL_ttf.TTF_Init();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_Init args is error");
			return 1;
        }
        
        private static int TTF_OpenFont(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<string, int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<string>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL_ttf.TTF_OpenFont(arg1, arg2);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_OpenFont args is error");
			return 1;
        }
        
        private static int TTF_OpenFontRW(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<System.IntPtr, int, int>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				result = SDL2.SDL_ttf.TTF_OpenFontRW(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_OpenFontRW args is error");
			return 1;
        }
        
        private static int TTF_OpenFontIndex(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<string, int, long>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<string>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<long>(3);
				result = SDL2.SDL_ttf.TTF_OpenFontIndex(arg1, arg2, arg3);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_OpenFontIndex args is error");
			return 1;
        }
        
        private static int TTF_OpenFontIndexRW(UniLua.ILuaState L)
        {
			if(L.CheckNum(4) && L.CheckType<System.IntPtr, int, int, long>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				var arg3 = L.CheckAny<int>(3);
				var arg4 = L.CheckAny<long>(4);
				result = SDL2.SDL_ttf.TTF_OpenFontIndexRW(arg1, arg2, arg3, arg4);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_OpenFontIndexRW args is error");
			return 1;
        }
        
        private static int TTF_SetFontSize(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				result = SDL2.SDL_ttf.TTF_SetFontSize(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_SetFontSize args is error");
			return 1;
        }
        
        private static int TTF_GetFontStyle(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_ttf.TTF_GetFontStyle(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_GetFontStyle args is error");
			return 1;
        }
        
        private static int TTF_SetFontStyle(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				SDL2.SDL_ttf.TTF_SetFontStyle(arg1, arg2);
				return 0;
			}
			L.L_Error("call function TTF_SetFontStyle args is error");
			return 1;
        }
        
        private static int TTF_GetFontOutline(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_ttf.TTF_GetFontOutline(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_GetFontOutline args is error");
			return 1;
        }
        
        private static int TTF_SetFontOutline(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				SDL2.SDL_ttf.TTF_SetFontOutline(arg1, arg2);
				return 0;
			}
			L.L_Error("call function TTF_SetFontOutline args is error");
			return 1;
        }
        
        private static int TTF_GetFontHinting(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_ttf.TTF_GetFontHinting(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_GetFontHinting args is error");
			return 1;
        }
        
        private static int TTF_SetFontHinting(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				SDL2.SDL_ttf.TTF_SetFontHinting(arg1, arg2);
				return 0;
			}
			L.L_Error("call function TTF_SetFontHinting args is error");
			return 1;
        }
        
        private static int TTF_FontHeight(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_ttf.TTF_FontHeight(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_FontHeight args is error");
			return 1;
        }
        
        private static int TTF_FontAscent(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_ttf.TTF_FontAscent(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_FontAscent args is error");
			return 1;
        }
        
        private static int TTF_FontDescent(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_ttf.TTF_FontDescent(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_FontDescent args is error");
			return 1;
        }
        
        private static int TTF_FontLineSkip(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_ttf.TTF_FontLineSkip(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_FontLineSkip args is error");
			return 1;
        }
        
        private static int TTF_GetFontKerning(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_ttf.TTF_GetFontKerning(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_GetFontKerning args is error");
			return 1;
        }
        
        private static int TTF_SetFontKerning(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, int>(1))
			{
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<int>(2);
				SDL2.SDL_ttf.TTF_SetFontKerning(arg1, arg2);
				return 0;
			}
			L.L_Error("call function TTF_SetFontKerning args is error");
			return 1;
        }
        
        private static int TTF_FontFaces(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				System.IntPtr result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_ttf.TTF_FontFaces(arg1);
				L.PushAny<System.IntPtr>(result);
				return 1;
			}
			L.L_Error("call function TTF_FontFaces args is error");
			return 1;
        }
        
        private static int TTF_FontFaceIsFixedWidth(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_ttf.TTF_FontFaceIsFixedWidth(arg1);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_FontFaceIsFixedWidth args is error");
			return 1;
        }
        
        private static int TTF_FontFaceFamilyName(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				string result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_ttf.TTF_FontFaceFamilyName(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function TTF_FontFaceFamilyName args is error");
			return 1;
        }
        
        private static int TTF_FontFaceStyleName(UniLua.ILuaState L)
        {
			if(L.CheckNum(1) && L.CheckType<System.IntPtr>(1))
			{
				string result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				result = SDL2.SDL_ttf.TTF_FontFaceStyleName(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function TTF_FontFaceStyleName args is error");
			return 1;
        }
        
        private static int TTF_GlyphIsProvided(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, ushort>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<ushort>(2);
				result = SDL2.SDL_ttf.TTF_GlyphIsProvided(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_GlyphIsProvided args is error");
			return 1;
        }
        
        private static int TTF_GlyphIsProvided32(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<System.IntPtr, uint>(1))
			{
				int result;
				var arg1 = L.CheckAny<System.IntPtr>(1);
				var arg2 = L.CheckAny<uint>(2);
				result = SDL2.SDL_ttf.TTF_GlyphIsProvided32(arg1, arg2);
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function TTF_GlyphIsProvided32 args is error");
			return 1;
        }
    }
}
