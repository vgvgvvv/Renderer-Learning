//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UniToLua
{
    using SoftwareRenderer.Render;
    using System;
    using MathLib;
    
    
    public class SoftwareRenderer1Render1VertexWrap
    {
        
        public static void Register(UniLua.ILuaState L)
        {
			L.BeginClass(typeof(SoftwareRenderer.Render.Vertex), typeof(System.ValueType));
			L.RegFunction("New", _CreateSoftwareRenderer1Render1Vertex);
			L.RegVar("Position", get_Position, set_Position);
			L.RegVar("UV", get_UV, set_UV);
			L.RegVar("Normal", get_Normal, set_Normal);
			L.RegVar("Color", get_Color, set_Color);
			L.RegFunction("Lerp", Lerp);
			L.RegFunction("ApplyTransform", ApplyTransform);
			L.RegFunction("Equals", Equals);
			L.RegFunction("GetHashCode", GetHashCode);
			L.RegFunction("ToString", ToString);
			L.RegFunction("GetType", GetType);
			L.EndClass();
        }
        
        private static int _CreateSoftwareRenderer1Render1Vertex(UniLua.ILuaState L)
        {
			if(L.CheckNum(1)&& L.CheckType<MathLib.Vector3>(1))
			{
				var arg1 = L.CheckAny<MathLib.Vector3>(1);
				L.PushAny<SoftwareRenderer.Render.Vertex>(new SoftwareRenderer.Render.Vertex(arg1));
				return 1;
			}
			else if(L.CheckNum(2)&& L.CheckType<MathLib.Vector3, MathLib.Vector2>(1))
			{
				var arg1 = L.CheckAny<MathLib.Vector3>(1);
				var arg2 = L.CheckAny<MathLib.Vector2>(2);
				L.PushAny<SoftwareRenderer.Render.Vertex>(new SoftwareRenderer.Render.Vertex(arg1, arg2));
				return 1;
			}
			L.L_Error("call Vertex constructor args is error");
			return 1;
        }
        
        private static int get_Position(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Vertex) L.ToUserData(1);
			L.PushAny<MathLib.Vector3>(obj.Position);
			return 1;
        }
        
        private static int set_Position(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Vertex) L.ToUserData(1);
			var value = L.CheckAny<MathLib.Vector3>(2);
			obj.Position = value;
			// replace old struct
			L.PushAny<SoftwareRenderer.Render.Vertex>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_UV(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Vertex) L.ToUserData(1);
			L.PushAny<MathLib.Vector2>(obj.UV);
			return 1;
        }
        
        private static int set_UV(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Vertex) L.ToUserData(1);
			var value = L.CheckAny<MathLib.Vector2>(2);
			obj.UV = value;
			// replace old struct
			L.PushAny<SoftwareRenderer.Render.Vertex>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_Normal(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Vertex) L.ToUserData(1);
			L.PushAny<MathLib.Vector3>(obj.Normal);
			return 1;
        }
        
        private static int set_Normal(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Vertex) L.ToUserData(1);
			var value = L.CheckAny<MathLib.Vector3>(2);
			obj.Normal = value;
			// replace old struct
			L.PushAny<SoftwareRenderer.Render.Vertex>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int get_Color(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Vertex) L.ToUserData(1);
			L.PushAny<MathLib.Color>(obj.Color);
			return 1;
        }
        
        private static int set_Color(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.Vertex) L.ToUserData(1);
			var value = L.CheckAny<MathLib.Color>(2);
			obj.Color = value;
			// replace old struct
			L.PushAny<SoftwareRenderer.Render.Vertex>(obj);
			L.Replace(1);
			return 0;
        }
        
        private static int Lerp(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<SoftwareRenderer.Render.Vertex, SoftwareRenderer.Render.Vertex, float>(1))
			{
				SoftwareRenderer.Render.Vertex result;
				var arg1 = L.CheckAny<SoftwareRenderer.Render.Vertex>(1);
				var arg2 = L.CheckAny<SoftwareRenderer.Render.Vertex>(2);
				var arg3 = L.CheckAny<float>(3);
				result = SoftwareRenderer.Render.Vertex.Lerp(arg1, arg2, arg3);
				L.PushAny<SoftwareRenderer.Render.Vertex>(result);
				return 1;
			}
			L.L_Error("call function Lerp args is error");
			return 1;
        }
        
        private static int ApplyTransform(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SoftwareRenderer.Render.Vertex, MathLib.Matrix4x4>(1))
			{
				var obj = (SoftwareRenderer.Render.Vertex) L.ToUserData(1);
				var arg1 = L.CheckAny<MathLib.Matrix4x4>(2);
				obj.ApplyTransform(arg1);
				return 0;
			}
			L.L_Error("call function ApplyTransform args is error");
			return 1;
        }
        
        private static int Equals(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SoftwareRenderer.Render.Vertex, object>(1))
			{
				bool result;
				var obj = (SoftwareRenderer.Render.Vertex) L.ToUserData(1);
				var arg1 = L.CheckAny<object>(2);
				result = obj.Equals(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function Equals args is error");
			return 1;
        }
        
        private static int GetHashCode(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				int result;
				var obj = (SoftwareRenderer.Render.Vertex) L.ToUserData(1);
				result = obj.GetHashCode();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function GetHashCode args is error");
			return 1;
        }
        
        private static int ToString(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				string result;
				var obj = (SoftwareRenderer.Render.Vertex) L.ToUserData(1);
				result = obj.ToString();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function ToString args is error");
			return 1;
        }
        
        private static int GetType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				System.Type result;
				var obj = (SoftwareRenderer.Render.Vertex) L.ToUserData(1);
				result = obj.GetType();
				L.PushAny<System.Type>(result);
				return 1;
			}
			L.L_Error("call function GetType args is error");
			return 1;
        }
    }
}
