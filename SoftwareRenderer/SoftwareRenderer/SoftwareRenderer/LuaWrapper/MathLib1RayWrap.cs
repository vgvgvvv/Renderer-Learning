//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UniToLua
{
    using MathLib;
    using System;
    
    
    public class MathLib1RayWrap
    {
        
        public static void Register(UniLua.ILuaState L)
        {
			L.BeginClass(typeof(MathLib.Ray), typeof(System.ValueType));
			L.RegFunction("New", _CreateMathLib1Ray);
			L.RegVar("origin", get_origin, set_origin);
			L.RegVar("direction", get_direction, set_direction);
			L.RegFunction("GetPoint", GetPoint);
			L.RegFunction("ToString", ToString);
			L.RegFunction("Equals", Equals);
			L.RegFunction("GetHashCode", GetHashCode);
			L.RegFunction("GetType", GetType);
			L.EndClass();
        }
        
        private static int _CreateMathLib1Ray(UniLua.ILuaState L)
        {
			if(L.CheckNum(2)&& L.CheckType<MathLib.Vector3, MathLib.Vector3>(1))
			{
				var arg1 = L.CheckAny<MathLib.Vector3>(1);
				var arg2 = L.CheckAny<MathLib.Vector3>(2);
				L.PushAny<MathLib.Ray>(new MathLib.Ray(arg1, arg2));
				return 1;
			}
			L.L_Error("call Ray constructor args is error");
			return 1;
        }
        
        private static int get_origin(UniLua.ILuaState L)
        {
			var obj = (MathLib.Ray) L.ToUserData(1);
			L.PushAny<MathLib.Vector3>(obj.origin);
			return 1;
        }
        
        private static int set_origin(UniLua.ILuaState L)
        {
			var obj = (MathLib.Ray) L.ToUserData(1);
			var value = L.CheckAny<MathLib.Vector3>(2);
			obj.origin = value;
			return 0;
        }
        
        private static int get_direction(UniLua.ILuaState L)
        {
			var obj = (MathLib.Ray) L.ToUserData(1);
			L.PushAny<MathLib.Vector3>(obj.direction);
			return 1;
        }
        
        private static int set_direction(UniLua.ILuaState L)
        {
			var obj = (MathLib.Ray) L.ToUserData(1);
			var value = L.CheckAny<MathLib.Vector3>(2);
			obj.direction = value;
			return 0;
        }
        
        private static int GetPoint(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Ray, float>(1))
			{
				MathLib.Vector3 result;
				var obj = (MathLib.Ray) L.ToUserData(1);
				var arg1 = L.CheckAny<float>(2);
				result = obj.GetPoint(arg1);
				L.PushAny<MathLib.Vector3>(result);
				return 1;
			}
			L.L_Error("call function GetPoint args is error");
			return 1;
        }
        
        private static int ToString(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				string result;
				var obj = (MathLib.Ray) L.ToUserData(1);
				result = obj.ToString();
				L.PushAny<string>(result);
				return 1;
			}
			else if(L.CheckNum(2) && L.CheckType<MathLib.Ray, string>(1))
			{
				string result;
				var obj = (MathLib.Ray) L.ToUserData(1);
				var arg1 = L.CheckAny<string>(2);
				result = obj.ToString(arg1);
				L.PushAny<string>(result);
				return 1;
			}
			else if(L.CheckNum(3) && L.CheckType<MathLib.Ray, string, System.IFormatProvider>(1))
			{
				string result;
				var obj = (MathLib.Ray) L.ToUserData(1);
				var arg1 = L.CheckAny<string>(2);
				var arg2 = L.CheckAny<System.IFormatProvider>(3);
				result = obj.ToString(arg1, arg2);
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function ToString args is error");
			return 1;
        }
        
        private static int Equals(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<MathLib.Ray, object>(1))
			{
				bool result;
				var obj = (MathLib.Ray) L.ToUserData(1);
				var arg1 = L.CheckAny<object>(2);
				result = obj.Equals(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function Equals args is error");
			return 1;
        }
        
        private static int GetHashCode(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				int result;
				var obj = (MathLib.Ray) L.ToUserData(1);
				result = obj.GetHashCode();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function GetHashCode args is error");
			return 1;
        }
        
        private static int GetType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				System.Type result;
				var obj = (MathLib.Ray) L.ToUserData(1);
				result = obj.GetType();
				L.PushAny<System.Type>(result);
				return 1;
			}
			L.L_Error("call function GetType args is error");
			return 1;
        }
    }
}
