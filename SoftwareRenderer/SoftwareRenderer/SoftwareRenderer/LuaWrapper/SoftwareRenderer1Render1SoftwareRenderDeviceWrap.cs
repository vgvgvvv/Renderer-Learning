//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UniToLua
{
    using SoftwareRenderer.Render;
    using System;
    using MathLib;
    
    
    public class SoftwareRenderer1Render1SoftwareRenderDeviceWrap
    {
        
        public static void Register(UniLua.ILuaState L)
        {
			L.BeginClass(typeof(SoftwareRenderer.Render.SoftwareRenderDevice), null);
			L.RegFunction("New", _CreateSoftwareRenderer1Render1SoftwareRenderDevice);
			L.RegVar("FrameBuffer", get_FrameBuffer, null);
			L.RegVar("ZBuffer", get_ZBuffer, null);
			L.RegVar("Width", get_Width, null);
			L.RegVar("Height", get_Height, null);
			L.RegVar("ClearColor", get_ClearColor, null);
			L.RegVar("RenderMode", get_RenderMode, set_RenderMode);
			L.RegVar("ViewMat", get_ViewMat, null);
			L.RegVar("ProjectorMat", get_ProjectorMat, null);
			L.RegFunction("Draw2DPoint", Draw2DPoint);
			L.RegFunction("Draw2DLine", Draw2DLine);
			L.RegFunction("Draw2DTriangle", Draw2DTriangle);
			L.RegFunction("Draw3DLine", Draw3DLine);
			L.RegFunction("Draw3DTriangle", Draw3DTriangle);
			L.RegFunction("FrameClear", FrameClear);
			L.RegFunction("PushDrawCommand", PushDrawCommand);
			L.RegFunction("Render", Render);
			L.RegFunction("GetType", GetType);
			L.RegFunction("ToString", ToString);
			L.RegFunction("Equals", Equals);
			L.RegFunction("GetHashCode", GetHashCode);
			L.EndClass();
        }
        
        private static int _CreateSoftwareRenderer1Render1SoftwareRenderDevice(UniLua.ILuaState L)
        {
			if(L.CheckNum(2)&& L.CheckType<int, int>(1))
			{
				var arg1 = L.CheckAny<int>(1);
				var arg2 = L.CheckAny<int>(2);
				L.PushAny<SoftwareRenderer.Render.SoftwareRenderDevice>(new SoftwareRenderer.Render.SoftwareRenderDevice(arg1, arg2));
				return 1;
			}
			L.L_Error("call SoftwareRenderDevice constructor args is error");
			return 1;
        }
        
        private static int get_FrameBuffer(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
			L.PushAny<MathLib.Color[]>(obj.FrameBuffer);
			return 1;
        }
        
        private static int get_ZBuffer(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
			L.PushAny<float[]>(obj.ZBuffer);
			return 1;
        }
        
        private static int get_Width(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
			L.PushAny<int>(obj.Width);
			return 1;
        }
        
        private static int get_Height(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
			L.PushAny<int>(obj.Height);
			return 1;
        }
        
        private static int get_ClearColor(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
			L.PushAny<MathLib.Color>(obj.ClearColor);
			return 1;
        }
        
        private static int get_RenderMode(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
			L.PushAny<SoftwareRenderer.Render.RenderMode>(obj.RenderMode);
			return 1;
        }
        
        private static int set_RenderMode(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
			var value = L.CheckAny<SoftwareRenderer.Render.RenderMode>(2);
			obj.RenderMode = value;
			return 0;
        }
        
        private static int get_ViewMat(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
			L.PushAny<MathLib.Matrix4x4>(obj.ViewMat);
			return 1;
        }
        
        private static int get_ProjectorMat(UniLua.ILuaState L)
        {
			var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
			L.PushAny<MathLib.Matrix4x4>(obj.ProjectorMat);
			return 1;
        }
        
        private static int Draw2DPoint(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<SoftwareRenderer.Render.SoftwareRenderDevice, int, int, float, MathLib.Color>(1))
			{
				var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
				var arg1 = L.CheckAny<int>(2);
				var arg2 = L.CheckAny<int>(3);
				var arg3 = L.CheckAny<float>(4);
				var arg4 = L.CheckAny<MathLib.Color>(5);
				obj.Draw2DPoint(arg1, arg2, arg3, arg4);
				return 0;
			}
			L.L_Error("call function Draw2DPoint args is error");
			return 1;
        }
        
        private static int Draw2DLine(UniLua.ILuaState L)
        {
			if(L.CheckNum(9) && L.CheckType<SoftwareRenderer.Render.SoftwareRenderDevice, int, int, float, MathLib.Color, int, int, float, MathLib.Color>(1))
			{
				var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
				var arg1 = L.CheckAny<int>(2);
				var arg2 = L.CheckAny<int>(3);
				var arg3 = L.CheckAny<float>(4);
				var arg4 = L.CheckAny<MathLib.Color>(5);
				var arg5 = L.CheckAny<int>(6);
				var arg6 = L.CheckAny<int>(7);
				var arg7 = L.CheckAny<float>(8);
				var arg8 = L.CheckAny<MathLib.Color>(9);
				obj.Draw2DLine(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return 0;
			}
			else if(L.CheckRange(3, 4) && L.CheckType<SoftwareRenderer.Render.SoftwareRenderDevice, SoftwareRenderer.Render.Vertex, SoftwareRenderer.Render.Vertex>(1))
			{
				var top = L.GetTop();
				var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
				var arg1 = L.CheckAny<SoftwareRenderer.Render.Vertex>(2);
				var arg2 = L.CheckAny<SoftwareRenderer.Render.Vertex>(3);
				var arg3 = default(System.Nullable<MathLib.Color>);				
				if(5 > top)
				{
					arg3 = L.CheckAny<System.Nullable<MathLib.Color>>(4);
					obj.Draw2DLine(arg1, arg2, arg3);
					return 0;
				}
				obj.Draw2DLine(arg1, arg2);
				return 0;
			}
			L.L_Error("call function Draw2DLine args is error");
			return 1;
        }
        
        private static int Draw2DTriangle(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<SoftwareRenderer.Render.SoftwareRenderDevice, SoftwareRenderer.Render.Vertex, SoftwareRenderer.Render.Vertex, SoftwareRenderer.Render.Vertex, SoftwareRenderer.Render.Material>(1))
			{
				var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
				var arg1 = L.CheckAny<SoftwareRenderer.Render.Vertex>(2);
				var arg2 = L.CheckAny<SoftwareRenderer.Render.Vertex>(3);
				var arg3 = L.CheckAny<SoftwareRenderer.Render.Vertex>(4);
				var arg4 = L.CheckAny<SoftwareRenderer.Render.Material>(5);
				obj.Draw2DTriangle(arg1, arg2, arg3, arg4);
				return 0;
			}
			L.L_Error("call function Draw2DTriangle args is error");
			return 1;
        }
        
        private static int Draw3DLine(UniLua.ILuaState L)
        {
			if(L.CheckNum(3) && L.CheckType<SoftwareRenderer.Render.SoftwareRenderDevice, SoftwareRenderer.Render.Vertex, SoftwareRenderer.Render.Vertex>(1))
			{
				var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
				var arg1 = L.CheckAny<SoftwareRenderer.Render.Vertex>(2);
				var arg2 = L.CheckAny<SoftwareRenderer.Render.Vertex>(3);
				obj.Draw3DLine(arg1, arg2);
				return 0;
			}
			L.L_Error("call function Draw3DLine args is error");
			return 1;
        }
        
        private static int Draw3DTriangle(UniLua.ILuaState L)
        {
			if(L.CheckNum(5) && L.CheckType<SoftwareRenderer.Render.SoftwareRenderDevice, SoftwareRenderer.Render.Vertex, SoftwareRenderer.Render.Vertex, SoftwareRenderer.Render.Vertex, SoftwareRenderer.Render.Material>(1))
			{
				var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
				var arg1 = L.CheckAny<SoftwareRenderer.Render.Vertex>(2);
				var arg2 = L.CheckAny<SoftwareRenderer.Render.Vertex>(3);
				var arg3 = L.CheckAny<SoftwareRenderer.Render.Vertex>(4);
				var arg4 = L.CheckAny<SoftwareRenderer.Render.Material>(5);
				obj.Draw3DTriangle(arg1, arg2, arg3, arg4);
				return 0;
			}
			L.L_Error("call function Draw3DTriangle args is error");
			return 1;
        }
        
        private static int FrameClear(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
				obj.FrameClear();
				return 0;
			}
			L.L_Error("call function FrameClear args is error");
			return 1;
        }
        
        private static int PushDrawCommand(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SoftwareRenderer.Render.SoftwareRenderDevice, SoftwareRenderer.Render.DrawCommand>(1))
			{
				var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
				var arg1 = L.CheckAny<SoftwareRenderer.Render.DrawCommand>(2);
				obj.PushDrawCommand(arg1);
				return 0;
			}
			L.L_Error("call function PushDrawCommand args is error");
			return 1;
        }
        
        private static int Render(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				MathLib.Color[] result;
				var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
				result = obj.Render();
				L.PushAny<MathLib.Color[]>(result);
				return 1;
			}
			L.L_Error("call function Render args is error");
			return 1;
        }
        
        private static int GetType(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				System.Type result;
				var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
				result = obj.GetType();
				L.PushAny<System.Type>(result);
				return 1;
			}
			L.L_Error("call function GetType args is error");
			return 1;
        }
        
        private static int ToString(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				string result;
				var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
				result = obj.ToString();
				L.PushAny<string>(result);
				return 1;
			}
			L.L_Error("call function ToString args is error");
			return 1;
        }
        
        private static int Equals(UniLua.ILuaState L)
        {
			if(L.CheckNum(2) && L.CheckType<SoftwareRenderer.Render.SoftwareRenderDevice, object>(1))
			{
				bool result;
				var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
				var arg1 = L.CheckAny<object>(2);
				result = obj.Equals(arg1);
				L.PushAny<bool>(result);
				return 1;
			}
			L.L_Error("call function Equals args is error");
			return 1;
        }
        
        private static int GetHashCode(UniLua.ILuaState L)
        {
			if(L.CheckNum(1))
			{
				int result;
				var obj = (SoftwareRenderer.Render.SoftwareRenderDevice) L.ToUserData(1);
				result = obj.GetHashCode();
				L.PushAny<int>(result);
				return 1;
			}
			L.L_Error("call function GetHashCode args is error");
			return 1;
        }
    }
}
